
SPI-to-Ethernet.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002ae8  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000003c  08002bf4  08002bf4  00012bf4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002c30  08002c30  0002003c  2**0
                  CONTENTS
  4 .ARM          00000000  08002c30  08002c30  0002003c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002c30  08002c30  0002003c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002c30  08002c30  00012c30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002c34  08002c34  00012c34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000003c  20000000  08002c38  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000009c  2000003c  08002c74  0002003c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000d8  08002c74  000200d8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00006c9a  00000000  00000000  00020065  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001994  00000000  00000000  00026cff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000818  00000000  00000000  00028698  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000758  00000000  00000000  00028eb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016904  00000000  00000000  00029608  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00008995  00000000  00000000  0003ff0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00081260  00000000  00000000  000488a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000c9b01  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001f2c  00000000  00000000  000c9b54  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000003c 	.word	0x2000003c
 8000128:	00000000 	.word	0x00000000
 800012c:	08002bdc 	.word	0x08002bdc

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000040 	.word	0x20000040
 8000148:	08002bdc 	.word	0x08002bdc

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <main>:
#include "main.h"

/**
 * @brief this is a demo or a sample that illustrates how to configure a node and send a greeting message through UDP. note: there are only 8 socket registers in w5500 please refer to datasheet for more information.
 */
int main(void) {
 800015c:	b580      	push	{r7, lr}
 800015e:	b08a      	sub	sp, #40	; 0x28
 8000160:	af00      	add	r7, sp, #0
	configureMCU();//MCU configuration
 8000162:	f000 fddd 	bl	8000d20 <configureMCU>

	uint8_t socNum=0;
 8000166:	2300      	movs	r3, #0
 8000168:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	uint8_t mac[]={ 0x00, 0x08, 0xdc, 0xab, 0xcd, 0xef };// Mac address
 800016c:	4a1e      	ldr	r2, [pc, #120]	; (80001e8 <main+0x8c>)
 800016e:	f107 0320 	add.w	r3, r7, #32
 8000172:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000176:	6018      	str	r0, [r3, #0]
 8000178:	3304      	adds	r3, #4
 800017a:	8019      	strh	r1, [r3, #0]
	uint8_t ip[]={ 192, 168, 1, 15 };// IP address
 800017c:	4b1b      	ldr	r3, [pc, #108]	; (80001ec <main+0x90>)
 800017e:	61fb      	str	r3, [r7, #28]
	uint8_t sn[]={ 255, 255, 255, 0 };// Subnet mask
 8000180:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8000184:	61bb      	str	r3, [r7, #24]
	uint8_t gw[]={ 192, 168, 1, 1 };// Gateway address
 8000186:	4b1a      	ldr	r3, [pc, #104]	; (80001f0 <main+0x94>)
 8000188:	617b      	str	r3, [r7, #20]

	initializeW5500(mac, ip, sn, gw);//configures the MAC address, IP address, subnet mask and gateway of the device or node.
 800018a:	f107 0314 	add.w	r3, r7, #20
 800018e:	f107 0218 	add.w	r2, r7, #24
 8000192:	f107 011c 	add.w	r1, r7, #28
 8000196:	f107 0020 	add.w	r0, r7, #32
 800019a:	f000 fdcd 	bl	8000d38 <initializeW5500>

	uint8_t dstip[4] = { 192, 168, 1, 4 };//destination ip address
 800019e:	4b15      	ldr	r3, [pc, #84]	; (80001f4 <main+0x98>)
 80001a0:	613b      	str	r3, [r7, #16]
	char greetingMSG[] = "Hello User\0";
 80001a2:	4a15      	ldr	r2, [pc, #84]	; (80001f8 <main+0x9c>)
 80001a4:	1d3b      	adds	r3, r7, #4
 80001a6:	ca07      	ldmia	r2, {r0, r1, r2}
 80001a8:	e883 0007 	stmia.w	r3, {r0, r1, r2}

	/*in this section we will keep sending a greeting message*/

	/*initializes socket with a port number and mode. for instance, a port number of 5000 and udp is used in this sample*/
	if ((socket(socNum, Sn_MR_UDP, 5000, 0)) == socNum) {
 80001ac:	f897 0027 	ldrb.w	r0, [r7, #39]	; 0x27
 80001b0:	2300      	movs	r3, #0
 80001b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80001b6:	2102      	movs	r1, #2
 80001b8:	f000 f820 	bl	80001fc <socket>
 80001bc:	4603      	mov	r3, r0
 80001be:	461a      	mov	r2, r3
 80001c0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80001c4:	429a      	cmp	r2, r3
 80001c6:	d109      	bne.n	80001dc <main+0x80>
		while (1) {
			Socket_sendUDP(socNum, greetingMSG, dstip, 5001);//sends message to a destination ip address and port
 80001c8:	f107 0210 	add.w	r2, r7, #16
 80001cc:	1d39      	adds	r1, r7, #4
 80001ce:	f897 0027 	ldrb.w	r0, [r7, #39]	; 0x27
 80001d2:	f241 3389 	movw	r3, #5001	; 0x1389
 80001d6:	f000 fdfd 	bl	8000dd4 <Socket_sendUDP>
 80001da:	e7f5      	b.n	80001c8 <main+0x6c>
 80001dc:	2300      	movs	r3, #0
			//HAL_Delay(500);
		}
	close(socNum);//closes socket
	}
}
 80001de:	4618      	mov	r0, r3
 80001e0:	3728      	adds	r7, #40	; 0x28
 80001e2:	46bd      	mov	sp, r7
 80001e4:	bd80      	pop	{r7, pc}
 80001e6:	bf00      	nop
 80001e8:	08002bf4 	.word	0x08002bf4
 80001ec:	0f01a8c0 	.word	0x0f01a8c0
 80001f0:	0101a8c0 	.word	0x0101a8c0
 80001f4:	0401a8c0 	.word	0x0401a8c0
 80001f8:	08002bfc 	.word	0x08002bfc

080001fc <socket>:
   }while(0);              \



int8_t socket(uint8_t sn, uint8_t protocol, uint16_t port, uint8_t flag)
{
 80001fc:	b590      	push	{r4, r7, lr}
 80001fe:	b085      	sub	sp, #20
 8000200:	af00      	add	r7, sp, #0
 8000202:	4604      	mov	r4, r0
 8000204:	4608      	mov	r0, r1
 8000206:	4611      	mov	r1, r2
 8000208:	461a      	mov	r2, r3
 800020a:	4623      	mov	r3, r4
 800020c:	71fb      	strb	r3, [r7, #7]
 800020e:	4603      	mov	r3, r0
 8000210:	71bb      	strb	r3, [r7, #6]
 8000212:	460b      	mov	r3, r1
 8000214:	80bb      	strh	r3, [r7, #4]
 8000216:	4613      	mov	r3, r2
 8000218:	70fb      	strb	r3, [r7, #3]
	CHECK_SOCKNUM();
 800021a:	79fb      	ldrb	r3, [r7, #7]
 800021c:	2b08      	cmp	r3, #8
 800021e:	d902      	bls.n	8000226 <socket+0x2a>
 8000220:	f04f 33ff 	mov.w	r3, #4294967295
 8000224:	e0f2      	b.n	800040c <socket+0x210>
	switch(protocol)
 8000226:	79bb      	ldrb	r3, [r7, #6]
 8000228:	2b01      	cmp	r3, #1
 800022a:	d005      	beq.n	8000238 <socket+0x3c>
 800022c:	2b00      	cmp	r3, #0
 800022e:	dd11      	ble.n	8000254 <socket+0x58>
 8000230:	3b02      	subs	r3, #2
 8000232:	2b02      	cmp	r3, #2
 8000234:	d80e      	bhi.n	8000254 <socket+0x58>
	    break;
         }
      case Sn_MR_UDP :
      case Sn_MR_MACRAW :
	  case Sn_MR_IPRAW :
         break;
 8000236:	e011      	b.n	800025c <socket+0x60>
            getSIPR((uint8_t*)&taddr);
 8000238:	f107 030c 	add.w	r3, r7, #12
 800023c:	2204      	movs	r2, #4
 800023e:	4619      	mov	r1, r3
 8000240:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 8000244:	f000 fbc8 	bl	80009d8 <WIZCHIP_READ_BUF>
            if(taddr == 0) return SOCKERR_SOCKINIT;
 8000248:	68fb      	ldr	r3, [r7, #12]
 800024a:	2b00      	cmp	r3, #0
 800024c:	d105      	bne.n	800025a <socket+0x5e>
 800024e:	f06f 0302 	mvn.w	r3, #2
 8000252:	e0db      	b.n	800040c <socket+0x210>
   #if ( _WIZCHIP_ < 5200 )
      case Sn_MR_PPPoE :
         break;
   #endif
      default :
         return SOCKERR_SOCKMODE;
 8000254:	f06f 0304 	mvn.w	r3, #4
 8000258:	e0d8      	b.n	800040c <socket+0x210>
	    break;
 800025a:	bf00      	nop
	}
	//M20150601 : For SF_TCP_ALIGN & W5300
	//if((flag & 0x06) != 0) return SOCKERR_SOCKFLAG;
	if((flag & 0x04) != 0) return SOCKERR_SOCKFLAG;
 800025c:	78fb      	ldrb	r3, [r7, #3]
 800025e:	f003 0304 	and.w	r3, r3, #4
 8000262:	2b00      	cmp	r3, #0
 8000264:	d002      	beq.n	800026c <socket+0x70>
 8000266:	f06f 0305 	mvn.w	r3, #5
 800026a:	e0cf      	b.n	800040c <socket+0x210>
#if _WIZCHIP_ == 5200
   if(flag & 0x10) return SOCKERR_SOCKFLAG;
#endif
	   
	if(flag != 0)
 800026c:	78fb      	ldrb	r3, [r7, #3]
 800026e:	2b00      	cmp	r3, #0
 8000270:	d025      	beq.n	80002be <socket+0xc2>
	{
   	switch(protocol)
 8000272:	79bb      	ldrb	r3, [r7, #6]
 8000274:	2b01      	cmp	r3, #1
 8000276:	d002      	beq.n	800027e <socket+0x82>
 8000278:	2b02      	cmp	r3, #2
 800027a:	d008      	beq.n	800028e <socket+0x92>
      	         if((flag & SF_MULTI_ENABLE) == 0) return SOCKERR_SOCKFLAG;
      	      }
   	      #endif
   	      break;
   	   default:
   	      break;
 800027c:	e024      	b.n	80002c8 <socket+0xcc>
   		     if((flag & (SF_TCP_NODELAY|SF_IO_NONBLOCK))==0) return SOCKERR_SOCKFLAG;
 800027e:	78fb      	ldrb	r3, [r7, #3]
 8000280:	f003 0321 	and.w	r3, r3, #33	; 0x21
 8000284:	2b00      	cmp	r3, #0
 8000286:	d11c      	bne.n	80002c2 <socket+0xc6>
 8000288:	f06f 0305 	mvn.w	r3, #5
 800028c:	e0be      	b.n	800040c <socket+0x210>
   	      if(flag & SF_IGMP_VER2)
 800028e:	78fb      	ldrb	r3, [r7, #3]
 8000290:	f003 0320 	and.w	r3, r3, #32
 8000294:	2b00      	cmp	r3, #0
 8000296:	d006      	beq.n	80002a6 <socket+0xaa>
   	         if((flag & SF_MULTI_ENABLE)==0) return SOCKERR_SOCKFLAG;
 8000298:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800029c:	2b00      	cmp	r3, #0
 800029e:	db02      	blt.n	80002a6 <socket+0xaa>
 80002a0:	f06f 0305 	mvn.w	r3, #5
 80002a4:	e0b2      	b.n	800040c <socket+0x210>
      	      if(flag & SF_UNI_BLOCK)
 80002a6:	78fb      	ldrb	r3, [r7, #3]
 80002a8:	f003 0310 	and.w	r3, r3, #16
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d00a      	beq.n	80002c6 <socket+0xca>
      	         if((flag & SF_MULTI_ENABLE) == 0) return SOCKERR_SOCKFLAG;
 80002b0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80002b4:	2b00      	cmp	r3, #0
 80002b6:	db06      	blt.n	80002c6 <socket+0xca>
 80002b8:	f06f 0305 	mvn.w	r3, #5
 80002bc:	e0a6      	b.n	800040c <socket+0x210>
   	}
   }
 80002be:	bf00      	nop
 80002c0:	e002      	b.n	80002c8 <socket+0xcc>
   	      break;
 80002c2:	bf00      	nop
 80002c4:	e000      	b.n	80002c8 <socket+0xcc>
   	      break;
 80002c6:	bf00      	nop
	close(sn);
 80002c8:	79fb      	ldrb	r3, [r7, #7]
 80002ca:	4618      	mov	r0, r3
 80002cc:	f000 f8ac 	bl	8000428 <close>
	//M20150601
	#if _WIZCHIP_ == 5300
	   setSn_MR(sn, ((uint16_t)(protocol | (flag & 0xF0))) | (((uint16_t)(flag & 0x02)) << 7) );
    #else
	   setSn_MR(sn, (protocol | (flag & 0xF0)));
 80002d0:	79fb      	ldrb	r3, [r7, #7]
 80002d2:	009b      	lsls	r3, r3, #2
 80002d4:	3301      	adds	r3, #1
 80002d6:	00db      	lsls	r3, r3, #3
 80002d8:	4618      	mov	r0, r3
 80002da:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80002de:	f023 030f 	bic.w	r3, r3, #15
 80002e2:	b25a      	sxtb	r2, r3
 80002e4:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80002e8:	4313      	orrs	r3, r2
 80002ea:	b25b      	sxtb	r3, r3
 80002ec:	b2db      	uxtb	r3, r3
 80002ee:	4619      	mov	r1, r3
 80002f0:	f000 fb24 	bl	800093c <WIZCHIP_WRITE>
    #endif
	if(!port)
 80002f4:	88bb      	ldrh	r3, [r7, #4]
 80002f6:	2b00      	cmp	r3, #0
 80002f8:	d110      	bne.n	800031c <socket+0x120>
	{
	   port = sock_any_port++;
 80002fa:	4b46      	ldr	r3, [pc, #280]	; (8000414 <socket+0x218>)
 80002fc:	881b      	ldrh	r3, [r3, #0]
 80002fe:	1c5a      	adds	r2, r3, #1
 8000300:	b291      	uxth	r1, r2
 8000302:	4a44      	ldr	r2, [pc, #272]	; (8000414 <socket+0x218>)
 8000304:	8011      	strh	r1, [r2, #0]
 8000306:	80bb      	strh	r3, [r7, #4]
	   if(sock_any_port == 0xFFF0) sock_any_port = SOCK_ANY_PORT_NUM;
 8000308:	4b42      	ldr	r3, [pc, #264]	; (8000414 <socket+0x218>)
 800030a:	881b      	ldrh	r3, [r3, #0]
 800030c:	f64f 72f0 	movw	r2, #65520	; 0xfff0
 8000310:	4293      	cmp	r3, r2
 8000312:	d103      	bne.n	800031c <socket+0x120>
 8000314:	4b3f      	ldr	r3, [pc, #252]	; (8000414 <socket+0x218>)
 8000316:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 800031a:	801a      	strh	r2, [r3, #0]
	}
   setSn_PORT(sn,port);	
 800031c:	79fb      	ldrb	r3, [r7, #7]
 800031e:	009b      	lsls	r3, r3, #2
 8000320:	3301      	adds	r3, #1
 8000322:	00db      	lsls	r3, r3, #3
 8000324:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000328:	461a      	mov	r2, r3
 800032a:	88bb      	ldrh	r3, [r7, #4]
 800032c:	0a1b      	lsrs	r3, r3, #8
 800032e:	b29b      	uxth	r3, r3
 8000330:	b2db      	uxtb	r3, r3
 8000332:	4619      	mov	r1, r3
 8000334:	4610      	mov	r0, r2
 8000336:	f000 fb01 	bl	800093c <WIZCHIP_WRITE>
 800033a:	79fb      	ldrb	r3, [r7, #7]
 800033c:	009b      	lsls	r3, r3, #2
 800033e:	3301      	adds	r3, #1
 8000340:	00db      	lsls	r3, r3, #3
 8000342:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8000346:	461a      	mov	r2, r3
 8000348:	88bb      	ldrh	r3, [r7, #4]
 800034a:	b2db      	uxtb	r3, r3
 800034c:	4619      	mov	r1, r3
 800034e:	4610      	mov	r0, r2
 8000350:	f000 faf4 	bl	800093c <WIZCHIP_WRITE>
   setSn_CR(sn,Sn_CR_OPEN);
 8000354:	79fb      	ldrb	r3, [r7, #7]
 8000356:	009b      	lsls	r3, r3, #2
 8000358:	3301      	adds	r3, #1
 800035a:	00db      	lsls	r3, r3, #3
 800035c:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8000360:	2101      	movs	r1, #1
 8000362:	4618      	mov	r0, r3
 8000364:	f000 faea 	bl	800093c <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 8000368:	bf00      	nop
 800036a:	79fb      	ldrb	r3, [r7, #7]
 800036c:	009b      	lsls	r3, r3, #2
 800036e:	3301      	adds	r3, #1
 8000370:	00db      	lsls	r3, r3, #3
 8000372:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8000376:	4618      	mov	r0, r3
 8000378:	f000 fa94 	bl	80008a4 <WIZCHIP_READ>
 800037c:	4603      	mov	r3, r0
 800037e:	2b00      	cmp	r3, #0
 8000380:	d1f3      	bne.n	800036a <socket+0x16e>
   //A20150401 : For release the previous sock_io_mode
   sock_io_mode &= ~(1 <<sn);
 8000382:	79fb      	ldrb	r3, [r7, #7]
 8000384:	2201      	movs	r2, #1
 8000386:	fa02 f303 	lsl.w	r3, r2, r3
 800038a:	b21b      	sxth	r3, r3
 800038c:	43db      	mvns	r3, r3
 800038e:	b21a      	sxth	r2, r3
 8000390:	4b21      	ldr	r3, [pc, #132]	; (8000418 <socket+0x21c>)
 8000392:	881b      	ldrh	r3, [r3, #0]
 8000394:	b21b      	sxth	r3, r3
 8000396:	4013      	ands	r3, r2
 8000398:	b21b      	sxth	r3, r3
 800039a:	b29a      	uxth	r2, r3
 800039c:	4b1e      	ldr	r3, [pc, #120]	; (8000418 <socket+0x21c>)
 800039e:	801a      	strh	r2, [r3, #0]
   //
	sock_io_mode |= ((flag & SF_IO_NONBLOCK) << sn);   
 80003a0:	78fb      	ldrb	r3, [r7, #3]
 80003a2:	f003 0201 	and.w	r2, r3, #1
 80003a6:	79fb      	ldrb	r3, [r7, #7]
 80003a8:	fa02 f303 	lsl.w	r3, r2, r3
 80003ac:	b21a      	sxth	r2, r3
 80003ae:	4b1a      	ldr	r3, [pc, #104]	; (8000418 <socket+0x21c>)
 80003b0:	881b      	ldrh	r3, [r3, #0]
 80003b2:	b21b      	sxth	r3, r3
 80003b4:	4313      	orrs	r3, r2
 80003b6:	b21b      	sxth	r3, r3
 80003b8:	b29a      	uxth	r2, r3
 80003ba:	4b17      	ldr	r3, [pc, #92]	; (8000418 <socket+0x21c>)
 80003bc:	801a      	strh	r2, [r3, #0]
   sock_is_sending &= ~(1<<sn);
 80003be:	79fb      	ldrb	r3, [r7, #7]
 80003c0:	2201      	movs	r2, #1
 80003c2:	fa02 f303 	lsl.w	r3, r2, r3
 80003c6:	b21b      	sxth	r3, r3
 80003c8:	43db      	mvns	r3, r3
 80003ca:	b21a      	sxth	r2, r3
 80003cc:	4b13      	ldr	r3, [pc, #76]	; (800041c <socket+0x220>)
 80003ce:	881b      	ldrh	r3, [r3, #0]
 80003d0:	b21b      	sxth	r3, r3
 80003d2:	4013      	ands	r3, r2
 80003d4:	b21b      	sxth	r3, r3
 80003d6:	b29a      	uxth	r2, r3
 80003d8:	4b10      	ldr	r3, [pc, #64]	; (800041c <socket+0x220>)
 80003da:	801a      	strh	r2, [r3, #0]
   sock_remained_size[sn] = 0;
 80003dc:	79fb      	ldrb	r3, [r7, #7]
 80003de:	4a10      	ldr	r2, [pc, #64]	; (8000420 <socket+0x224>)
 80003e0:	2100      	movs	r1, #0
 80003e2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   //M20150601 : repalce 0 with PACK_COMPLETED
   //sock_pack_info[sn] = 0;
   sock_pack_info[sn] = PACK_COMPLETED;
 80003e6:	79fb      	ldrb	r3, [r7, #7]
 80003e8:	4a0e      	ldr	r2, [pc, #56]	; (8000424 <socket+0x228>)
 80003ea:	2100      	movs	r1, #0
 80003ec:	54d1      	strb	r1, [r2, r3]
   //
   while(getSn_SR(sn) == SOCK_CLOSED);
 80003ee:	bf00      	nop
 80003f0:	79fb      	ldrb	r3, [r7, #7]
 80003f2:	009b      	lsls	r3, r3, #2
 80003f4:	3301      	adds	r3, #1
 80003f6:	00db      	lsls	r3, r3, #3
 80003f8:	f503 7340 	add.w	r3, r3, #768	; 0x300
 80003fc:	4618      	mov	r0, r3
 80003fe:	f000 fa51 	bl	80008a4 <WIZCHIP_READ>
 8000402:	4603      	mov	r3, r0
 8000404:	2b00      	cmp	r3, #0
 8000406:	d0f3      	beq.n	80003f0 <socket+0x1f4>
   return (int8_t)sn;
 8000408:	f997 3007 	ldrsb.w	r3, [r7, #7]
}	   
 800040c:	4618      	mov	r0, r3
 800040e:	3714      	adds	r7, #20
 8000410:	46bd      	mov	sp, r7
 8000412:	bd90      	pop	{r4, r7, pc}
 8000414:	20000000 	.word	0x20000000
 8000418:	20000058 	.word	0x20000058
 800041c:	2000005a 	.word	0x2000005a
 8000420:	2000005c 	.word	0x2000005c
 8000424:	2000006c 	.word	0x2000006c

08000428 <close>:

int8_t close(uint8_t sn)
{
 8000428:	b580      	push	{r7, lr}
 800042a:	b082      	sub	sp, #8
 800042c:	af00      	add	r7, sp, #0
 800042e:	4603      	mov	r3, r0
 8000430:	71fb      	strb	r3, [r7, #7]
	CHECK_SOCKNUM();
 8000432:	79fb      	ldrb	r3, [r7, #7]
 8000434:	2b08      	cmp	r3, #8
 8000436:	d902      	bls.n	800043e <close+0x16>
 8000438:	f04f 33ff 	mov.w	r3, #4294967295
 800043c:	e055      	b.n	80004ea <close+0xc2>
      while(getSn_CR(sn) != 0);
      while(getSn_SR(sn) != SOCK_UDP);
      sendto(sn,destip,1,destip,0x3000); // send the dummy data to an unknown destination(0.0.0.1).
   };   
#endif 
	setSn_CR(sn,Sn_CR_CLOSE);
 800043e:	79fb      	ldrb	r3, [r7, #7]
 8000440:	009b      	lsls	r3, r3, #2
 8000442:	3301      	adds	r3, #1
 8000444:	00db      	lsls	r3, r3, #3
 8000446:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800044a:	2110      	movs	r1, #16
 800044c:	4618      	mov	r0, r3
 800044e:	f000 fa75 	bl	800093c <WIZCHIP_WRITE>
   /* wait to process the command... */
	while( getSn_CR(sn) );
 8000452:	bf00      	nop
 8000454:	79fb      	ldrb	r3, [r7, #7]
 8000456:	009b      	lsls	r3, r3, #2
 8000458:	3301      	adds	r3, #1
 800045a:	00db      	lsls	r3, r3, #3
 800045c:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8000460:	4618      	mov	r0, r3
 8000462:	f000 fa1f 	bl	80008a4 <WIZCHIP_READ>
 8000466:	4603      	mov	r3, r0
 8000468:	2b00      	cmp	r3, #0
 800046a:	d1f3      	bne.n	8000454 <close+0x2c>
	/* clear all interrupt of the socket. */
	setSn_IR(sn, 0xFF);
 800046c:	79fb      	ldrb	r3, [r7, #7]
 800046e:	009b      	lsls	r3, r3, #2
 8000470:	3301      	adds	r3, #1
 8000472:	00db      	lsls	r3, r3, #3
 8000474:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8000478:	211f      	movs	r1, #31
 800047a:	4618      	mov	r0, r3
 800047c:	f000 fa5e 	bl	800093c <WIZCHIP_WRITE>
	//A20150401 : Release the sock_io_mode of socket n.
	sock_io_mode &= ~(1<<sn);
 8000480:	79fb      	ldrb	r3, [r7, #7]
 8000482:	2201      	movs	r2, #1
 8000484:	fa02 f303 	lsl.w	r3, r2, r3
 8000488:	b21b      	sxth	r3, r3
 800048a:	43db      	mvns	r3, r3
 800048c:	b21a      	sxth	r2, r3
 800048e:	4b19      	ldr	r3, [pc, #100]	; (80004f4 <close+0xcc>)
 8000490:	881b      	ldrh	r3, [r3, #0]
 8000492:	b21b      	sxth	r3, r3
 8000494:	4013      	ands	r3, r2
 8000496:	b21b      	sxth	r3, r3
 8000498:	b29a      	uxth	r2, r3
 800049a:	4b16      	ldr	r3, [pc, #88]	; (80004f4 <close+0xcc>)
 800049c:	801a      	strh	r2, [r3, #0]
	//
	sock_is_sending &= ~(1<<sn);
 800049e:	79fb      	ldrb	r3, [r7, #7]
 80004a0:	2201      	movs	r2, #1
 80004a2:	fa02 f303 	lsl.w	r3, r2, r3
 80004a6:	b21b      	sxth	r3, r3
 80004a8:	43db      	mvns	r3, r3
 80004aa:	b21a      	sxth	r2, r3
 80004ac:	4b12      	ldr	r3, [pc, #72]	; (80004f8 <close+0xd0>)
 80004ae:	881b      	ldrh	r3, [r3, #0]
 80004b0:	b21b      	sxth	r3, r3
 80004b2:	4013      	ands	r3, r2
 80004b4:	b21b      	sxth	r3, r3
 80004b6:	b29a      	uxth	r2, r3
 80004b8:	4b0f      	ldr	r3, [pc, #60]	; (80004f8 <close+0xd0>)
 80004ba:	801a      	strh	r2, [r3, #0]
	sock_remained_size[sn] = 0;
 80004bc:	79fb      	ldrb	r3, [r7, #7]
 80004be:	4a0f      	ldr	r2, [pc, #60]	; (80004fc <close+0xd4>)
 80004c0:	2100      	movs	r1, #0
 80004c2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	sock_pack_info[sn] = 0;
 80004c6:	79fb      	ldrb	r3, [r7, #7]
 80004c8:	4a0d      	ldr	r2, [pc, #52]	; (8000500 <close+0xd8>)
 80004ca:	2100      	movs	r1, #0
 80004cc:	54d1      	strb	r1, [r2, r3]
	while(getSn_SR(sn) != SOCK_CLOSED);
 80004ce:	bf00      	nop
 80004d0:	79fb      	ldrb	r3, [r7, #7]
 80004d2:	009b      	lsls	r3, r3, #2
 80004d4:	3301      	adds	r3, #1
 80004d6:	00db      	lsls	r3, r3, #3
 80004d8:	f503 7340 	add.w	r3, r3, #768	; 0x300
 80004dc:	4618      	mov	r0, r3
 80004de:	f000 f9e1 	bl	80008a4 <WIZCHIP_READ>
 80004e2:	4603      	mov	r3, r0
 80004e4:	2b00      	cmp	r3, #0
 80004e6:	d1f3      	bne.n	80004d0 <close+0xa8>
	return SOCK_OK;
 80004e8:	2301      	movs	r3, #1
}
 80004ea:	4618      	mov	r0, r3
 80004ec:	3708      	adds	r7, #8
 80004ee:	46bd      	mov	sp, r7
 80004f0:	bd80      	pop	{r7, pc}
 80004f2:	bf00      	nop
 80004f4:	20000058 	.word	0x20000058
 80004f8:	2000005a 	.word	0x2000005a
 80004fc:	2000005c 	.word	0x2000005c
 8000500:	2000006c 	.word	0x2000006c

08000504 <sendto>:
   //return len;
   return (int32_t)len;
}

int32_t sendto(uint8_t sn, uint8_t * buf, uint16_t len, uint8_t * addr, uint16_t port)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	b086      	sub	sp, #24
 8000508:	af00      	add	r7, sp, #0
 800050a:	60b9      	str	r1, [r7, #8]
 800050c:	607b      	str	r3, [r7, #4]
 800050e:	4603      	mov	r3, r0
 8000510:	73fb      	strb	r3, [r7, #15]
 8000512:	4613      	mov	r3, r2
 8000514:	81bb      	strh	r3, [r7, #12]
   uint8_t tmp = 0;
 8000516:	2300      	movs	r3, #0
 8000518:	75fb      	strb	r3, [r7, #23]
   uint16_t freesize = 0;
 800051a:	2300      	movs	r3, #0
 800051c:	82bb      	strh	r3, [r7, #20]
   uint32_t taddr;

   CHECK_SOCKNUM();
 800051e:	7bfb      	ldrb	r3, [r7, #15]
 8000520:	2b08      	cmp	r3, #8
 8000522:	d902      	bls.n	800052a <sendto+0x26>
 8000524:	f04f 33ff 	mov.w	r3, #4294967295
 8000528:	e11b      	b.n	8000762 <sendto+0x25e>
   switch(getSn_MR(sn) & 0x0F)
 800052a:	7bfb      	ldrb	r3, [r7, #15]
 800052c:	009b      	lsls	r3, r3, #2
 800052e:	3301      	adds	r3, #1
 8000530:	00db      	lsls	r3, r3, #3
 8000532:	4618      	mov	r0, r3
 8000534:	f000 f9b6 	bl	80008a4 <WIZCHIP_READ>
 8000538:	4603      	mov	r3, r0
 800053a:	f003 030f 	and.w	r3, r3, #15
 800053e:	3b02      	subs	r3, #2
 8000540:	2b02      	cmp	r3, #2
 8000542:	d902      	bls.n	800054a <sendto+0x46>
//   #if ( _WIZCHIP_ < 5200 )
      case Sn_MR_IPRAW:
         break;
//   #endif
      default:
         return SOCKERR_SOCKMODE;
 8000544:	f06f 0304 	mvn.w	r3, #4
 8000548:	e10b      	b.n	8000762 <sendto+0x25e>
         break;
 800054a:	bf00      	nop
   }
   CHECK_SOCKDATA();
 800054c:	89bb      	ldrh	r3, [r7, #12]
 800054e:	2b00      	cmp	r3, #0
 8000550:	d102      	bne.n	8000558 <sendto+0x54>
 8000552:	f06f 030d 	mvn.w	r3, #13
 8000556:	e104      	b.n	8000762 <sendto+0x25e>
   //M20140501 : For avoiding fatal error on memory align mismatched
   //if(*((uint32_t*)addr) == 0) return SOCKERR_IPINVALID;
   //{
      //uint32_t taddr;
      taddr = ((uint32_t)addr[0]) & 0x000000FF;
 8000558:	687b      	ldr	r3, [r7, #4]
 800055a:	781b      	ldrb	r3, [r3, #0]
 800055c:	613b      	str	r3, [r7, #16]
      taddr = (taddr << 8) + ((uint32_t)addr[1] & 0x000000FF);
 800055e:	693b      	ldr	r3, [r7, #16]
 8000560:	021b      	lsls	r3, r3, #8
 8000562:	687a      	ldr	r2, [r7, #4]
 8000564:	3201      	adds	r2, #1
 8000566:	7812      	ldrb	r2, [r2, #0]
 8000568:	4413      	add	r3, r2
 800056a:	613b      	str	r3, [r7, #16]
      taddr = (taddr << 8) + ((uint32_t)addr[2] & 0x000000FF);
 800056c:	693b      	ldr	r3, [r7, #16]
 800056e:	021b      	lsls	r3, r3, #8
 8000570:	687a      	ldr	r2, [r7, #4]
 8000572:	3202      	adds	r2, #2
 8000574:	7812      	ldrb	r2, [r2, #0]
 8000576:	4413      	add	r3, r2
 8000578:	613b      	str	r3, [r7, #16]
      taddr = (taddr << 8) + ((uint32_t)addr[3] & 0x000000FF);
 800057a:	693b      	ldr	r3, [r7, #16]
 800057c:	021b      	lsls	r3, r3, #8
 800057e:	687a      	ldr	r2, [r7, #4]
 8000580:	3203      	adds	r2, #3
 8000582:	7812      	ldrb	r2, [r2, #0]
 8000584:	4413      	add	r3, r2
 8000586:	613b      	str	r3, [r7, #16]
   //}
   //
   //if(*((uint32_t*)addr) == 0) return SOCKERR_IPINVALID;
   if((taddr == 0) && ((getSn_MR(sn)&Sn_MR_MACRAW) != Sn_MR_MACRAW)) return SOCKERR_IPINVALID;
 8000588:	693b      	ldr	r3, [r7, #16]
 800058a:	2b00      	cmp	r3, #0
 800058c:	d10e      	bne.n	80005ac <sendto+0xa8>
 800058e:	7bfb      	ldrb	r3, [r7, #15]
 8000590:	009b      	lsls	r3, r3, #2
 8000592:	3301      	adds	r3, #1
 8000594:	00db      	lsls	r3, r3, #3
 8000596:	4618      	mov	r0, r3
 8000598:	f000 f984 	bl	80008a4 <WIZCHIP_READ>
 800059c:	4603      	mov	r3, r0
 800059e:	f003 0304 	and.w	r3, r3, #4
 80005a2:	2b04      	cmp	r3, #4
 80005a4:	d002      	beq.n	80005ac <sendto+0xa8>
 80005a6:	f06f 030b 	mvn.w	r3, #11
 80005aa:	e0da      	b.n	8000762 <sendto+0x25e>
   if((port  == 0) && ((getSn_MR(sn)&Sn_MR_MACRAW) != Sn_MR_MACRAW)) return SOCKERR_PORTZERO;
 80005ac:	8c3b      	ldrh	r3, [r7, #32]
 80005ae:	2b00      	cmp	r3, #0
 80005b0:	d10e      	bne.n	80005d0 <sendto+0xcc>
 80005b2:	7bfb      	ldrb	r3, [r7, #15]
 80005b4:	009b      	lsls	r3, r3, #2
 80005b6:	3301      	adds	r3, #1
 80005b8:	00db      	lsls	r3, r3, #3
 80005ba:	4618      	mov	r0, r3
 80005bc:	f000 f972 	bl	80008a4 <WIZCHIP_READ>
 80005c0:	4603      	mov	r3, r0
 80005c2:	f003 0304 	and.w	r3, r3, #4
 80005c6:	2b04      	cmp	r3, #4
 80005c8:	d002      	beq.n	80005d0 <sendto+0xcc>
 80005ca:	f06f 030a 	mvn.w	r3, #10
 80005ce:	e0c8      	b.n	8000762 <sendto+0x25e>
   tmp = getSn_SR(sn);
 80005d0:	7bfb      	ldrb	r3, [r7, #15]
 80005d2:	009b      	lsls	r3, r3, #2
 80005d4:	3301      	adds	r3, #1
 80005d6:	00db      	lsls	r3, r3, #3
 80005d8:	f503 7340 	add.w	r3, r3, #768	; 0x300
 80005dc:	4618      	mov	r0, r3
 80005de:	f000 f961 	bl	80008a4 <WIZCHIP_READ>
 80005e2:	4603      	mov	r3, r0
 80005e4:	75fb      	strb	r3, [r7, #23]
//#if ( _WIZCHIP_ < 5200 )
   if((tmp != SOCK_MACRAW) && (tmp != SOCK_UDP) && (tmp != SOCK_IPRAW)) return SOCKERR_SOCKSTATUS;
 80005e6:	7dfb      	ldrb	r3, [r7, #23]
 80005e8:	2b42      	cmp	r3, #66	; 0x42
 80005ea:	d008      	beq.n	80005fe <sendto+0xfa>
 80005ec:	7dfb      	ldrb	r3, [r7, #23]
 80005ee:	2b22      	cmp	r3, #34	; 0x22
 80005f0:	d005      	beq.n	80005fe <sendto+0xfa>
 80005f2:	7dfb      	ldrb	r3, [r7, #23]
 80005f4:	2b32      	cmp	r3, #50	; 0x32
 80005f6:	d002      	beq.n	80005fe <sendto+0xfa>
 80005f8:	f06f 0306 	mvn.w	r3, #6
 80005fc:	e0b1      	b.n	8000762 <sendto+0x25e>
//#else
//   if(tmp != SOCK_MACRAW && tmp != SOCK_UDP) return SOCKERR_SOCKSTATUS;
//#endif
      
   setSn_DIPR(sn,addr);
 80005fe:	7bfb      	ldrb	r3, [r7, #15]
 8000600:	009b      	lsls	r3, r3, #2
 8000602:	3301      	adds	r3, #1
 8000604:	00db      	lsls	r3, r3, #3
 8000606:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 800060a:	2204      	movs	r2, #4
 800060c:	6879      	ldr	r1, [r7, #4]
 800060e:	4618      	mov	r0, r3
 8000610:	f000 fa42 	bl	8000a98 <WIZCHIP_WRITE_BUF>
   setSn_DPORT(sn,port);      
 8000614:	7bfb      	ldrb	r3, [r7, #15]
 8000616:	009b      	lsls	r3, r3, #2
 8000618:	3301      	adds	r3, #1
 800061a:	00db      	lsls	r3, r3, #3
 800061c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000620:	461a      	mov	r2, r3
 8000622:	8c3b      	ldrh	r3, [r7, #32]
 8000624:	0a1b      	lsrs	r3, r3, #8
 8000626:	b29b      	uxth	r3, r3
 8000628:	b2db      	uxtb	r3, r3
 800062a:	4619      	mov	r1, r3
 800062c:	4610      	mov	r0, r2
 800062e:	f000 f985 	bl	800093c <WIZCHIP_WRITE>
 8000632:	7bfb      	ldrb	r3, [r7, #15]
 8000634:	009b      	lsls	r3, r3, #2
 8000636:	3301      	adds	r3, #1
 8000638:	00db      	lsls	r3, r3, #3
 800063a:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 800063e:	461a      	mov	r2, r3
 8000640:	8c3b      	ldrh	r3, [r7, #32]
 8000642:	b2db      	uxtb	r3, r3
 8000644:	4619      	mov	r1, r3
 8000646:	4610      	mov	r0, r2
 8000648:	f000 f978 	bl	800093c <WIZCHIP_WRITE>
   freesize = getSn_TxMAX(sn);
 800064c:	7bfb      	ldrb	r3, [r7, #15]
 800064e:	009b      	lsls	r3, r3, #2
 8000650:	3301      	adds	r3, #1
 8000652:	00db      	lsls	r3, r3, #3
 8000654:	f503 53f8 	add.w	r3, r3, #7936	; 0x1f00
 8000658:	4618      	mov	r0, r3
 800065a:	f000 f923 	bl	80008a4 <WIZCHIP_READ>
 800065e:	4603      	mov	r3, r0
 8000660:	b29b      	uxth	r3, r3
 8000662:	029b      	lsls	r3, r3, #10
 8000664:	82bb      	strh	r3, [r7, #20]
   if (len > freesize) len = freesize; // check size not to exceed MAX size.
 8000666:	89ba      	ldrh	r2, [r7, #12]
 8000668:	8abb      	ldrh	r3, [r7, #20]
 800066a:	429a      	cmp	r2, r3
 800066c:	d901      	bls.n	8000672 <sendto+0x16e>
 800066e:	8abb      	ldrh	r3, [r7, #20]
 8000670:	81bb      	strh	r3, [r7, #12]
   while(1)
   {
      freesize = getSn_TX_FSR(sn);
 8000672:	7bfb      	ldrb	r3, [r7, #15]
 8000674:	4618      	mov	r0, r3
 8000676:	f000 fa6f 	bl	8000b58 <getSn_TX_FSR>
 800067a:	4603      	mov	r3, r0
 800067c:	82bb      	strh	r3, [r7, #20]
      if(getSn_SR(sn) == SOCK_CLOSED) return SOCKERR_SOCKCLOSED;
 800067e:	7bfb      	ldrb	r3, [r7, #15]
 8000680:	009b      	lsls	r3, r3, #2
 8000682:	3301      	adds	r3, #1
 8000684:	00db      	lsls	r3, r3, #3
 8000686:	f503 7340 	add.w	r3, r3, #768	; 0x300
 800068a:	4618      	mov	r0, r3
 800068c:	f000 f90a 	bl	80008a4 <WIZCHIP_READ>
 8000690:	4603      	mov	r3, r0
 8000692:	2b00      	cmp	r3, #0
 8000694:	d102      	bne.n	800069c <sendto+0x198>
 8000696:	f06f 0303 	mvn.w	r3, #3
 800069a:	e062      	b.n	8000762 <sendto+0x25e>
      if( (sock_io_mode & (1<<sn)) && (len > freesize) ) return SOCK_BUSY;
 800069c:	4b33      	ldr	r3, [pc, #204]	; (800076c <sendto+0x268>)
 800069e:	881b      	ldrh	r3, [r3, #0]
 80006a0:	461a      	mov	r2, r3
 80006a2:	7bfb      	ldrb	r3, [r7, #15]
 80006a4:	fa42 f303 	asr.w	r3, r2, r3
 80006a8:	f003 0301 	and.w	r3, r3, #1
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d005      	beq.n	80006bc <sendto+0x1b8>
 80006b0:	89ba      	ldrh	r2, [r7, #12]
 80006b2:	8abb      	ldrh	r3, [r7, #20]
 80006b4:	429a      	cmp	r2, r3
 80006b6:	d901      	bls.n	80006bc <sendto+0x1b8>
 80006b8:	2300      	movs	r3, #0
 80006ba:	e052      	b.n	8000762 <sendto+0x25e>
      if(len <= freesize) break;
 80006bc:	89ba      	ldrh	r2, [r7, #12]
 80006be:	8abb      	ldrh	r3, [r7, #20]
 80006c0:	429a      	cmp	r2, r3
 80006c2:	d900      	bls.n	80006c6 <sendto+0x1c2>
      freesize = getSn_TX_FSR(sn);
 80006c4:	e7d5      	b.n	8000672 <sendto+0x16e>
      if(len <= freesize) break;
 80006c6:	bf00      	nop
   };
	wiz_send_data(sn, buf, len);
 80006c8:	89ba      	ldrh	r2, [r7, #12]
 80006ca:	7bfb      	ldrb	r3, [r7, #15]
 80006cc:	68b9      	ldr	r1, [r7, #8]
 80006ce:	4618      	mov	r0, r3
 80006d0:	f000 fa8d 	bl	8000bee <wiz_send_data>
//A20150601 : For W5300
#if _WIZCHIP_ == 5300
   setSn_TX_WRSR(sn, len);
#endif
//   
	setSn_CR(sn,Sn_CR_SEND);
 80006d4:	7bfb      	ldrb	r3, [r7, #15]
 80006d6:	009b      	lsls	r3, r3, #2
 80006d8:	3301      	adds	r3, #1
 80006da:	00db      	lsls	r3, r3, #3
 80006dc:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80006e0:	2120      	movs	r1, #32
 80006e2:	4618      	mov	r0, r3
 80006e4:	f000 f92a 	bl	800093c <WIZCHIP_WRITE>
	/* wait to process the command... */
	while(getSn_CR(sn));
 80006e8:	bf00      	nop
 80006ea:	7bfb      	ldrb	r3, [r7, #15]
 80006ec:	009b      	lsls	r3, r3, #2
 80006ee:	3301      	adds	r3, #1
 80006f0:	00db      	lsls	r3, r3, #3
 80006f2:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80006f6:	4618      	mov	r0, r3
 80006f8:	f000 f8d4 	bl	80008a4 <WIZCHIP_READ>
 80006fc:	4603      	mov	r3, r0
 80006fe:	2b00      	cmp	r3, #0
 8000700:	d1f3      	bne.n	80006ea <sendto+0x1e6>
   while(1)
   {
      tmp = getSn_IR(sn);
 8000702:	7bfb      	ldrb	r3, [r7, #15]
 8000704:	009b      	lsls	r3, r3, #2
 8000706:	3301      	adds	r3, #1
 8000708:	00db      	lsls	r3, r3, #3
 800070a:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800070e:	4618      	mov	r0, r3
 8000710:	f000 f8c8 	bl	80008a4 <WIZCHIP_READ>
 8000714:	4603      	mov	r3, r0
 8000716:	f003 031f 	and.w	r3, r3, #31
 800071a:	75fb      	strb	r3, [r7, #23]
      if(tmp & Sn_IR_SENDOK)
 800071c:	7dfb      	ldrb	r3, [r7, #23]
 800071e:	f003 0310 	and.w	r3, r3, #16
 8000722:	2b00      	cmp	r3, #0
 8000724:	d00c      	beq.n	8000740 <sendto+0x23c>
      {
         setSn_IR(sn, Sn_IR_SENDOK);
 8000726:	7bfb      	ldrb	r3, [r7, #15]
 8000728:	009b      	lsls	r3, r3, #2
 800072a:	3301      	adds	r3, #1
 800072c:	00db      	lsls	r3, r3, #3
 800072e:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8000732:	2110      	movs	r1, #16
 8000734:	4618      	mov	r0, r3
 8000736:	f000 f901 	bl	800093c <WIZCHIP_WRITE>
         break;
 800073a:	bf00      	nop
   #if _WIZCHIP_ < 5500   //M20150401 : for WIZCHIP Errata #4, #5 (ARP errata)
      if(taddr) setSUBR((uint8_t*)&taddr);
   #endif
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
 800073c:	89bb      	ldrh	r3, [r7, #12]
 800073e:	e010      	b.n	8000762 <sendto+0x25e>
      else if(tmp & Sn_IR_TIMEOUT)
 8000740:	7dfb      	ldrb	r3, [r7, #23]
 8000742:	f003 0308 	and.w	r3, r3, #8
 8000746:	2b00      	cmp	r3, #0
 8000748:	d0db      	beq.n	8000702 <sendto+0x1fe>
         setSn_IR(sn, Sn_IR_TIMEOUT);
 800074a:	7bfb      	ldrb	r3, [r7, #15]
 800074c:	009b      	lsls	r3, r3, #2
 800074e:	3301      	adds	r3, #1
 8000750:	00db      	lsls	r3, r3, #3
 8000752:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8000756:	2108      	movs	r1, #8
 8000758:	4618      	mov	r0, r3
 800075a:	f000 f8ef 	bl	800093c <WIZCHIP_WRITE>
         return SOCKERR_TIMEOUT;
 800075e:	f06f 030c 	mvn.w	r3, #12
}
 8000762:	4618      	mov	r0, r3
 8000764:	3718      	adds	r7, #24
 8000766:	46bd      	mov	sp, r7
 8000768:	bd80      	pop	{r7, pc}
 800076a:	bf00      	nop
 800076c:	20000058 	.word	0x20000058

08000770 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000770:	b480      	push	{r7}
 8000772:	b083      	sub	sp, #12
 8000774:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000776:	4b0e      	ldr	r3, [pc, #56]	; (80007b0 <HAL_MspInit+0x40>)
 8000778:	699b      	ldr	r3, [r3, #24]
 800077a:	4a0d      	ldr	r2, [pc, #52]	; (80007b0 <HAL_MspInit+0x40>)
 800077c:	f043 0301 	orr.w	r3, r3, #1
 8000780:	6193      	str	r3, [r2, #24]
 8000782:	4b0b      	ldr	r3, [pc, #44]	; (80007b0 <HAL_MspInit+0x40>)
 8000784:	699b      	ldr	r3, [r3, #24]
 8000786:	f003 0301 	and.w	r3, r3, #1
 800078a:	607b      	str	r3, [r7, #4]
 800078c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800078e:	4b08      	ldr	r3, [pc, #32]	; (80007b0 <HAL_MspInit+0x40>)
 8000790:	69db      	ldr	r3, [r3, #28]
 8000792:	4a07      	ldr	r2, [pc, #28]	; (80007b0 <HAL_MspInit+0x40>)
 8000794:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000798:	61d3      	str	r3, [r2, #28]
 800079a:	4b05      	ldr	r3, [pc, #20]	; (80007b0 <HAL_MspInit+0x40>)
 800079c:	69db      	ldr	r3, [r3, #28]
 800079e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007a2:	603b      	str	r3, [r7, #0]
 80007a4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007a6:	bf00      	nop
 80007a8:	370c      	adds	r7, #12
 80007aa:	46bd      	mov	sp, r7
 80007ac:	bc80      	pop	{r7}
 80007ae:	4770      	bx	lr
 80007b0:	40021000 	.word	0x40021000

080007b4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b088      	sub	sp, #32
 80007b8:	af00      	add	r7, sp, #0
 80007ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007bc:	f107 0310 	add.w	r3, r7, #16
 80007c0:	2200      	movs	r2, #0
 80007c2:	601a      	str	r2, [r3, #0]
 80007c4:	605a      	str	r2, [r3, #4]
 80007c6:	609a      	str	r2, [r3, #8]
 80007c8:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	681b      	ldr	r3, [r3, #0]
 80007ce:	4a1b      	ldr	r2, [pc, #108]	; (800083c <HAL_SPI_MspInit+0x88>)
 80007d0:	4293      	cmp	r3, r2
 80007d2:	d12f      	bne.n	8000834 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80007d4:	4b1a      	ldr	r3, [pc, #104]	; (8000840 <HAL_SPI_MspInit+0x8c>)
 80007d6:	699b      	ldr	r3, [r3, #24]
 80007d8:	4a19      	ldr	r2, [pc, #100]	; (8000840 <HAL_SPI_MspInit+0x8c>)
 80007da:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80007de:	6193      	str	r3, [r2, #24]
 80007e0:	4b17      	ldr	r3, [pc, #92]	; (8000840 <HAL_SPI_MspInit+0x8c>)
 80007e2:	699b      	ldr	r3, [r3, #24]
 80007e4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80007e8:	60fb      	str	r3, [r7, #12]
 80007ea:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007ec:	4b14      	ldr	r3, [pc, #80]	; (8000840 <HAL_SPI_MspInit+0x8c>)
 80007ee:	699b      	ldr	r3, [r3, #24]
 80007f0:	4a13      	ldr	r2, [pc, #76]	; (8000840 <HAL_SPI_MspInit+0x8c>)
 80007f2:	f043 0304 	orr.w	r3, r3, #4
 80007f6:	6193      	str	r3, [r2, #24]
 80007f8:	4b11      	ldr	r3, [pc, #68]	; (8000840 <HAL_SPI_MspInit+0x8c>)
 80007fa:	699b      	ldr	r3, [r3, #24]
 80007fc:	f003 0304 	and.w	r3, r3, #4
 8000800:	60bb      	str	r3, [r7, #8]
 8000802:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8000804:	23a0      	movs	r3, #160	; 0xa0
 8000806:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000808:	2302      	movs	r3, #2
 800080a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800080c:	2303      	movs	r3, #3
 800080e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000810:	f107 0310 	add.w	r3, r7, #16
 8000814:	4619      	mov	r1, r3
 8000816:	480b      	ldr	r0, [pc, #44]	; (8000844 <HAL_SPI_MspInit+0x90>)
 8000818:	f000 fec4 	bl	80015a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800081c:	2340      	movs	r3, #64	; 0x40
 800081e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000820:	2300      	movs	r3, #0
 8000822:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000824:	2300      	movs	r3, #0
 8000826:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000828:	f107 0310 	add.w	r3, r7, #16
 800082c:	4619      	mov	r1, r3
 800082e:	4805      	ldr	r0, [pc, #20]	; (8000844 <HAL_SPI_MspInit+0x90>)
 8000830:	f000 feb8 	bl	80015a4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000834:	bf00      	nop
 8000836:	3720      	adds	r7, #32
 8000838:	46bd      	mov	sp, r7
 800083a:	bd80      	pop	{r7, pc}
 800083c:	40013000 	.word	0x40013000
 8000840:	40021000 	.word	0x40021000
 8000844:	40010800 	.word	0x40010800

08000848 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000848:	b480      	push	{r7}
 800084a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800084c:	e7fe      	b.n	800084c <NMI_Handler+0x4>

0800084e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800084e:	b480      	push	{r7}
 8000850:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000852:	e7fe      	b.n	8000852 <HardFault_Handler+0x4>

08000854 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000854:	b480      	push	{r7}
 8000856:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000858:	e7fe      	b.n	8000858 <MemManage_Handler+0x4>

0800085a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800085a:	b480      	push	{r7}
 800085c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800085e:	e7fe      	b.n	800085e <BusFault_Handler+0x4>

08000860 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000860:	b480      	push	{r7}
 8000862:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000864:	e7fe      	b.n	8000864 <UsageFault_Handler+0x4>

08000866 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000866:	b480      	push	{r7}
 8000868:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800086a:	bf00      	nop
 800086c:	46bd      	mov	sp, r7
 800086e:	bc80      	pop	{r7}
 8000870:	4770      	bx	lr

08000872 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000872:	b480      	push	{r7}
 8000874:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000876:	bf00      	nop
 8000878:	46bd      	mov	sp, r7
 800087a:	bc80      	pop	{r7}
 800087c:	4770      	bx	lr

0800087e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800087e:	b480      	push	{r7}
 8000880:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000882:	bf00      	nop
 8000884:	46bd      	mov	sp, r7
 8000886:	bc80      	pop	{r7}
 8000888:	4770      	bx	lr

0800088a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800088a:	b580      	push	{r7, lr}
 800088c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800088e:	f000 fd89 	bl	80013a4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000892:	bf00      	nop
 8000894:	bd80      	pop	{r7, pc}

08000896 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000896:	b480      	push	{r7}
 8000898:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800089a:	bf00      	nop
 800089c:	46bd      	mov	sp, r7
 800089e:	bc80      	pop	{r7}
 80008a0:	4770      	bx	lr
	...

080008a4 <WIZCHIP_READ>:

#if   (_WIZCHIP_ == 5500)
////////////////////////////////////////////////////

uint8_t  WIZCHIP_READ(uint32_t AddrSel)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b084      	sub	sp, #16
 80008a8:	af00      	add	r7, sp, #0
 80008aa:	6078      	str	r0, [r7, #4]
   uint8_t ret;
   uint8_t spi_data[3];

   WIZCHIP_CRITICAL_ENTER();
 80008ac:	4b22      	ldr	r3, [pc, #136]	; (8000938 <WIZCHIP_READ+0x94>)
 80008ae:	68db      	ldr	r3, [r3, #12]
 80008b0:	4798      	blx	r3
   WIZCHIP.CS._select();
 80008b2:	4b21      	ldr	r3, [pc, #132]	; (8000938 <WIZCHIP_READ+0x94>)
 80008b4:	695b      	ldr	r3, [r3, #20]
 80008b6:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_VDM_OP_);

   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 80008b8:	4b1f      	ldr	r3, [pc, #124]	; (8000938 <WIZCHIP_READ+0x94>)
 80008ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d003      	beq.n	80008c8 <WIZCHIP_READ+0x24>
 80008c0:	4b1d      	ldr	r3, [pc, #116]	; (8000938 <WIZCHIP_READ+0x94>)
 80008c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	d114      	bne.n	80008f2 <WIZCHIP_READ+0x4e>
   {
	   WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 80008c8:	4b1b      	ldr	r3, [pc, #108]	; (8000938 <WIZCHIP_READ+0x94>)
 80008ca:	6a1b      	ldr	r3, [r3, #32]
 80008cc:	687a      	ldr	r2, [r7, #4]
 80008ce:	0c12      	lsrs	r2, r2, #16
 80008d0:	b2d2      	uxtb	r2, r2
 80008d2:	4610      	mov	r0, r2
 80008d4:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 80008d6:	4b18      	ldr	r3, [pc, #96]	; (8000938 <WIZCHIP_READ+0x94>)
 80008d8:	6a1b      	ldr	r3, [r3, #32]
 80008da:	687a      	ldr	r2, [r7, #4]
 80008dc:	0a12      	lsrs	r2, r2, #8
 80008de:	b2d2      	uxtb	r2, r2
 80008e0:	4610      	mov	r0, r2
 80008e2:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 80008e4:	4b14      	ldr	r3, [pc, #80]	; (8000938 <WIZCHIP_READ+0x94>)
 80008e6:	6a1b      	ldr	r3, [r3, #32]
 80008e8:	687a      	ldr	r2, [r7, #4]
 80008ea:	b2d2      	uxtb	r2, r2
 80008ec:	4610      	mov	r0, r2
 80008ee:	4798      	blx	r3
 80008f0:	e011      	b.n	8000916 <WIZCHIP_READ+0x72>
   }
   else																// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	0c1b      	lsrs	r3, r3, #16
 80008f6:	b2db      	uxtb	r3, r3
 80008f8:	733b      	strb	r3, [r7, #12]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	0a1b      	lsrs	r3, r3, #8
 80008fe:	b2db      	uxtb	r3, r3
 8000900:	737b      	strb	r3, [r7, #13]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	b2db      	uxtb	r3, r3
 8000906:	73bb      	strb	r3, [r7, #14]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 8000908:	4b0b      	ldr	r3, [pc, #44]	; (8000938 <WIZCHIP_READ+0x94>)
 800090a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800090c:	f107 020c 	add.w	r2, r7, #12
 8000910:	2103      	movs	r1, #3
 8000912:	4610      	mov	r0, r2
 8000914:	4798      	blx	r3
   }
   ret = WIZCHIP.IF.SPI._read_byte();
 8000916:	4b08      	ldr	r3, [pc, #32]	; (8000938 <WIZCHIP_READ+0x94>)
 8000918:	69db      	ldr	r3, [r3, #28]
 800091a:	4798      	blx	r3
 800091c:	4603      	mov	r3, r0
 800091e:	73fb      	strb	r3, [r7, #15]

   WIZCHIP.CS._deselect();
 8000920:	4b05      	ldr	r3, [pc, #20]	; (8000938 <WIZCHIP_READ+0x94>)
 8000922:	699b      	ldr	r3, [r3, #24]
 8000924:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8000926:	4b04      	ldr	r3, [pc, #16]	; (8000938 <WIZCHIP_READ+0x94>)
 8000928:	691b      	ldr	r3, [r3, #16]
 800092a:	4798      	blx	r3
   return ret;
 800092c:	7bfb      	ldrb	r3, [r7, #15]
}
 800092e:	4618      	mov	r0, r3
 8000930:	3710      	adds	r7, #16
 8000932:	46bd      	mov	sp, r7
 8000934:	bd80      	pop	{r7, pc}
 8000936:	bf00      	nop
 8000938:	20000008 	.word	0x20000008

0800093c <WIZCHIP_WRITE>:

void     WIZCHIP_WRITE(uint32_t AddrSel, uint8_t wb )
{
 800093c:	b580      	push	{r7, lr}
 800093e:	b084      	sub	sp, #16
 8000940:	af00      	add	r7, sp, #0
 8000942:	6078      	str	r0, [r7, #4]
 8000944:	460b      	mov	r3, r1
 8000946:	70fb      	strb	r3, [r7, #3]
   uint8_t spi_data[4];

   WIZCHIP_CRITICAL_ENTER();
 8000948:	4b22      	ldr	r3, [pc, #136]	; (80009d4 <WIZCHIP_WRITE+0x98>)
 800094a:	68db      	ldr	r3, [r3, #12]
 800094c:	4798      	blx	r3
   WIZCHIP.CS._select();
 800094e:	4b21      	ldr	r3, [pc, #132]	; (80009d4 <WIZCHIP_WRITE+0x98>)
 8000950:	695b      	ldr	r3, [r3, #20]
 8000952:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	f043 0304 	orr.w	r3, r3, #4
 800095a:	607b      	str	r3, [r7, #4]

   //if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
 800095c:	4b1d      	ldr	r3, [pc, #116]	; (80009d4 <WIZCHIP_WRITE+0x98>)
 800095e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000960:	2b00      	cmp	r3, #0
 8000962:	d119      	bne.n	8000998 <WIZCHIP_WRITE+0x5c>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8000964:	4b1b      	ldr	r3, [pc, #108]	; (80009d4 <WIZCHIP_WRITE+0x98>)
 8000966:	6a1b      	ldr	r3, [r3, #32]
 8000968:	687a      	ldr	r2, [r7, #4]
 800096a:	0c12      	lsrs	r2, r2, #16
 800096c:	b2d2      	uxtb	r2, r2
 800096e:	4610      	mov	r0, r2
 8000970:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8000972:	4b18      	ldr	r3, [pc, #96]	; (80009d4 <WIZCHIP_WRITE+0x98>)
 8000974:	6a1b      	ldr	r3, [r3, #32]
 8000976:	687a      	ldr	r2, [r7, #4]
 8000978:	0a12      	lsrs	r2, r2, #8
 800097a:	b2d2      	uxtb	r2, r2
 800097c:	4610      	mov	r0, r2
 800097e:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8000980:	4b14      	ldr	r3, [pc, #80]	; (80009d4 <WIZCHIP_WRITE+0x98>)
 8000982:	6a1b      	ldr	r3, [r3, #32]
 8000984:	687a      	ldr	r2, [r7, #4]
 8000986:	b2d2      	uxtb	r2, r2
 8000988:	4610      	mov	r0, r2
 800098a:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte(wb);
 800098c:	4b11      	ldr	r3, [pc, #68]	; (80009d4 <WIZCHIP_WRITE+0x98>)
 800098e:	6a1b      	ldr	r3, [r3, #32]
 8000990:	78fa      	ldrb	r2, [r7, #3]
 8000992:	4610      	mov	r0, r2
 8000994:	4798      	blx	r3
 8000996:	e013      	b.n	80009c0 <WIZCHIP_WRITE+0x84>
   }
   else									// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	0c1b      	lsrs	r3, r3, #16
 800099c:	b2db      	uxtb	r3, r3
 800099e:	733b      	strb	r3, [r7, #12]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	0a1b      	lsrs	r3, r3, #8
 80009a4:	b2db      	uxtb	r3, r3
 80009a6:	737b      	strb	r3, [r7, #13]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	b2db      	uxtb	r3, r3
 80009ac:	73bb      	strb	r3, [r7, #14]
		spi_data[3] = wb;
 80009ae:	78fb      	ldrb	r3, [r7, #3]
 80009b0:	73fb      	strb	r3, [r7, #15]
		WIZCHIP.IF.SPI._write_burst(spi_data, 4);
 80009b2:	4b08      	ldr	r3, [pc, #32]	; (80009d4 <WIZCHIP_WRITE+0x98>)
 80009b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80009b6:	f107 020c 	add.w	r2, r7, #12
 80009ba:	2104      	movs	r1, #4
 80009bc:	4610      	mov	r0, r2
 80009be:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 80009c0:	4b04      	ldr	r3, [pc, #16]	; (80009d4 <WIZCHIP_WRITE+0x98>)
 80009c2:	699b      	ldr	r3, [r3, #24]
 80009c4:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 80009c6:	4b03      	ldr	r3, [pc, #12]	; (80009d4 <WIZCHIP_WRITE+0x98>)
 80009c8:	691b      	ldr	r3, [r3, #16]
 80009ca:	4798      	blx	r3
}
 80009cc:	bf00      	nop
 80009ce:	3710      	adds	r7, #16
 80009d0:	46bd      	mov	sp, r7
 80009d2:	bd80      	pop	{r7, pc}
 80009d4:	20000008 	.word	0x20000008

080009d8 <WIZCHIP_READ_BUF>:
         
void     WIZCHIP_READ_BUF (uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
 80009d8:	b590      	push	{r4, r7, lr}
 80009da:	b087      	sub	sp, #28
 80009dc:	af00      	add	r7, sp, #0
 80009de:	60f8      	str	r0, [r7, #12]
 80009e0:	60b9      	str	r1, [r7, #8]
 80009e2:	4613      	mov	r3, r2
 80009e4:	80fb      	strh	r3, [r7, #6]
   uint8_t spi_data[3];
   uint16_t i;

   WIZCHIP_CRITICAL_ENTER();
 80009e6:	4b2b      	ldr	r3, [pc, #172]	; (8000a94 <WIZCHIP_READ_BUF+0xbc>)
 80009e8:	68db      	ldr	r3, [r3, #12]
 80009ea:	4798      	blx	r3
   WIZCHIP.CS._select();
 80009ec:	4b29      	ldr	r3, [pc, #164]	; (8000a94 <WIZCHIP_READ_BUF+0xbc>)
 80009ee:	695b      	ldr	r3, [r3, #20]
 80009f0:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_VDM_OP_);

   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 80009f2:	4b28      	ldr	r3, [pc, #160]	; (8000a94 <WIZCHIP_READ_BUF+0xbc>)
 80009f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d003      	beq.n	8000a02 <WIZCHIP_READ_BUF+0x2a>
 80009fa:	4b26      	ldr	r3, [pc, #152]	; (8000a94 <WIZCHIP_READ_BUF+0xbc>)
 80009fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	d126      	bne.n	8000a50 <WIZCHIP_READ_BUF+0x78>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8000a02:	4b24      	ldr	r3, [pc, #144]	; (8000a94 <WIZCHIP_READ_BUF+0xbc>)
 8000a04:	6a1b      	ldr	r3, [r3, #32]
 8000a06:	68fa      	ldr	r2, [r7, #12]
 8000a08:	0c12      	lsrs	r2, r2, #16
 8000a0a:	b2d2      	uxtb	r2, r2
 8000a0c:	4610      	mov	r0, r2
 8000a0e:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8000a10:	4b20      	ldr	r3, [pc, #128]	; (8000a94 <WIZCHIP_READ_BUF+0xbc>)
 8000a12:	6a1b      	ldr	r3, [r3, #32]
 8000a14:	68fa      	ldr	r2, [r7, #12]
 8000a16:	0a12      	lsrs	r2, r2, #8
 8000a18:	b2d2      	uxtb	r2, r2
 8000a1a:	4610      	mov	r0, r2
 8000a1c:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8000a1e:	4b1d      	ldr	r3, [pc, #116]	; (8000a94 <WIZCHIP_READ_BUF+0xbc>)
 8000a20:	6a1b      	ldr	r3, [r3, #32]
 8000a22:	68fa      	ldr	r2, [r7, #12]
 8000a24:	b2d2      	uxtb	r2, r2
 8000a26:	4610      	mov	r0, r2
 8000a28:	4798      	blx	r3
		for(i = 0; i < len; i++)
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	82fb      	strh	r3, [r7, #22]
 8000a2e:	e00a      	b.n	8000a46 <WIZCHIP_READ_BUF+0x6e>
		   pBuf[i] = WIZCHIP.IF.SPI._read_byte();
 8000a30:	4b18      	ldr	r3, [pc, #96]	; (8000a94 <WIZCHIP_READ_BUF+0xbc>)
 8000a32:	69db      	ldr	r3, [r3, #28]
 8000a34:	8afa      	ldrh	r2, [r7, #22]
 8000a36:	68b9      	ldr	r1, [r7, #8]
 8000a38:	188c      	adds	r4, r1, r2
 8000a3a:	4798      	blx	r3
 8000a3c:	4603      	mov	r3, r0
 8000a3e:	7023      	strb	r3, [r4, #0]
		for(i = 0; i < len; i++)
 8000a40:	8afb      	ldrh	r3, [r7, #22]
 8000a42:	3301      	adds	r3, #1
 8000a44:	82fb      	strh	r3, [r7, #22]
 8000a46:	8afa      	ldrh	r2, [r7, #22]
 8000a48:	88fb      	ldrh	r3, [r7, #6]
 8000a4a:	429a      	cmp	r2, r3
 8000a4c:	d3f0      	bcc.n	8000a30 <WIZCHIP_READ_BUF+0x58>
   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8000a4e:	e017      	b.n	8000a80 <WIZCHIP_READ_BUF+0xa8>
   }
   else																// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8000a50:	68fb      	ldr	r3, [r7, #12]
 8000a52:	0c1b      	lsrs	r3, r3, #16
 8000a54:	b2db      	uxtb	r3, r3
 8000a56:	743b      	strb	r3, [r7, #16]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8000a58:	68fb      	ldr	r3, [r7, #12]
 8000a5a:	0a1b      	lsrs	r3, r3, #8
 8000a5c:	b2db      	uxtb	r3, r3
 8000a5e:	747b      	strb	r3, [r7, #17]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8000a60:	68fb      	ldr	r3, [r7, #12]
 8000a62:	b2db      	uxtb	r3, r3
 8000a64:	74bb      	strb	r3, [r7, #18]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 8000a66:	4b0b      	ldr	r3, [pc, #44]	; (8000a94 <WIZCHIP_READ_BUF+0xbc>)
 8000a68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a6a:	f107 0210 	add.w	r2, r7, #16
 8000a6e:	2103      	movs	r1, #3
 8000a70:	4610      	mov	r0, r2
 8000a72:	4798      	blx	r3
		WIZCHIP.IF.SPI._read_burst(pBuf, len);
 8000a74:	4b07      	ldr	r3, [pc, #28]	; (8000a94 <WIZCHIP_READ_BUF+0xbc>)
 8000a76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a78:	88fa      	ldrh	r2, [r7, #6]
 8000a7a:	4611      	mov	r1, r2
 8000a7c:	68b8      	ldr	r0, [r7, #8]
 8000a7e:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 8000a80:	4b04      	ldr	r3, [pc, #16]	; (8000a94 <WIZCHIP_READ_BUF+0xbc>)
 8000a82:	699b      	ldr	r3, [r3, #24]
 8000a84:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8000a86:	4b03      	ldr	r3, [pc, #12]	; (8000a94 <WIZCHIP_READ_BUF+0xbc>)
 8000a88:	691b      	ldr	r3, [r3, #16]
 8000a8a:	4798      	blx	r3
}
 8000a8c:	bf00      	nop
 8000a8e:	371c      	adds	r7, #28
 8000a90:	46bd      	mov	sp, r7
 8000a92:	bd90      	pop	{r4, r7, pc}
 8000a94:	20000008 	.word	0x20000008

08000a98 <WIZCHIP_WRITE_BUF>:

void     WIZCHIP_WRITE_BUF(uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b086      	sub	sp, #24
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	60f8      	str	r0, [r7, #12]
 8000aa0:	60b9      	str	r1, [r7, #8]
 8000aa2:	4613      	mov	r3, r2
 8000aa4:	80fb      	strh	r3, [r7, #6]
   uint8_t spi_data[3];
   uint16_t i;

   WIZCHIP_CRITICAL_ENTER();
 8000aa6:	4b2b      	ldr	r3, [pc, #172]	; (8000b54 <WIZCHIP_WRITE_BUF+0xbc>)
 8000aa8:	68db      	ldr	r3, [r3, #12]
 8000aaa:	4798      	blx	r3
   WIZCHIP.CS._select();
 8000aac:	4b29      	ldr	r3, [pc, #164]	; (8000b54 <WIZCHIP_WRITE_BUF+0xbc>)
 8000aae:	695b      	ldr	r3, [r3, #20]
 8000ab0:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
 8000ab2:	68fb      	ldr	r3, [r7, #12]
 8000ab4:	f043 0304 	orr.w	r3, r3, #4
 8000ab8:	60fb      	str	r3, [r7, #12]

   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8000aba:	4b26      	ldr	r3, [pc, #152]	; (8000b54 <WIZCHIP_WRITE_BUF+0xbc>)
 8000abc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	d126      	bne.n	8000b10 <WIZCHIP_WRITE_BUF+0x78>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8000ac2:	4b24      	ldr	r3, [pc, #144]	; (8000b54 <WIZCHIP_WRITE_BUF+0xbc>)
 8000ac4:	6a1b      	ldr	r3, [r3, #32]
 8000ac6:	68fa      	ldr	r2, [r7, #12]
 8000ac8:	0c12      	lsrs	r2, r2, #16
 8000aca:	b2d2      	uxtb	r2, r2
 8000acc:	4610      	mov	r0, r2
 8000ace:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8000ad0:	4b20      	ldr	r3, [pc, #128]	; (8000b54 <WIZCHIP_WRITE_BUF+0xbc>)
 8000ad2:	6a1b      	ldr	r3, [r3, #32]
 8000ad4:	68fa      	ldr	r2, [r7, #12]
 8000ad6:	0a12      	lsrs	r2, r2, #8
 8000ad8:	b2d2      	uxtb	r2, r2
 8000ada:	4610      	mov	r0, r2
 8000adc:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8000ade:	4b1d      	ldr	r3, [pc, #116]	; (8000b54 <WIZCHIP_WRITE_BUF+0xbc>)
 8000ae0:	6a1b      	ldr	r3, [r3, #32]
 8000ae2:	68fa      	ldr	r2, [r7, #12]
 8000ae4:	b2d2      	uxtb	r2, r2
 8000ae6:	4610      	mov	r0, r2
 8000ae8:	4798      	blx	r3
		for(i = 0; i < len; i++)
 8000aea:	2300      	movs	r3, #0
 8000aec:	82fb      	strh	r3, [r7, #22]
 8000aee:	e00a      	b.n	8000b06 <WIZCHIP_WRITE_BUF+0x6e>
			WIZCHIP.IF.SPI._write_byte(pBuf[i]);
 8000af0:	4b18      	ldr	r3, [pc, #96]	; (8000b54 <WIZCHIP_WRITE_BUF+0xbc>)
 8000af2:	6a1b      	ldr	r3, [r3, #32]
 8000af4:	8afa      	ldrh	r2, [r7, #22]
 8000af6:	68b9      	ldr	r1, [r7, #8]
 8000af8:	440a      	add	r2, r1
 8000afa:	7812      	ldrb	r2, [r2, #0]
 8000afc:	4610      	mov	r0, r2
 8000afe:	4798      	blx	r3
		for(i = 0; i < len; i++)
 8000b00:	8afb      	ldrh	r3, [r7, #22]
 8000b02:	3301      	adds	r3, #1
 8000b04:	82fb      	strh	r3, [r7, #22]
 8000b06:	8afa      	ldrh	r2, [r7, #22]
 8000b08:	88fb      	ldrh	r3, [r7, #6]
 8000b0a:	429a      	cmp	r2, r3
 8000b0c:	d3f0      	bcc.n	8000af0 <WIZCHIP_WRITE_BUF+0x58>
 8000b0e:	e017      	b.n	8000b40 <WIZCHIP_WRITE_BUF+0xa8>
   }
   else									// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8000b10:	68fb      	ldr	r3, [r7, #12]
 8000b12:	0c1b      	lsrs	r3, r3, #16
 8000b14:	b2db      	uxtb	r3, r3
 8000b16:	743b      	strb	r3, [r7, #16]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8000b18:	68fb      	ldr	r3, [r7, #12]
 8000b1a:	0a1b      	lsrs	r3, r3, #8
 8000b1c:	b2db      	uxtb	r3, r3
 8000b1e:	747b      	strb	r3, [r7, #17]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8000b20:	68fb      	ldr	r3, [r7, #12]
 8000b22:	b2db      	uxtb	r3, r3
 8000b24:	74bb      	strb	r3, [r7, #18]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 8000b26:	4b0b      	ldr	r3, [pc, #44]	; (8000b54 <WIZCHIP_WRITE_BUF+0xbc>)
 8000b28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b2a:	f107 0210 	add.w	r2, r7, #16
 8000b2e:	2103      	movs	r1, #3
 8000b30:	4610      	mov	r0, r2
 8000b32:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_burst(pBuf, len);
 8000b34:	4b07      	ldr	r3, [pc, #28]	; (8000b54 <WIZCHIP_WRITE_BUF+0xbc>)
 8000b36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b38:	88fa      	ldrh	r2, [r7, #6]
 8000b3a:	4611      	mov	r1, r2
 8000b3c:	68b8      	ldr	r0, [r7, #8]
 8000b3e:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 8000b40:	4b04      	ldr	r3, [pc, #16]	; (8000b54 <WIZCHIP_WRITE_BUF+0xbc>)
 8000b42:	699b      	ldr	r3, [r3, #24]
 8000b44:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8000b46:	4b03      	ldr	r3, [pc, #12]	; (8000b54 <WIZCHIP_WRITE_BUF+0xbc>)
 8000b48:	691b      	ldr	r3, [r3, #16]
 8000b4a:	4798      	blx	r3
}
 8000b4c:	bf00      	nop
 8000b4e:	3718      	adds	r7, #24
 8000b50:	46bd      	mov	sp, r7
 8000b52:	bd80      	pop	{r7, pc}
 8000b54:	20000008 	.word	0x20000008

08000b58 <getSn_TX_FSR>:


uint16_t getSn_TX_FSR(uint8_t sn)
{
 8000b58:	b590      	push	{r4, r7, lr}
 8000b5a:	b085      	sub	sp, #20
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	4603      	mov	r3, r0
 8000b60:	71fb      	strb	r3, [r7, #7]
   uint16_t val=0,val1=0;
 8000b62:	2300      	movs	r3, #0
 8000b64:	81fb      	strh	r3, [r7, #14]
 8000b66:	2300      	movs	r3, #0
 8000b68:	81bb      	strh	r3, [r7, #12]

   do
   {
      val1 = WIZCHIP_READ(Sn_TX_FSR(sn));
 8000b6a:	79fb      	ldrb	r3, [r7, #7]
 8000b6c:	009b      	lsls	r3, r3, #2
 8000b6e:	3301      	adds	r3, #1
 8000b70:	00db      	lsls	r3, r3, #3
 8000b72:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8000b76:	4618      	mov	r0, r3
 8000b78:	f7ff fe94 	bl	80008a4 <WIZCHIP_READ>
 8000b7c:	4603      	mov	r3, r0
 8000b7e:	81bb      	strh	r3, [r7, #12]
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
 8000b80:	89bb      	ldrh	r3, [r7, #12]
 8000b82:	021b      	lsls	r3, r3, #8
 8000b84:	b29c      	uxth	r4, r3
 8000b86:	79fb      	ldrb	r3, [r7, #7]
 8000b88:	009b      	lsls	r3, r3, #2
 8000b8a:	3301      	adds	r3, #1
 8000b8c:	00db      	lsls	r3, r3, #3
 8000b8e:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 8000b92:	4618      	mov	r0, r3
 8000b94:	f7ff fe86 	bl	80008a4 <WIZCHIP_READ>
 8000b98:	4603      	mov	r3, r0
 8000b9a:	b29b      	uxth	r3, r3
 8000b9c:	4423      	add	r3, r4
 8000b9e:	81bb      	strh	r3, [r7, #12]
      if (val1 != 0)
 8000ba0:	89bb      	ldrh	r3, [r7, #12]
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d01a      	beq.n	8000bdc <getSn_TX_FSR+0x84>
      {
        val = WIZCHIP_READ(Sn_TX_FSR(sn));
 8000ba6:	79fb      	ldrb	r3, [r7, #7]
 8000ba8:	009b      	lsls	r3, r3, #2
 8000baa:	3301      	adds	r3, #1
 8000bac:	00db      	lsls	r3, r3, #3
 8000bae:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8000bb2:	4618      	mov	r0, r3
 8000bb4:	f7ff fe76 	bl	80008a4 <WIZCHIP_READ>
 8000bb8:	4603      	mov	r3, r0
 8000bba:	81fb      	strh	r3, [r7, #14]
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
 8000bbc:	89fb      	ldrh	r3, [r7, #14]
 8000bbe:	021b      	lsls	r3, r3, #8
 8000bc0:	b29c      	uxth	r4, r3
 8000bc2:	79fb      	ldrb	r3, [r7, #7]
 8000bc4:	009b      	lsls	r3, r3, #2
 8000bc6:	3301      	adds	r3, #1
 8000bc8:	00db      	lsls	r3, r3, #3
 8000bca:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 8000bce:	4618      	mov	r0, r3
 8000bd0:	f7ff fe68 	bl	80008a4 <WIZCHIP_READ>
 8000bd4:	4603      	mov	r3, r0
 8000bd6:	b29b      	uxth	r3, r3
 8000bd8:	4423      	add	r3, r4
 8000bda:	81fb      	strh	r3, [r7, #14]
      }
   }while (val != val1);
 8000bdc:	89fa      	ldrh	r2, [r7, #14]
 8000bde:	89bb      	ldrh	r3, [r7, #12]
 8000be0:	429a      	cmp	r2, r3
 8000be2:	d1c2      	bne.n	8000b6a <getSn_TX_FSR+0x12>
   return val;
 8000be4:	89fb      	ldrh	r3, [r7, #14]
}
 8000be6:	4618      	mov	r0, r3
 8000be8:	3714      	adds	r7, #20
 8000bea:	46bd      	mov	sp, r7
 8000bec:	bd90      	pop	{r4, r7, pc}

08000bee <wiz_send_data>:
   }while (val != val1);
   return val;
}

void wiz_send_data(uint8_t sn, uint8_t *wizdata, uint16_t len)
{
 8000bee:	b590      	push	{r4, r7, lr}
 8000bf0:	b085      	sub	sp, #20
 8000bf2:	af00      	add	r7, sp, #0
 8000bf4:	4603      	mov	r3, r0
 8000bf6:	6039      	str	r1, [r7, #0]
 8000bf8:	71fb      	strb	r3, [r7, #7]
 8000bfa:	4613      	mov	r3, r2
 8000bfc:	80bb      	strh	r3, [r7, #4]
   uint16_t ptr = 0;
 8000bfe:	2300      	movs	r3, #0
 8000c00:	81fb      	strh	r3, [r7, #14]
   uint32_t addrsel = 0;
 8000c02:	2300      	movs	r3, #0
 8000c04:	60bb      	str	r3, [r7, #8]

   if(len == 0)  return;
 8000c06:	88bb      	ldrh	r3, [r7, #4]
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d048      	beq.n	8000c9e <wiz_send_data+0xb0>
   ptr = getSn_TX_WR(sn);
 8000c0c:	79fb      	ldrb	r3, [r7, #7]
 8000c0e:	009b      	lsls	r3, r3, #2
 8000c10:	3301      	adds	r3, #1
 8000c12:	00db      	lsls	r3, r3, #3
 8000c14:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8000c18:	4618      	mov	r0, r3
 8000c1a:	f7ff fe43 	bl	80008a4 <WIZCHIP_READ>
 8000c1e:	4603      	mov	r3, r0
 8000c20:	b29b      	uxth	r3, r3
 8000c22:	021b      	lsls	r3, r3, #8
 8000c24:	b29c      	uxth	r4, r3
 8000c26:	79fb      	ldrb	r3, [r7, #7]
 8000c28:	009b      	lsls	r3, r3, #2
 8000c2a:	3301      	adds	r3, #1
 8000c2c:	00db      	lsls	r3, r3, #3
 8000c2e:	f503 5314 	add.w	r3, r3, #9472	; 0x2500
 8000c32:	4618      	mov	r0, r3
 8000c34:	f7ff fe36 	bl	80008a4 <WIZCHIP_READ>
 8000c38:	4603      	mov	r3, r0
 8000c3a:	b29b      	uxth	r3, r3
 8000c3c:	4423      	add	r3, r4
 8000c3e:	81fb      	strh	r3, [r7, #14]
   //M20140501 : implict type casting -> explict type casting
   //addrsel = (ptr << 8) + (WIZCHIP_TXBUF_BLOCK(sn) << 3);
   addrsel = ((uint32_t)ptr << 8) + (WIZCHIP_TXBUF_BLOCK(sn) << 3);
 8000c40:	89fb      	ldrh	r3, [r7, #14]
 8000c42:	021b      	lsls	r3, r3, #8
 8000c44:	79fa      	ldrb	r2, [r7, #7]
 8000c46:	0092      	lsls	r2, r2, #2
 8000c48:	3202      	adds	r2, #2
 8000c4a:	00d2      	lsls	r2, r2, #3
 8000c4c:	4413      	add	r3, r2
 8000c4e:	60bb      	str	r3, [r7, #8]
   //
   WIZCHIP_WRITE_BUF(addrsel,wizdata, len);
 8000c50:	88bb      	ldrh	r3, [r7, #4]
 8000c52:	461a      	mov	r2, r3
 8000c54:	6839      	ldr	r1, [r7, #0]
 8000c56:	68b8      	ldr	r0, [r7, #8]
 8000c58:	f7ff ff1e 	bl	8000a98 <WIZCHIP_WRITE_BUF>
   
   ptr += len;
 8000c5c:	89fa      	ldrh	r2, [r7, #14]
 8000c5e:	88bb      	ldrh	r3, [r7, #4]
 8000c60:	4413      	add	r3, r2
 8000c62:	81fb      	strh	r3, [r7, #14]
   setSn_TX_WR(sn,ptr);
 8000c64:	79fb      	ldrb	r3, [r7, #7]
 8000c66:	009b      	lsls	r3, r3, #2
 8000c68:	3301      	adds	r3, #1
 8000c6a:	00db      	lsls	r3, r3, #3
 8000c6c:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8000c70:	461a      	mov	r2, r3
 8000c72:	89fb      	ldrh	r3, [r7, #14]
 8000c74:	0a1b      	lsrs	r3, r3, #8
 8000c76:	b29b      	uxth	r3, r3
 8000c78:	b2db      	uxtb	r3, r3
 8000c7a:	4619      	mov	r1, r3
 8000c7c:	4610      	mov	r0, r2
 8000c7e:	f7ff fe5d 	bl	800093c <WIZCHIP_WRITE>
 8000c82:	79fb      	ldrb	r3, [r7, #7]
 8000c84:	009b      	lsls	r3, r3, #2
 8000c86:	3301      	adds	r3, #1
 8000c88:	00db      	lsls	r3, r3, #3
 8000c8a:	f503 5314 	add.w	r3, r3, #9472	; 0x2500
 8000c8e:	461a      	mov	r2, r3
 8000c90:	89fb      	ldrh	r3, [r7, #14]
 8000c92:	b2db      	uxtb	r3, r3
 8000c94:	4619      	mov	r1, r3
 8000c96:	4610      	mov	r0, r2
 8000c98:	f7ff fe50 	bl	800093c <WIZCHIP_WRITE>
 8000c9c:	e000      	b.n	8000ca0 <wiz_send_data+0xb2>
   if(len == 0)  return;
 8000c9e:	bf00      	nop
}
 8000ca0:	3714      	adds	r7, #20
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	bd90      	pop	{r4, r7, pc}
	...

08000ca8 <cs_sel>:
SPI_HandleTypeDef hspi1;

/**
 * @brief function to set cs pin low to start transmission
 */
void cs_sel() {
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET); //CS LOW
 8000cac:	2200      	movs	r2, #0
 8000cae:	2110      	movs	r1, #16
 8000cb0:	4802      	ldr	r0, [pc, #8]	; (8000cbc <cs_sel+0x14>)
 8000cb2:	f000 fdfb 	bl	80018ac <HAL_GPIO_WritePin>
}
 8000cb6:	bf00      	nop
 8000cb8:	bd80      	pop	{r7, pc}
 8000cba:	bf00      	nop
 8000cbc:	40010800 	.word	0x40010800

08000cc0 <cs_desel>:

/**
 * @brief function to set cs pin high to end transmission
 */
void cs_desel() {
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET); //CS HIGH
 8000cc4:	2201      	movs	r2, #1
 8000cc6:	2110      	movs	r1, #16
 8000cc8:	4802      	ldr	r0, [pc, #8]	; (8000cd4 <cs_desel+0x14>)
 8000cca:	f000 fdef 	bl	80018ac <HAL_GPIO_WritePin>
}
 8000cce:	bf00      	nop
 8000cd0:	bd80      	pop	{r7, pc}
 8000cd2:	bf00      	nop
 8000cd4:	40010800 	.word	0x40010800

08000cd8 <spi_rb>:

/**
 * @brief function to read byte through spi
 */
uint8_t spi_rb(void) {
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b082      	sub	sp, #8
 8000cdc:	af00      	add	r7, sp, #0
	uint8_t rbuf;
	HAL_SPI_Receive(&hspi1, &rbuf, 1, 0xFFFFFFFF);
 8000cde:	1df9      	adds	r1, r7, #7
 8000ce0:	f04f 33ff 	mov.w	r3, #4294967295
 8000ce4:	2201      	movs	r2, #1
 8000ce6:	4804      	ldr	r0, [pc, #16]	; (8000cf8 <spi_rb+0x20>)
 8000ce8:	f001 fba0 	bl	800242c <HAL_SPI_Receive>
	return rbuf;
 8000cec:	79fb      	ldrb	r3, [r7, #7]
}
 8000cee:	4618      	mov	r0, r3
 8000cf0:	3708      	adds	r7, #8
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	bd80      	pop	{r7, pc}
 8000cf6:	bf00      	nop
 8000cf8:	20000074 	.word	0x20000074

08000cfc <spi_wb>:

/**
 * @brief function to write byte through spi
 */
void spi_wb(uint8_t b) {
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b082      	sub	sp, #8
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	4603      	mov	r3, r0
 8000d04:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_Transmit(&hspi1, &b, 1, 0xFFFFFFFF);
 8000d06:	1df9      	adds	r1, r7, #7
 8000d08:	f04f 33ff 	mov.w	r3, #4294967295
 8000d0c:	2201      	movs	r2, #1
 8000d0e:	4803      	ldr	r0, [pc, #12]	; (8000d1c <spi_wb+0x20>)
 8000d10:	f001 fa50 	bl	80021b4 <HAL_SPI_Transmit>
}
 8000d14:	bf00      	nop
 8000d16:	3708      	adds	r7, #8
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	bd80      	pop	{r7, pc}
 8000d1c:	20000074 	.word	0x20000074

08000d20 <configureMCU>:

/**
 * @brief function that configures the MCU (STM32)
 */
void configureMCU()
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	af00      	add	r7, sp, #0
	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000d24:	f000 faf8 	bl	8001318 <HAL_Init>

	/* Configure the system clock */
	SystemClock_Config();
 8000d28:	f000 f877 	bl	8000e1a <SystemClock_Config>

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000d2c:	f000 f8ec 	bl	8000f08 <MX_GPIO_Init>
	MX_SPI1_Init();
 8000d30:	f000 f8b4 	bl	8000e9c <MX_SPI1_Init>
}
 8000d34:	bf00      	nop
 8000d36:	bd80      	pop	{r7, pc}

08000d38 <initializeW5500>:
 * @param ip is the node's IP address
 * @param sn is the node's subnet mask
 * @param gw is the node's gateway address
 */
void initializeW5500(uint8_t mac[], uint8_t ip[], uint8_t sn[], uint8_t gw[])
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b08c      	sub	sp, #48	; 0x30
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	60f8      	str	r0, [r7, #12]
 8000d40:	60b9      	str	r1, [r7, #8]
 8000d42:	607a      	str	r2, [r7, #4]
 8000d44:	603b      	str	r3, [r7, #0]
	uint8_t bufSize[] = { 2, 2, 2, 2, 2, 2, 2, 2};//size of each socket number in kilobytes
 8000d46:	4a1e      	ldr	r2, [pc, #120]	; (8000dc0 <initializeW5500+0x88>)
 8000d48:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000d4c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000d50:	e883 0003 	stmia.w	r3, {r0, r1}

	reg_wizchip_cs_cbfunc(cs_sel, cs_desel);//passes call back function for pin high and low which needs to be called during the SPI transfer
 8000d54:	491b      	ldr	r1, [pc, #108]	; (8000dc4 <initializeW5500+0x8c>)
 8000d56:	481c      	ldr	r0, [pc, #112]	; (8000dc8 <initializeW5500+0x90>)
 8000d58:	f000 f950 	bl	8000ffc <reg_wizchip_cs_cbfunc>
	reg_wizchip_spi_cbfunc(spi_rb, spi_wb);//passes the call back function for read byte and write byte which needs to be called during the SPI transfer
 8000d5c:	491b      	ldr	r1, [pc, #108]	; (8000dcc <initializeW5500+0x94>)
 8000d5e:	481c      	ldr	r0, [pc, #112]	; (8000dd0 <initializeW5500+0x98>)
 8000d60:	f000 f970 	bl	8001044 <reg_wizchip_spi_cbfunc>

	wizchip_init(bufSize, bufSize);//initializes the transmit and receive buffer sizes for each socket
 8000d64:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8000d68:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000d6c:	4611      	mov	r1, r2
 8000d6e:	4618      	mov	r0, r3
 8000d70:	f000 f9e0 	bl	8001134 <wizchip_init>
	wiz_NetInfo netInfo = {};
 8000d74:	f107 0310 	add.w	r3, r7, #16
 8000d78:	2200      	movs	r2, #0
 8000d7a:	601a      	str	r2, [r3, #0]
 8000d7c:	605a      	str	r2, [r3, #4]
 8000d7e:	609a      	str	r2, [r3, #8]
 8000d80:	60da      	str	r2, [r3, #12]
 8000d82:	611a      	str	r2, [r3, #16]
 8000d84:	f8c3 2013 	str.w	r2, [r3, #19]

	memcpy(&netInfo.mac,mac,6);// Mac address
 8000d88:	68fa      	ldr	r2, [r7, #12]
 8000d8a:	f107 0310 	add.w	r3, r7, #16
 8000d8e:	6810      	ldr	r0, [r2, #0]
 8000d90:	6018      	str	r0, [r3, #0]
 8000d92:	8892      	ldrh	r2, [r2, #4]
 8000d94:	809a      	strh	r2, [r3, #4]
 8000d96:	68bb      	ldr	r3, [r7, #8]
 8000d98:	681b      	ldr	r3, [r3, #0]
	memcpy(&netInfo.ip,ip,4);// IP address
 8000d9a:	f8c7 3016 	str.w	r3, [r7, #22]
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	681b      	ldr	r3, [r3, #0]
	memcpy(&netInfo.sn,sn,4);// Subnet mask
 8000da2:	f8c7 301a 	str.w	r3, [r7, #26]
 8000da6:	683b      	ldr	r3, [r7, #0]
 8000da8:	681b      	ldr	r3, [r3, #0]
	memcpy(&netInfo.gw,gw,4);// Gateway address
 8000daa:	f8c7 301e 	str.w	r3, [r7, #30]

	wizchip_setnetinfo(&netInfo);//sets the configuration of the MAC address, IP address, subnet mask and gateway
 8000dae:	f107 0310 	add.w	r3, r7, #16
 8000db2:	4618      	mov	r0, r3
 8000db4:	f000 fa4a 	bl	800124c <wizchip_setnetinfo>
	//wizchip_getnetinfo(&netInfo);
}
 8000db8:	bf00      	nop
 8000dba:	3730      	adds	r7, #48	; 0x30
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	bd80      	pop	{r7, pc}
 8000dc0:	08002c08 	.word	0x08002c08
 8000dc4:	08000cc1 	.word	0x08000cc1
 8000dc8:	08000ca9 	.word	0x08000ca9
 8000dcc:	08000cfd 	.word	0x08000cfd
 8000dd0:	08000cd9 	.word	0x08000cd9

08000dd4 <Socket_sendUDP>:
 * @param message is the message that needs to be sent
 * @param dstip is the destination IP address
 * @param portNum is the destination port number
 */
void Socket_sendUDP(uint8_t socNum,uint8_t message[],uint8_t dstip[], uint16_t portNum)
{
 8000dd4:	b590      	push	{r4, r7, lr}
 8000dd6:	b087      	sub	sp, #28
 8000dd8:	af02      	add	r7, sp, #8
 8000dda:	60b9      	str	r1, [r7, #8]
 8000ddc:	607a      	str	r2, [r7, #4]
 8000dde:	461a      	mov	r2, r3
 8000de0:	4603      	mov	r3, r0
 8000de2:	73fb      	strb	r3, [r7, #15]
 8000de4:	4613      	mov	r3, r2
 8000de6:	81bb      	strh	r3, [r7, #12]
	while(sendto(socNum, message, strlen(message), dstip, portNum)!=strlen(message));//sends message to a destination ip address and port
 8000de8:	bf00      	nop
 8000dea:	68b8      	ldr	r0, [r7, #8]
 8000dec:	f7ff f9ae 	bl	800014c <strlen>
 8000df0:	4603      	mov	r3, r0
 8000df2:	b29a      	uxth	r2, r3
 8000df4:	7bf8      	ldrb	r0, [r7, #15]
 8000df6:	89bb      	ldrh	r3, [r7, #12]
 8000df8:	9300      	str	r3, [sp, #0]
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	68b9      	ldr	r1, [r7, #8]
 8000dfe:	f7ff fb81 	bl	8000504 <sendto>
 8000e02:	4604      	mov	r4, r0
 8000e04:	68b8      	ldr	r0, [r7, #8]
 8000e06:	f7ff f9a1 	bl	800014c <strlen>
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	429c      	cmp	r4, r3
 8000e0e:	d1ec      	bne.n	8000dea <Socket_sendUDP+0x16>
}
 8000e10:	bf00      	nop
 8000e12:	bf00      	nop
 8000e14:	3714      	adds	r7, #20
 8000e16:	46bd      	mov	sp, r7
 8000e18:	bd90      	pop	{r4, r7, pc}

08000e1a <SystemClock_Config>:

/**
 * @brief this function configures the system clock of the Microcontroller (STM32)
 */
void SystemClock_Config(void)
{
 8000e1a:	b580      	push	{r7, lr}
 8000e1c:	b090      	sub	sp, #64	; 0x40
 8000e1e:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e20:	f107 0318 	add.w	r3, r7, #24
 8000e24:	2228      	movs	r2, #40	; 0x28
 8000e26:	2100      	movs	r1, #0
 8000e28:	4618      	mov	r0, r3
 8000e2a:	f001 fecf 	bl	8002bcc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e2e:	1d3b      	adds	r3, r7, #4
 8000e30:	2200      	movs	r2, #0
 8000e32:	601a      	str	r2, [r3, #0]
 8000e34:	605a      	str	r2, [r3, #4]
 8000e36:	609a      	str	r2, [r3, #8]
 8000e38:	60da      	str	r2, [r3, #12]
 8000e3a:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000e3c:	2302      	movs	r3, #2
 8000e3e:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e40:	2301      	movs	r3, #1
 8000e42:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000e44:	2310      	movs	r3, #16
 8000e46:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e48:	2302      	movs	r3, #2
 8000e4a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000e50:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8000e54:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e56:	f107 0318 	add.w	r3, r7, #24
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	f000 fd3e 	bl	80018dc <HAL_RCC_OscConfig>
 8000e60:	4603      	mov	r3, r0
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d001      	beq.n	8000e6a <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000e66:	f000 f881 	bl	8000f6c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e6a:	230f      	movs	r3, #15
 8000e6c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e6e:	2302      	movs	r3, #2
 8000e70:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e72:	2300      	movs	r3, #0
 8000e74:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000e76:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e7a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000e80:	1d3b      	adds	r3, r7, #4
 8000e82:	2102      	movs	r1, #2
 8000e84:	4618      	mov	r0, r3
 8000e86:	f000 ffab 	bl	8001de0 <HAL_RCC_ClockConfig>
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d001      	beq.n	8000e94 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8000e90:	f000 f86c 	bl	8000f6c <Error_Handler>
  }
}
 8000e94:	bf00      	nop
 8000e96:	3740      	adds	r7, #64	; 0x40
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	bd80      	pop	{r7, pc}

08000e9c <MX_SPI1_Init>:

/**
 * @brief this function initializes the SPI peripheral of the Microcontroller (STM32) to enable communication through SPI
 */
void MX_SPI1_Init(void)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	af00      	add	r7, sp, #0
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000ea0:	4b17      	ldr	r3, [pc, #92]	; (8000f00 <MX_SPI1_Init+0x64>)
 8000ea2:	4a18      	ldr	r2, [pc, #96]	; (8000f04 <MX_SPI1_Init+0x68>)
 8000ea4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000ea6:	4b16      	ldr	r3, [pc, #88]	; (8000f00 <MX_SPI1_Init+0x64>)
 8000ea8:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000eac:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000eae:	4b14      	ldr	r3, [pc, #80]	; (8000f00 <MX_SPI1_Init+0x64>)
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000eb4:	4b12      	ldr	r3, [pc, #72]	; (8000f00 <MX_SPI1_Init+0x64>)
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000eba:	4b11      	ldr	r3, [pc, #68]	; (8000f00 <MX_SPI1_Init+0x64>)
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000ec0:	4b0f      	ldr	r3, [pc, #60]	; (8000f00 <MX_SPI1_Init+0x64>)
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000ec6:	4b0e      	ldr	r3, [pc, #56]	; (8000f00 <MX_SPI1_Init+0x64>)
 8000ec8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000ecc:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000ece:	4b0c      	ldr	r3, [pc, #48]	; (8000f00 <MX_SPI1_Init+0x64>)
 8000ed0:	2210      	movs	r2, #16
 8000ed2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000ed4:	4b0a      	ldr	r3, [pc, #40]	; (8000f00 <MX_SPI1_Init+0x64>)
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000eda:	4b09      	ldr	r3, [pc, #36]	; (8000f00 <MX_SPI1_Init+0x64>)
 8000edc:	2200      	movs	r2, #0
 8000ede:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000ee0:	4b07      	ldr	r3, [pc, #28]	; (8000f00 <MX_SPI1_Init+0x64>)
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000ee6:	4b06      	ldr	r3, [pc, #24]	; (8000f00 <MX_SPI1_Init+0x64>)
 8000ee8:	220a      	movs	r2, #10
 8000eea:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000eec:	4804      	ldr	r0, [pc, #16]	; (8000f00 <MX_SPI1_Init+0x64>)
 8000eee:	f001 f8dd 	bl	80020ac <HAL_SPI_Init>
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d001      	beq.n	8000efc <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000ef8:	f000 f838 	bl	8000f6c <Error_Handler>
  }

}
 8000efc:	bf00      	nop
 8000efe:	bd80      	pop	{r7, pc}
 8000f00:	20000074 	.word	0x20000074
 8000f04:	40013000 	.word	0x40013000

08000f08 <MX_GPIO_Init>:

/**
 * @brief this function initializes the GPIO peripheral of the Microcontroller (STM32). note: we configured portA pin 4 as output which will be used to start and end transmission for SPI
 */
void MX_GPIO_Init(void)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b086      	sub	sp, #24
 8000f0c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f0e:	f107 0308 	add.w	r3, r7, #8
 8000f12:	2200      	movs	r2, #0
 8000f14:	601a      	str	r2, [r3, #0]
 8000f16:	605a      	str	r2, [r3, #4]
 8000f18:	609a      	str	r2, [r3, #8]
 8000f1a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f1c:	4b11      	ldr	r3, [pc, #68]	; (8000f64 <MX_GPIO_Init+0x5c>)
 8000f1e:	699b      	ldr	r3, [r3, #24]
 8000f20:	4a10      	ldr	r2, [pc, #64]	; (8000f64 <MX_GPIO_Init+0x5c>)
 8000f22:	f043 0304 	orr.w	r3, r3, #4
 8000f26:	6193      	str	r3, [r2, #24]
 8000f28:	4b0e      	ldr	r3, [pc, #56]	; (8000f64 <MX_GPIO_Init+0x5c>)
 8000f2a:	699b      	ldr	r3, [r3, #24]
 8000f2c:	f003 0304 	and.w	r3, r3, #4
 8000f30:	607b      	str	r3, [r7, #4]
 8000f32:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8000f34:	2200      	movs	r2, #0
 8000f36:	2110      	movs	r1, #16
 8000f38:	480b      	ldr	r0, [pc, #44]	; (8000f68 <MX_GPIO_Init+0x60>)
 8000f3a:	f000 fcb7 	bl	80018ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000f3e:	2310      	movs	r3, #16
 8000f40:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f42:	2301      	movs	r3, #1
 8000f44:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f46:	2301      	movs	r3, #1
 8000f48:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f4a:	2302      	movs	r3, #2
 8000f4c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f4e:	f107 0308 	add.w	r3, r7, #8
 8000f52:	4619      	mov	r1, r3
 8000f54:	4804      	ldr	r0, [pc, #16]	; (8000f68 <MX_GPIO_Init+0x60>)
 8000f56:	f000 fb25 	bl	80015a4 <HAL_GPIO_Init>
}
 8000f5a:	bf00      	nop
 8000f5c:	3718      	adds	r7, #24
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	bd80      	pop	{r7, pc}
 8000f62:	bf00      	nop
 8000f64:	40021000 	.word	0x40021000
 8000f68:	40010800 	.word	0x40010800

08000f6c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f70:	b672      	cpsid	i
}
 8000f72:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000f74:	e7fe      	b.n	8000f74 <Error_Handler+0x8>

08000f76 <wizchip_cris_enter>:
 * @brief Default function to enable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	  wizchip_cris_enter(void)           {};
void 	  wizchip_cris_enter(void)           {}
 8000f76:	b480      	push	{r7}
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	bf00      	nop
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	bc80      	pop	{r7}
 8000f80:	4770      	bx	lr

08000f82 <wizchip_cris_exit>:
 * @brief Default function to disable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	  wizchip_cris_exit(void)          {};
void 	  wizchip_cris_exit(void)          {}
 8000f82:	b480      	push	{r7}
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	bf00      	nop
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	bc80      	pop	{r7}
 8000f8c:	4770      	bx	lr

08000f8e <wizchip_cs_select>:
 * @brief Default function to select chip.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_cs_select(void)            {};
void 	wizchip_cs_select(void)            {}
 8000f8e:	b480      	push	{r7}
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	bf00      	nop
 8000f94:	46bd      	mov	sp, r7
 8000f96:	bc80      	pop	{r7}
 8000f98:	4770      	bx	lr

08000f9a <wizchip_cs_deselect>:
 * @brief Default function to deselect chip.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_cs_deselect(void)          {};
void 	wizchip_cs_deselect(void)          {}
 8000f9a:	b480      	push	{r7}
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	bf00      	nop
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	bc80      	pop	{r7}
 8000fa4:	4770      	bx	lr

08000fa6 <wizchip_bus_readdata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
 //M20150601 : Rename the function for integrating with W5300
//uint8_t wizchip_bus_readbyte(uint32_t AddrSel) { return * ((volatile uint8_t *)((ptrdiff_t) AddrSel)); }
iodata_t wizchip_bus_readdata(uint32_t AddrSel) { return * ((volatile iodata_t *)((ptrdiff_t) AddrSel)); }
 8000fa6:	b480      	push	{r7}
 8000fa8:	b083      	sub	sp, #12
 8000faa:	af00      	add	r7, sp, #0
 8000fac:	6078      	str	r0, [r7, #4]
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	781b      	ldrb	r3, [r3, #0]
 8000fb2:	b2db      	uxtb	r3, r3
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	370c      	adds	r7, #12
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	bc80      	pop	{r7}
 8000fbc:	4770      	bx	lr

08000fbe <wizchip_bus_writedata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//M20150601 : Rename the function for integrating with W5300
//void 	wizchip_bus_writebyte(uint32_t AddrSel, uint8_t wb)  { *((volatile uint8_t*)((ptrdiff_t)AddrSel)) = wb; }
void 	wizchip_bus_writedata(uint32_t AddrSel, iodata_t wb)  { *((volatile iodata_t*)((ptrdiff_t)AddrSel)) = wb; }
 8000fbe:	b480      	push	{r7}
 8000fc0:	b083      	sub	sp, #12
 8000fc2:	af00      	add	r7, sp, #0
 8000fc4:	6078      	str	r0, [r7, #4]
 8000fc6:	460b      	mov	r3, r1
 8000fc8:	70fb      	strb	r3, [r7, #3]
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	78fa      	ldrb	r2, [r7, #3]
 8000fce:	701a      	strb	r2, [r3, #0]
 8000fd0:	bf00      	nop
 8000fd2:	370c      	adds	r7, #12
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	bc80      	pop	{r7}
 8000fd8:	4770      	bx	lr

08000fda <wizchip_spi_readbyte>:
 * @brief Default function to read in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//uint8_t wizchip_spi_readbyte(void)        {return 0;};
uint8_t wizchip_spi_readbyte(void)        {return 0;}
 8000fda:	b480      	push	{r7}
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	2300      	movs	r3, #0
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	bc80      	pop	{r7}
 8000fe6:	4770      	bx	lr

08000fe8 <wizchip_spi_writebyte>:
 * @brief Default function to write in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_spi_writebyte(uint8_t wb) {};
void 	wizchip_spi_writebyte(uint8_t wb) {}
 8000fe8:	b480      	push	{r7}
 8000fea:	b083      	sub	sp, #12
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	4603      	mov	r3, r0
 8000ff0:	71fb      	strb	r3, [r7, #7]
 8000ff2:	bf00      	nop
 8000ff4:	370c      	adds	r7, #12
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	bc80      	pop	{r7}
 8000ffa:	4770      	bx	lr

08000ffc <reg_wizchip_cs_cbfunc>:
      WIZCHIP.CRIS._exit  = cris_ex;
   }
}

void reg_wizchip_cs_cbfunc(void(*cs_sel)(void), void(*cs_desel)(void))
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	b083      	sub	sp, #12
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]
 8001004:	6039      	str	r1, [r7, #0]
   if(!cs_sel || !cs_desel)
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	2b00      	cmp	r3, #0
 800100a:	d002      	beq.n	8001012 <reg_wizchip_cs_cbfunc+0x16>
 800100c:	683b      	ldr	r3, [r7, #0]
 800100e:	2b00      	cmp	r3, #0
 8001010:	d106      	bne.n	8001020 <reg_wizchip_cs_cbfunc+0x24>
   {
      WIZCHIP.CS._select   = wizchip_cs_select;
 8001012:	4b09      	ldr	r3, [pc, #36]	; (8001038 <reg_wizchip_cs_cbfunc+0x3c>)
 8001014:	4a09      	ldr	r2, [pc, #36]	; (800103c <reg_wizchip_cs_cbfunc+0x40>)
 8001016:	615a      	str	r2, [r3, #20]
      WIZCHIP.CS._deselect = wizchip_cs_deselect;
 8001018:	4b07      	ldr	r3, [pc, #28]	; (8001038 <reg_wizchip_cs_cbfunc+0x3c>)
 800101a:	4a09      	ldr	r2, [pc, #36]	; (8001040 <reg_wizchip_cs_cbfunc+0x44>)
 800101c:	619a      	str	r2, [r3, #24]
 800101e:	e006      	b.n	800102e <reg_wizchip_cs_cbfunc+0x32>
   }
   else
   {
      WIZCHIP.CS._select   = cs_sel;
 8001020:	4a05      	ldr	r2, [pc, #20]	; (8001038 <reg_wizchip_cs_cbfunc+0x3c>)
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	6153      	str	r3, [r2, #20]
      WIZCHIP.CS._deselect = cs_desel;
 8001026:	4a04      	ldr	r2, [pc, #16]	; (8001038 <reg_wizchip_cs_cbfunc+0x3c>)
 8001028:	683b      	ldr	r3, [r7, #0]
 800102a:	6193      	str	r3, [r2, #24]
   }
}
 800102c:	bf00      	nop
 800102e:	bf00      	nop
 8001030:	370c      	adds	r7, #12
 8001032:	46bd      	mov	sp, r7
 8001034:	bc80      	pop	{r7}
 8001036:	4770      	bx	lr
 8001038:	20000008 	.word	0x20000008
 800103c:	08000f8f 	.word	0x08000f8f
 8001040:	08000f9b 	.word	0x08000f9b

08001044 <reg_wizchip_spi_cbfunc>:
      WIZCHIP.IF.BUS._write_data  = bus_wb;
   }
}

void reg_wizchip_spi_cbfunc(uint8_t (*spi_rb)(void), void (*spi_wb)(uint8_t wb))
{
 8001044:	b480      	push	{r7}
 8001046:	b083      	sub	sp, #12
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
 800104c:	6039      	str	r1, [r7, #0]
   while(!(WIZCHIP.if_mode & _WIZCHIP_IO_MODE_SPI_));
 800104e:	bf00      	nop
 8001050:	4b0f      	ldr	r3, [pc, #60]	; (8001090 <reg_wizchip_spi_cbfunc+0x4c>)
 8001052:	881b      	ldrh	r3, [r3, #0]
 8001054:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001058:	2b00      	cmp	r3, #0
 800105a:	d0f9      	beq.n	8001050 <reg_wizchip_spi_cbfunc+0xc>
   
   if(!spi_rb || !spi_wb)
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	2b00      	cmp	r3, #0
 8001060:	d002      	beq.n	8001068 <reg_wizchip_spi_cbfunc+0x24>
 8001062:	683b      	ldr	r3, [r7, #0]
 8001064:	2b00      	cmp	r3, #0
 8001066:	d106      	bne.n	8001076 <reg_wizchip_spi_cbfunc+0x32>
   {
      WIZCHIP.IF.SPI._read_byte   = wizchip_spi_readbyte;
 8001068:	4b09      	ldr	r3, [pc, #36]	; (8001090 <reg_wizchip_spi_cbfunc+0x4c>)
 800106a:	4a0a      	ldr	r2, [pc, #40]	; (8001094 <reg_wizchip_spi_cbfunc+0x50>)
 800106c:	61da      	str	r2, [r3, #28]
      WIZCHIP.IF.SPI._write_byte  = wizchip_spi_writebyte;
 800106e:	4b08      	ldr	r3, [pc, #32]	; (8001090 <reg_wizchip_spi_cbfunc+0x4c>)
 8001070:	4a09      	ldr	r2, [pc, #36]	; (8001098 <reg_wizchip_spi_cbfunc+0x54>)
 8001072:	621a      	str	r2, [r3, #32]
 8001074:	e006      	b.n	8001084 <reg_wizchip_spi_cbfunc+0x40>
   }
   else
   {
      WIZCHIP.IF.SPI._read_byte   = spi_rb;
 8001076:	4a06      	ldr	r2, [pc, #24]	; (8001090 <reg_wizchip_spi_cbfunc+0x4c>)
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	61d3      	str	r3, [r2, #28]
      WIZCHIP.IF.SPI._write_byte  = spi_wb;
 800107c:	4a04      	ldr	r2, [pc, #16]	; (8001090 <reg_wizchip_spi_cbfunc+0x4c>)
 800107e:	683b      	ldr	r3, [r7, #0]
 8001080:	6213      	str	r3, [r2, #32]
   }
}
 8001082:	bf00      	nop
 8001084:	bf00      	nop
 8001086:	370c      	adds	r7, #12
 8001088:	46bd      	mov	sp, r7
 800108a:	bc80      	pop	{r7}
 800108c:	4770      	bx	lr
 800108e:	bf00      	nop
 8001090:	20000008 	.word	0x20000008
 8001094:	08000fdb 	.word	0x08000fdb
 8001098:	08000fe9 	.word	0x08000fe9

0800109c <wizchip_sw_reset>:
   }
   return 0;
}

void wizchip_sw_reset(void)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b086      	sub	sp, #24
 80010a0:	af00      	add	r7, sp, #0
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   uint16_t mr = (uint16_t)getMR();
   setMR(mr | MR_IND);
#endif
//
   getSHAR(mac);
 80010a2:	1d3b      	adds	r3, r7, #4
 80010a4:	2206      	movs	r2, #6
 80010a6:	4619      	mov	r1, r3
 80010a8:	f44f 6010 	mov.w	r0, #2304	; 0x900
 80010ac:	f7ff fc94 	bl	80009d8 <WIZCHIP_READ_BUF>
   getGAR(gw);  getSUBR(sn);  getSIPR(sip);
 80010b0:	f107 0314 	add.w	r3, r7, #20
 80010b4:	2204      	movs	r2, #4
 80010b6:	4619      	mov	r1, r3
 80010b8:	f44f 7080 	mov.w	r0, #256	; 0x100
 80010bc:	f7ff fc8c 	bl	80009d8 <WIZCHIP_READ_BUF>
 80010c0:	f107 0310 	add.w	r3, r7, #16
 80010c4:	2204      	movs	r2, #4
 80010c6:	4619      	mov	r1, r3
 80010c8:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 80010cc:	f7ff fc84 	bl	80009d8 <WIZCHIP_READ_BUF>
 80010d0:	f107 030c 	add.w	r3, r7, #12
 80010d4:	2204      	movs	r2, #4
 80010d6:	4619      	mov	r1, r3
 80010d8:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 80010dc:	f7ff fc7c 	bl	80009d8 <WIZCHIP_READ_BUF>
   setMR(MR_RST);
 80010e0:	2180      	movs	r1, #128	; 0x80
 80010e2:	2000      	movs	r0, #0
 80010e4:	f7ff fc2a 	bl	800093c <WIZCHIP_WRITE>
   getMR(); // for delay
 80010e8:	2000      	movs	r0, #0
 80010ea:	f7ff fbdb 	bl	80008a4 <WIZCHIP_READ>
//A2015051 : For indirect bus mode 
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   setMR(mr | MR_IND);
#endif
//
   setSHAR(mac);
 80010ee:	1d3b      	adds	r3, r7, #4
 80010f0:	2206      	movs	r2, #6
 80010f2:	4619      	mov	r1, r3
 80010f4:	f44f 6010 	mov.w	r0, #2304	; 0x900
 80010f8:	f7ff fcce 	bl	8000a98 <WIZCHIP_WRITE_BUF>
   setGAR(gw);
 80010fc:	f107 0314 	add.w	r3, r7, #20
 8001100:	2204      	movs	r2, #4
 8001102:	4619      	mov	r1, r3
 8001104:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001108:	f7ff fcc6 	bl	8000a98 <WIZCHIP_WRITE_BUF>
   setSUBR(sn);
 800110c:	f107 0310 	add.w	r3, r7, #16
 8001110:	2204      	movs	r2, #4
 8001112:	4619      	mov	r1, r3
 8001114:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 8001118:	f7ff fcbe 	bl	8000a98 <WIZCHIP_WRITE_BUF>
   setSIPR(sip);
 800111c:	f107 030c 	add.w	r3, r7, #12
 8001120:	2204      	movs	r2, #4
 8001122:	4619      	mov	r1, r3
 8001124:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 8001128:	f7ff fcb6 	bl	8000a98 <WIZCHIP_WRITE_BUF>
}
 800112c:	bf00      	nop
 800112e:	3718      	adds	r7, #24
 8001130:	46bd      	mov	sp, r7
 8001132:	bd80      	pop	{r7, pc}

08001134 <wizchip_init>:

int8_t wizchip_init(uint8_t* txsize, uint8_t* rxsize)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b084      	sub	sp, #16
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]
 800113c:	6039      	str	r1, [r7, #0]
   int8_t i;
#if _WIZCHIP_ < W5200
   int8_t j;
#endif
   int8_t tmp = 0;
 800113e:	2300      	movs	r3, #0
 8001140:	73bb      	strb	r3, [r7, #14]
   wizchip_sw_reset();
 8001142:	f7ff ffab 	bl	800109c <wizchip_sw_reset>
   if(txsize)
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	2b00      	cmp	r3, #0
 800114a:	d03b      	beq.n	80011c4 <wizchip_init+0x90>
   {
      tmp = 0;
 800114c:	2300      	movs	r3, #0
 800114e:	73bb      	strb	r3, [r7, #14]
			tmp += txsize[i];
			if(tmp > 128) return -1;
		}
		if(tmp % 8) return -1;
   #else
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8001150:	2300      	movs	r3, #0
 8001152:	73fb      	strb	r3, [r7, #15]
 8001154:	e015      	b.n	8001182 <wizchip_init+0x4e>
		{
			tmp += txsize[i];
 8001156:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800115a:	687a      	ldr	r2, [r7, #4]
 800115c:	4413      	add	r3, r2
 800115e:	781a      	ldrb	r2, [r3, #0]
 8001160:	7bbb      	ldrb	r3, [r7, #14]
 8001162:	4413      	add	r3, r2
 8001164:	b2db      	uxtb	r3, r3
 8001166:	73bb      	strb	r3, [r7, #14]

		#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100 and w5100s
			if(tmp > 8) return -1;
		#else
			if(tmp > 16) return -1;
 8001168:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800116c:	2b10      	cmp	r3, #16
 800116e:	dd02      	ble.n	8001176 <wizchip_init+0x42>
 8001170:	f04f 33ff 	mov.w	r3, #4294967295
 8001174:	e066      	b.n	8001244 <wizchip_init+0x110>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8001176:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800117a:	b2db      	uxtb	r3, r3
 800117c:	3301      	adds	r3, #1
 800117e:	b2db      	uxtb	r3, r3
 8001180:	73fb      	strb	r3, [r7, #15]
 8001182:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001186:	2b07      	cmp	r3, #7
 8001188:	dde5      	ble.n	8001156 <wizchip_init+0x22>
		#endif
		}
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 800118a:	2300      	movs	r3, #0
 800118c:	73fb      	strb	r3, [r7, #15]
 800118e:	e015      	b.n	80011bc <wizchip_init+0x88>
		#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100
			j = 0;
			while((txsize[i] >> j != 1)&&(txsize[i] !=0)){j++;}
			setSn_TXBUF_SIZE(i, j);
		#else
			setSn_TXBUF_SIZE(i, txsize[i]);
 8001190:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001194:	009b      	lsls	r3, r3, #2
 8001196:	3301      	adds	r3, #1
 8001198:	00db      	lsls	r3, r3, #3
 800119a:	f503 53f8 	add.w	r3, r3, #7936	; 0x1f00
 800119e:	4618      	mov	r0, r3
 80011a0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011a4:	687a      	ldr	r2, [r7, #4]
 80011a6:	4413      	add	r3, r2
 80011a8:	781b      	ldrb	r3, [r3, #0]
 80011aa:	4619      	mov	r1, r3
 80011ac:	f7ff fbc6 	bl	800093c <WIZCHIP_WRITE>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 80011b0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011b4:	b2db      	uxtb	r3, r3
 80011b6:	3301      	adds	r3, #1
 80011b8:	b2db      	uxtb	r3, r3
 80011ba:	73fb      	strb	r3, [r7, #15]
 80011bc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011c0:	2b07      	cmp	r3, #7
 80011c2:	dde5      	ble.n	8001190 <wizchip_init+0x5c>
		}

	#endif
   }

   if(rxsize)
 80011c4:	683b      	ldr	r3, [r7, #0]
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d03b      	beq.n	8001242 <wizchip_init+0x10e>
   {
      tmp = 0;
 80011ca:	2300      	movs	r3, #0
 80011cc:	73bb      	strb	r3, [r7, #14]
			tmp += rxsize[i];
			if(tmp > 128) return -1;
		}
		if(tmp % 8) return -1;
   #else
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 80011ce:	2300      	movs	r3, #0
 80011d0:	73fb      	strb	r3, [r7, #15]
 80011d2:	e015      	b.n	8001200 <wizchip_init+0xcc>
		{
			tmp += rxsize[i];
 80011d4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011d8:	683a      	ldr	r2, [r7, #0]
 80011da:	4413      	add	r3, r2
 80011dc:	781a      	ldrb	r2, [r3, #0]
 80011de:	7bbb      	ldrb	r3, [r7, #14]
 80011e0:	4413      	add	r3, r2
 80011e2:	b2db      	uxtb	r3, r3
 80011e4:	73bb      	strb	r3, [r7, #14]
		#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100 and w5100s
			if(tmp > 8) return -1;
		#else
			if(tmp > 16) return -1;
 80011e6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80011ea:	2b10      	cmp	r3, #16
 80011ec:	dd02      	ble.n	80011f4 <wizchip_init+0xc0>
 80011ee:	f04f 33ff 	mov.w	r3, #4294967295
 80011f2:	e027      	b.n	8001244 <wizchip_init+0x110>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 80011f4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011f8:	b2db      	uxtb	r3, r3
 80011fa:	3301      	adds	r3, #1
 80011fc:	b2db      	uxtb	r3, r3
 80011fe:	73fb      	strb	r3, [r7, #15]
 8001200:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001204:	2b07      	cmp	r3, #7
 8001206:	dde5      	ble.n	80011d4 <wizchip_init+0xa0>
		#endif
		}

		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8001208:	2300      	movs	r3, #0
 800120a:	73fb      	strb	r3, [r7, #15]
 800120c:	e015      	b.n	800123a <wizchip_init+0x106>
		#if _WIZCHIP_ < W5200	// add condition for w5100
			j = 0;
			while((rxsize[i] >> j != 1)&&(txsize[i] !=0)){j++;}
			setSn_RXBUF_SIZE(i, j);
		#else
			setSn_RXBUF_SIZE(i, rxsize[i]);
 800120e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001212:	009b      	lsls	r3, r3, #2
 8001214:	3301      	adds	r3, #1
 8001216:	00db      	lsls	r3, r3, #3
 8001218:	f503 53f0 	add.w	r3, r3, #7680	; 0x1e00
 800121c:	4618      	mov	r0, r3
 800121e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001222:	683a      	ldr	r2, [r7, #0]
 8001224:	4413      	add	r3, r2
 8001226:	781b      	ldrb	r3, [r3, #0]
 8001228:	4619      	mov	r1, r3
 800122a:	f7ff fb87 	bl	800093c <WIZCHIP_WRITE>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 800122e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001232:	b2db      	uxtb	r3, r3
 8001234:	3301      	adds	r3, #1
 8001236:	b2db      	uxtb	r3, r3
 8001238:	73fb      	strb	r3, [r7, #15]
 800123a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800123e:	2b07      	cmp	r3, #7
 8001240:	dde5      	ble.n	800120e <wizchip_init+0xda>
		#endif
		}
	#endif
   }
   return 0;
 8001242:	2300      	movs	r3, #0
}
 8001244:	4618      	mov	r0, r3
 8001246:	3710      	adds	r7, #16
 8001248:	46bd      	mov	sp, r7
 800124a:	bd80      	pop	{r7, pc}

0800124c <wizchip_setnetinfo>:
}
#endif


void wizchip_setnetinfo(wiz_NetInfo* pnetinfo)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	b082      	sub	sp, #8
 8001250:	af00      	add	r7, sp, #0
 8001252:	6078      	str	r0, [r7, #4]
   setSHAR(pnetinfo->mac);
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	2206      	movs	r2, #6
 8001258:	4619      	mov	r1, r3
 800125a:	f44f 6010 	mov.w	r0, #2304	; 0x900
 800125e:	f7ff fc1b 	bl	8000a98 <WIZCHIP_WRITE_BUF>
   setGAR(pnetinfo->gw);
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	330e      	adds	r3, #14
 8001266:	2204      	movs	r2, #4
 8001268:	4619      	mov	r1, r3
 800126a:	f44f 7080 	mov.w	r0, #256	; 0x100
 800126e:	f7ff fc13 	bl	8000a98 <WIZCHIP_WRITE_BUF>
   setSUBR(pnetinfo->sn);
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	330a      	adds	r3, #10
 8001276:	2204      	movs	r2, #4
 8001278:	4619      	mov	r1, r3
 800127a:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 800127e:	f7ff fc0b 	bl	8000a98 <WIZCHIP_WRITE_BUF>
   setSIPR(pnetinfo->ip);
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	3306      	adds	r3, #6
 8001286:	2204      	movs	r2, #4
 8001288:	4619      	mov	r1, r3
 800128a:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 800128e:	f7ff fc03 	bl	8000a98 <WIZCHIP_WRITE_BUF>
   _DNS_[0] = pnetinfo->dns[0];
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	7c9a      	ldrb	r2, [r3, #18]
 8001296:	4b0b      	ldr	r3, [pc, #44]	; (80012c4 <wizchip_setnetinfo+0x78>)
 8001298:	701a      	strb	r2, [r3, #0]
   _DNS_[1] = pnetinfo->dns[1];
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	7cda      	ldrb	r2, [r3, #19]
 800129e:	4b09      	ldr	r3, [pc, #36]	; (80012c4 <wizchip_setnetinfo+0x78>)
 80012a0:	705a      	strb	r2, [r3, #1]
   _DNS_[2] = pnetinfo->dns[2];
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	7d1a      	ldrb	r2, [r3, #20]
 80012a6:	4b07      	ldr	r3, [pc, #28]	; (80012c4 <wizchip_setnetinfo+0x78>)
 80012a8:	709a      	strb	r2, [r3, #2]
   _DNS_[3] = pnetinfo->dns[3];
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	7d5a      	ldrb	r2, [r3, #21]
 80012ae:	4b05      	ldr	r3, [pc, #20]	; (80012c4 <wizchip_setnetinfo+0x78>)
 80012b0:	70da      	strb	r2, [r3, #3]
   _DHCP_   = pnetinfo->dhcp;
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	7d9a      	ldrb	r2, [r3, #22]
 80012b6:	4b04      	ldr	r3, [pc, #16]	; (80012c8 <wizchip_setnetinfo+0x7c>)
 80012b8:	701a      	strb	r2, [r3, #0]
}
 80012ba:	bf00      	nop
 80012bc:	3708      	adds	r7, #8
 80012be:	46bd      	mov	sp, r7
 80012c0:	bd80      	pop	{r7, pc}
 80012c2:	bf00      	nop
 80012c4:	200000cc 	.word	0x200000cc
 80012c8:	200000d0 	.word	0x200000d0

080012cc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80012cc:	480c      	ldr	r0, [pc, #48]	; (8001300 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80012ce:	490d      	ldr	r1, [pc, #52]	; (8001304 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80012d0:	4a0d      	ldr	r2, [pc, #52]	; (8001308 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80012d2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80012d4:	e002      	b.n	80012dc <LoopCopyDataInit>

080012d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80012d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80012d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80012da:	3304      	adds	r3, #4

080012dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80012dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80012de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80012e0:	d3f9      	bcc.n	80012d6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80012e2:	4a0a      	ldr	r2, [pc, #40]	; (800130c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80012e4:	4c0a      	ldr	r4, [pc, #40]	; (8001310 <LoopFillZerobss+0x22>)
  movs r3, #0
 80012e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80012e8:	e001      	b.n	80012ee <LoopFillZerobss>

080012ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80012ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80012ec:	3204      	adds	r2, #4

080012ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80012ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80012f0:	d3fb      	bcc.n	80012ea <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80012f2:	f7ff fad0 	bl	8000896 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80012f6:	f001 fc45 	bl	8002b84 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80012fa:	f7fe ff2f 	bl	800015c <main>
  bx lr
 80012fe:	4770      	bx	lr
  ldr r0, =_sdata
 8001300:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001304:	2000003c 	.word	0x2000003c
  ldr r2, =_sidata
 8001308:	08002c38 	.word	0x08002c38
  ldr r2, =_sbss
 800130c:	2000003c 	.word	0x2000003c
  ldr r4, =_ebss
 8001310:	200000d8 	.word	0x200000d8

08001314 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001314:	e7fe      	b.n	8001314 <ADC1_2_IRQHandler>
	...

08001318 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800131c:	4b08      	ldr	r3, [pc, #32]	; (8001340 <HAL_Init+0x28>)
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	4a07      	ldr	r2, [pc, #28]	; (8001340 <HAL_Init+0x28>)
 8001322:	f043 0310 	orr.w	r3, r3, #16
 8001326:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001328:	2003      	movs	r0, #3
 800132a:	f000 f907 	bl	800153c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800132e:	200f      	movs	r0, #15
 8001330:	f000 f808 	bl	8001344 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001334:	f7ff fa1c 	bl	8000770 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001338:	2300      	movs	r3, #0
}
 800133a:	4618      	mov	r0, r3
 800133c:	bd80      	pop	{r7, pc}
 800133e:	bf00      	nop
 8001340:	40022000 	.word	0x40022000

08001344 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	b082      	sub	sp, #8
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800134c:	4b12      	ldr	r3, [pc, #72]	; (8001398 <HAL_InitTick+0x54>)
 800134e:	681a      	ldr	r2, [r3, #0]
 8001350:	4b12      	ldr	r3, [pc, #72]	; (800139c <HAL_InitTick+0x58>)
 8001352:	781b      	ldrb	r3, [r3, #0]
 8001354:	4619      	mov	r1, r3
 8001356:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800135a:	fbb3 f3f1 	udiv	r3, r3, r1
 800135e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001362:	4618      	mov	r0, r3
 8001364:	f000 f911 	bl	800158a <HAL_SYSTICK_Config>
 8001368:	4603      	mov	r3, r0
 800136a:	2b00      	cmp	r3, #0
 800136c:	d001      	beq.n	8001372 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800136e:	2301      	movs	r3, #1
 8001370:	e00e      	b.n	8001390 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	2b0f      	cmp	r3, #15
 8001376:	d80a      	bhi.n	800138e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001378:	2200      	movs	r2, #0
 800137a:	6879      	ldr	r1, [r7, #4]
 800137c:	f04f 30ff 	mov.w	r0, #4294967295
 8001380:	f000 f8e7 	bl	8001552 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001384:	4a06      	ldr	r2, [pc, #24]	; (80013a0 <HAL_InitTick+0x5c>)
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800138a:	2300      	movs	r3, #0
 800138c:	e000      	b.n	8001390 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800138e:	2301      	movs	r3, #1
}
 8001390:	4618      	mov	r0, r3
 8001392:	3708      	adds	r7, #8
 8001394:	46bd      	mov	sp, r7
 8001396:	bd80      	pop	{r7, pc}
 8001398:	20000004 	.word	0x20000004
 800139c:	20000038 	.word	0x20000038
 80013a0:	20000034 	.word	0x20000034

080013a4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013a4:	b480      	push	{r7}
 80013a6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80013a8:	4b05      	ldr	r3, [pc, #20]	; (80013c0 <HAL_IncTick+0x1c>)
 80013aa:	781b      	ldrb	r3, [r3, #0]
 80013ac:	461a      	mov	r2, r3
 80013ae:	4b05      	ldr	r3, [pc, #20]	; (80013c4 <HAL_IncTick+0x20>)
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	4413      	add	r3, r2
 80013b4:	4a03      	ldr	r2, [pc, #12]	; (80013c4 <HAL_IncTick+0x20>)
 80013b6:	6013      	str	r3, [r2, #0]
}
 80013b8:	bf00      	nop
 80013ba:	46bd      	mov	sp, r7
 80013bc:	bc80      	pop	{r7}
 80013be:	4770      	bx	lr
 80013c0:	20000038 	.word	0x20000038
 80013c4:	200000d4 	.word	0x200000d4

080013c8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013c8:	b480      	push	{r7}
 80013ca:	af00      	add	r7, sp, #0
  return uwTick;
 80013cc:	4b02      	ldr	r3, [pc, #8]	; (80013d8 <HAL_GetTick+0x10>)
 80013ce:	681b      	ldr	r3, [r3, #0]
}
 80013d0:	4618      	mov	r0, r3
 80013d2:	46bd      	mov	sp, r7
 80013d4:	bc80      	pop	{r7}
 80013d6:	4770      	bx	lr
 80013d8:	200000d4 	.word	0x200000d4

080013dc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013dc:	b480      	push	{r7}
 80013de:	b085      	sub	sp, #20
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	f003 0307 	and.w	r3, r3, #7
 80013ea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80013ec:	4b0c      	ldr	r3, [pc, #48]	; (8001420 <__NVIC_SetPriorityGrouping+0x44>)
 80013ee:	68db      	ldr	r3, [r3, #12]
 80013f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80013f2:	68ba      	ldr	r2, [r7, #8]
 80013f4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80013f8:	4013      	ands	r3, r2
 80013fa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001400:	68bb      	ldr	r3, [r7, #8]
 8001402:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001404:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001408:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800140c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800140e:	4a04      	ldr	r2, [pc, #16]	; (8001420 <__NVIC_SetPriorityGrouping+0x44>)
 8001410:	68bb      	ldr	r3, [r7, #8]
 8001412:	60d3      	str	r3, [r2, #12]
}
 8001414:	bf00      	nop
 8001416:	3714      	adds	r7, #20
 8001418:	46bd      	mov	sp, r7
 800141a:	bc80      	pop	{r7}
 800141c:	4770      	bx	lr
 800141e:	bf00      	nop
 8001420:	e000ed00 	.word	0xe000ed00

08001424 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001424:	b480      	push	{r7}
 8001426:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001428:	4b04      	ldr	r3, [pc, #16]	; (800143c <__NVIC_GetPriorityGrouping+0x18>)
 800142a:	68db      	ldr	r3, [r3, #12]
 800142c:	0a1b      	lsrs	r3, r3, #8
 800142e:	f003 0307 	and.w	r3, r3, #7
}
 8001432:	4618      	mov	r0, r3
 8001434:	46bd      	mov	sp, r7
 8001436:	bc80      	pop	{r7}
 8001438:	4770      	bx	lr
 800143a:	bf00      	nop
 800143c:	e000ed00 	.word	0xe000ed00

08001440 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001440:	b480      	push	{r7}
 8001442:	b083      	sub	sp, #12
 8001444:	af00      	add	r7, sp, #0
 8001446:	4603      	mov	r3, r0
 8001448:	6039      	str	r1, [r7, #0]
 800144a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800144c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001450:	2b00      	cmp	r3, #0
 8001452:	db0a      	blt.n	800146a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001454:	683b      	ldr	r3, [r7, #0]
 8001456:	b2da      	uxtb	r2, r3
 8001458:	490c      	ldr	r1, [pc, #48]	; (800148c <__NVIC_SetPriority+0x4c>)
 800145a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800145e:	0112      	lsls	r2, r2, #4
 8001460:	b2d2      	uxtb	r2, r2
 8001462:	440b      	add	r3, r1
 8001464:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001468:	e00a      	b.n	8001480 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800146a:	683b      	ldr	r3, [r7, #0]
 800146c:	b2da      	uxtb	r2, r3
 800146e:	4908      	ldr	r1, [pc, #32]	; (8001490 <__NVIC_SetPriority+0x50>)
 8001470:	79fb      	ldrb	r3, [r7, #7]
 8001472:	f003 030f 	and.w	r3, r3, #15
 8001476:	3b04      	subs	r3, #4
 8001478:	0112      	lsls	r2, r2, #4
 800147a:	b2d2      	uxtb	r2, r2
 800147c:	440b      	add	r3, r1
 800147e:	761a      	strb	r2, [r3, #24]
}
 8001480:	bf00      	nop
 8001482:	370c      	adds	r7, #12
 8001484:	46bd      	mov	sp, r7
 8001486:	bc80      	pop	{r7}
 8001488:	4770      	bx	lr
 800148a:	bf00      	nop
 800148c:	e000e100 	.word	0xe000e100
 8001490:	e000ed00 	.word	0xe000ed00

08001494 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001494:	b480      	push	{r7}
 8001496:	b089      	sub	sp, #36	; 0x24
 8001498:	af00      	add	r7, sp, #0
 800149a:	60f8      	str	r0, [r7, #12]
 800149c:	60b9      	str	r1, [r7, #8]
 800149e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	f003 0307 	and.w	r3, r3, #7
 80014a6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80014a8:	69fb      	ldr	r3, [r7, #28]
 80014aa:	f1c3 0307 	rsb	r3, r3, #7
 80014ae:	2b04      	cmp	r3, #4
 80014b0:	bf28      	it	cs
 80014b2:	2304      	movcs	r3, #4
 80014b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014b6:	69fb      	ldr	r3, [r7, #28]
 80014b8:	3304      	adds	r3, #4
 80014ba:	2b06      	cmp	r3, #6
 80014bc:	d902      	bls.n	80014c4 <NVIC_EncodePriority+0x30>
 80014be:	69fb      	ldr	r3, [r7, #28]
 80014c0:	3b03      	subs	r3, #3
 80014c2:	e000      	b.n	80014c6 <NVIC_EncodePriority+0x32>
 80014c4:	2300      	movs	r3, #0
 80014c6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014c8:	f04f 32ff 	mov.w	r2, #4294967295
 80014cc:	69bb      	ldr	r3, [r7, #24]
 80014ce:	fa02 f303 	lsl.w	r3, r2, r3
 80014d2:	43da      	mvns	r2, r3
 80014d4:	68bb      	ldr	r3, [r7, #8]
 80014d6:	401a      	ands	r2, r3
 80014d8:	697b      	ldr	r3, [r7, #20]
 80014da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80014dc:	f04f 31ff 	mov.w	r1, #4294967295
 80014e0:	697b      	ldr	r3, [r7, #20]
 80014e2:	fa01 f303 	lsl.w	r3, r1, r3
 80014e6:	43d9      	mvns	r1, r3
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014ec:	4313      	orrs	r3, r2
         );
}
 80014ee:	4618      	mov	r0, r3
 80014f0:	3724      	adds	r7, #36	; 0x24
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bc80      	pop	{r7}
 80014f6:	4770      	bx	lr

080014f8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b082      	sub	sp, #8
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	3b01      	subs	r3, #1
 8001504:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001508:	d301      	bcc.n	800150e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800150a:	2301      	movs	r3, #1
 800150c:	e00f      	b.n	800152e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800150e:	4a0a      	ldr	r2, [pc, #40]	; (8001538 <SysTick_Config+0x40>)
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	3b01      	subs	r3, #1
 8001514:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001516:	210f      	movs	r1, #15
 8001518:	f04f 30ff 	mov.w	r0, #4294967295
 800151c:	f7ff ff90 	bl	8001440 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001520:	4b05      	ldr	r3, [pc, #20]	; (8001538 <SysTick_Config+0x40>)
 8001522:	2200      	movs	r2, #0
 8001524:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001526:	4b04      	ldr	r3, [pc, #16]	; (8001538 <SysTick_Config+0x40>)
 8001528:	2207      	movs	r2, #7
 800152a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800152c:	2300      	movs	r3, #0
}
 800152e:	4618      	mov	r0, r3
 8001530:	3708      	adds	r7, #8
 8001532:	46bd      	mov	sp, r7
 8001534:	bd80      	pop	{r7, pc}
 8001536:	bf00      	nop
 8001538:	e000e010 	.word	0xe000e010

0800153c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b082      	sub	sp, #8
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001544:	6878      	ldr	r0, [r7, #4]
 8001546:	f7ff ff49 	bl	80013dc <__NVIC_SetPriorityGrouping>
}
 800154a:	bf00      	nop
 800154c:	3708      	adds	r7, #8
 800154e:	46bd      	mov	sp, r7
 8001550:	bd80      	pop	{r7, pc}

08001552 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001552:	b580      	push	{r7, lr}
 8001554:	b086      	sub	sp, #24
 8001556:	af00      	add	r7, sp, #0
 8001558:	4603      	mov	r3, r0
 800155a:	60b9      	str	r1, [r7, #8]
 800155c:	607a      	str	r2, [r7, #4]
 800155e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001560:	2300      	movs	r3, #0
 8001562:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001564:	f7ff ff5e 	bl	8001424 <__NVIC_GetPriorityGrouping>
 8001568:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800156a:	687a      	ldr	r2, [r7, #4]
 800156c:	68b9      	ldr	r1, [r7, #8]
 800156e:	6978      	ldr	r0, [r7, #20]
 8001570:	f7ff ff90 	bl	8001494 <NVIC_EncodePriority>
 8001574:	4602      	mov	r2, r0
 8001576:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800157a:	4611      	mov	r1, r2
 800157c:	4618      	mov	r0, r3
 800157e:	f7ff ff5f 	bl	8001440 <__NVIC_SetPriority>
}
 8001582:	bf00      	nop
 8001584:	3718      	adds	r7, #24
 8001586:	46bd      	mov	sp, r7
 8001588:	bd80      	pop	{r7, pc}

0800158a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800158a:	b580      	push	{r7, lr}
 800158c:	b082      	sub	sp, #8
 800158e:	af00      	add	r7, sp, #0
 8001590:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001592:	6878      	ldr	r0, [r7, #4]
 8001594:	f7ff ffb0 	bl	80014f8 <SysTick_Config>
 8001598:	4603      	mov	r3, r0
}
 800159a:	4618      	mov	r0, r3
 800159c:	3708      	adds	r7, #8
 800159e:	46bd      	mov	sp, r7
 80015a0:	bd80      	pop	{r7, pc}
	...

080015a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80015a4:	b480      	push	{r7}
 80015a6:	b08b      	sub	sp, #44	; 0x2c
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
 80015ac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80015ae:	2300      	movs	r3, #0
 80015b0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80015b2:	2300      	movs	r3, #0
 80015b4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80015b6:	e169      	b.n	800188c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80015b8:	2201      	movs	r2, #1
 80015ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015bc:	fa02 f303 	lsl.w	r3, r2, r3
 80015c0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80015c2:	683b      	ldr	r3, [r7, #0]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	69fa      	ldr	r2, [r7, #28]
 80015c8:	4013      	ands	r3, r2
 80015ca:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80015cc:	69ba      	ldr	r2, [r7, #24]
 80015ce:	69fb      	ldr	r3, [r7, #28]
 80015d0:	429a      	cmp	r2, r3
 80015d2:	f040 8158 	bne.w	8001886 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80015d6:	683b      	ldr	r3, [r7, #0]
 80015d8:	685b      	ldr	r3, [r3, #4]
 80015da:	4a9a      	ldr	r2, [pc, #616]	; (8001844 <HAL_GPIO_Init+0x2a0>)
 80015dc:	4293      	cmp	r3, r2
 80015de:	d05e      	beq.n	800169e <HAL_GPIO_Init+0xfa>
 80015e0:	4a98      	ldr	r2, [pc, #608]	; (8001844 <HAL_GPIO_Init+0x2a0>)
 80015e2:	4293      	cmp	r3, r2
 80015e4:	d875      	bhi.n	80016d2 <HAL_GPIO_Init+0x12e>
 80015e6:	4a98      	ldr	r2, [pc, #608]	; (8001848 <HAL_GPIO_Init+0x2a4>)
 80015e8:	4293      	cmp	r3, r2
 80015ea:	d058      	beq.n	800169e <HAL_GPIO_Init+0xfa>
 80015ec:	4a96      	ldr	r2, [pc, #600]	; (8001848 <HAL_GPIO_Init+0x2a4>)
 80015ee:	4293      	cmp	r3, r2
 80015f0:	d86f      	bhi.n	80016d2 <HAL_GPIO_Init+0x12e>
 80015f2:	4a96      	ldr	r2, [pc, #600]	; (800184c <HAL_GPIO_Init+0x2a8>)
 80015f4:	4293      	cmp	r3, r2
 80015f6:	d052      	beq.n	800169e <HAL_GPIO_Init+0xfa>
 80015f8:	4a94      	ldr	r2, [pc, #592]	; (800184c <HAL_GPIO_Init+0x2a8>)
 80015fa:	4293      	cmp	r3, r2
 80015fc:	d869      	bhi.n	80016d2 <HAL_GPIO_Init+0x12e>
 80015fe:	4a94      	ldr	r2, [pc, #592]	; (8001850 <HAL_GPIO_Init+0x2ac>)
 8001600:	4293      	cmp	r3, r2
 8001602:	d04c      	beq.n	800169e <HAL_GPIO_Init+0xfa>
 8001604:	4a92      	ldr	r2, [pc, #584]	; (8001850 <HAL_GPIO_Init+0x2ac>)
 8001606:	4293      	cmp	r3, r2
 8001608:	d863      	bhi.n	80016d2 <HAL_GPIO_Init+0x12e>
 800160a:	4a92      	ldr	r2, [pc, #584]	; (8001854 <HAL_GPIO_Init+0x2b0>)
 800160c:	4293      	cmp	r3, r2
 800160e:	d046      	beq.n	800169e <HAL_GPIO_Init+0xfa>
 8001610:	4a90      	ldr	r2, [pc, #576]	; (8001854 <HAL_GPIO_Init+0x2b0>)
 8001612:	4293      	cmp	r3, r2
 8001614:	d85d      	bhi.n	80016d2 <HAL_GPIO_Init+0x12e>
 8001616:	2b12      	cmp	r3, #18
 8001618:	d82a      	bhi.n	8001670 <HAL_GPIO_Init+0xcc>
 800161a:	2b12      	cmp	r3, #18
 800161c:	d859      	bhi.n	80016d2 <HAL_GPIO_Init+0x12e>
 800161e:	a201      	add	r2, pc, #4	; (adr r2, 8001624 <HAL_GPIO_Init+0x80>)
 8001620:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001624:	0800169f 	.word	0x0800169f
 8001628:	08001679 	.word	0x08001679
 800162c:	0800168b 	.word	0x0800168b
 8001630:	080016cd 	.word	0x080016cd
 8001634:	080016d3 	.word	0x080016d3
 8001638:	080016d3 	.word	0x080016d3
 800163c:	080016d3 	.word	0x080016d3
 8001640:	080016d3 	.word	0x080016d3
 8001644:	080016d3 	.word	0x080016d3
 8001648:	080016d3 	.word	0x080016d3
 800164c:	080016d3 	.word	0x080016d3
 8001650:	080016d3 	.word	0x080016d3
 8001654:	080016d3 	.word	0x080016d3
 8001658:	080016d3 	.word	0x080016d3
 800165c:	080016d3 	.word	0x080016d3
 8001660:	080016d3 	.word	0x080016d3
 8001664:	080016d3 	.word	0x080016d3
 8001668:	08001681 	.word	0x08001681
 800166c:	08001695 	.word	0x08001695
 8001670:	4a79      	ldr	r2, [pc, #484]	; (8001858 <HAL_GPIO_Init+0x2b4>)
 8001672:	4293      	cmp	r3, r2
 8001674:	d013      	beq.n	800169e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001676:	e02c      	b.n	80016d2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001678:	683b      	ldr	r3, [r7, #0]
 800167a:	68db      	ldr	r3, [r3, #12]
 800167c:	623b      	str	r3, [r7, #32]
          break;
 800167e:	e029      	b.n	80016d4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001680:	683b      	ldr	r3, [r7, #0]
 8001682:	68db      	ldr	r3, [r3, #12]
 8001684:	3304      	adds	r3, #4
 8001686:	623b      	str	r3, [r7, #32]
          break;
 8001688:	e024      	b.n	80016d4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800168a:	683b      	ldr	r3, [r7, #0]
 800168c:	68db      	ldr	r3, [r3, #12]
 800168e:	3308      	adds	r3, #8
 8001690:	623b      	str	r3, [r7, #32]
          break;
 8001692:	e01f      	b.n	80016d4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001694:	683b      	ldr	r3, [r7, #0]
 8001696:	68db      	ldr	r3, [r3, #12]
 8001698:	330c      	adds	r3, #12
 800169a:	623b      	str	r3, [r7, #32]
          break;
 800169c:	e01a      	b.n	80016d4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800169e:	683b      	ldr	r3, [r7, #0]
 80016a0:	689b      	ldr	r3, [r3, #8]
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d102      	bne.n	80016ac <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80016a6:	2304      	movs	r3, #4
 80016a8:	623b      	str	r3, [r7, #32]
          break;
 80016aa:	e013      	b.n	80016d4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80016ac:	683b      	ldr	r3, [r7, #0]
 80016ae:	689b      	ldr	r3, [r3, #8]
 80016b0:	2b01      	cmp	r3, #1
 80016b2:	d105      	bne.n	80016c0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80016b4:	2308      	movs	r3, #8
 80016b6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	69fa      	ldr	r2, [r7, #28]
 80016bc:	611a      	str	r2, [r3, #16]
          break;
 80016be:	e009      	b.n	80016d4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80016c0:	2308      	movs	r3, #8
 80016c2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	69fa      	ldr	r2, [r7, #28]
 80016c8:	615a      	str	r2, [r3, #20]
          break;
 80016ca:	e003      	b.n	80016d4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80016cc:	2300      	movs	r3, #0
 80016ce:	623b      	str	r3, [r7, #32]
          break;
 80016d0:	e000      	b.n	80016d4 <HAL_GPIO_Init+0x130>
          break;
 80016d2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80016d4:	69bb      	ldr	r3, [r7, #24]
 80016d6:	2bff      	cmp	r3, #255	; 0xff
 80016d8:	d801      	bhi.n	80016de <HAL_GPIO_Init+0x13a>
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	e001      	b.n	80016e2 <HAL_GPIO_Init+0x13e>
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	3304      	adds	r3, #4
 80016e2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80016e4:	69bb      	ldr	r3, [r7, #24]
 80016e6:	2bff      	cmp	r3, #255	; 0xff
 80016e8:	d802      	bhi.n	80016f0 <HAL_GPIO_Init+0x14c>
 80016ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016ec:	009b      	lsls	r3, r3, #2
 80016ee:	e002      	b.n	80016f6 <HAL_GPIO_Init+0x152>
 80016f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016f2:	3b08      	subs	r3, #8
 80016f4:	009b      	lsls	r3, r3, #2
 80016f6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80016f8:	697b      	ldr	r3, [r7, #20]
 80016fa:	681a      	ldr	r2, [r3, #0]
 80016fc:	210f      	movs	r1, #15
 80016fe:	693b      	ldr	r3, [r7, #16]
 8001700:	fa01 f303 	lsl.w	r3, r1, r3
 8001704:	43db      	mvns	r3, r3
 8001706:	401a      	ands	r2, r3
 8001708:	6a39      	ldr	r1, [r7, #32]
 800170a:	693b      	ldr	r3, [r7, #16]
 800170c:	fa01 f303 	lsl.w	r3, r1, r3
 8001710:	431a      	orrs	r2, r3
 8001712:	697b      	ldr	r3, [r7, #20]
 8001714:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001716:	683b      	ldr	r3, [r7, #0]
 8001718:	685b      	ldr	r3, [r3, #4]
 800171a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800171e:	2b00      	cmp	r3, #0
 8001720:	f000 80b1 	beq.w	8001886 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001724:	4b4d      	ldr	r3, [pc, #308]	; (800185c <HAL_GPIO_Init+0x2b8>)
 8001726:	699b      	ldr	r3, [r3, #24]
 8001728:	4a4c      	ldr	r2, [pc, #304]	; (800185c <HAL_GPIO_Init+0x2b8>)
 800172a:	f043 0301 	orr.w	r3, r3, #1
 800172e:	6193      	str	r3, [r2, #24]
 8001730:	4b4a      	ldr	r3, [pc, #296]	; (800185c <HAL_GPIO_Init+0x2b8>)
 8001732:	699b      	ldr	r3, [r3, #24]
 8001734:	f003 0301 	and.w	r3, r3, #1
 8001738:	60bb      	str	r3, [r7, #8]
 800173a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800173c:	4a48      	ldr	r2, [pc, #288]	; (8001860 <HAL_GPIO_Init+0x2bc>)
 800173e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001740:	089b      	lsrs	r3, r3, #2
 8001742:	3302      	adds	r3, #2
 8001744:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001748:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800174a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800174c:	f003 0303 	and.w	r3, r3, #3
 8001750:	009b      	lsls	r3, r3, #2
 8001752:	220f      	movs	r2, #15
 8001754:	fa02 f303 	lsl.w	r3, r2, r3
 8001758:	43db      	mvns	r3, r3
 800175a:	68fa      	ldr	r2, [r7, #12]
 800175c:	4013      	ands	r3, r2
 800175e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	4a40      	ldr	r2, [pc, #256]	; (8001864 <HAL_GPIO_Init+0x2c0>)
 8001764:	4293      	cmp	r3, r2
 8001766:	d013      	beq.n	8001790 <HAL_GPIO_Init+0x1ec>
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	4a3f      	ldr	r2, [pc, #252]	; (8001868 <HAL_GPIO_Init+0x2c4>)
 800176c:	4293      	cmp	r3, r2
 800176e:	d00d      	beq.n	800178c <HAL_GPIO_Init+0x1e8>
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	4a3e      	ldr	r2, [pc, #248]	; (800186c <HAL_GPIO_Init+0x2c8>)
 8001774:	4293      	cmp	r3, r2
 8001776:	d007      	beq.n	8001788 <HAL_GPIO_Init+0x1e4>
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	4a3d      	ldr	r2, [pc, #244]	; (8001870 <HAL_GPIO_Init+0x2cc>)
 800177c:	4293      	cmp	r3, r2
 800177e:	d101      	bne.n	8001784 <HAL_GPIO_Init+0x1e0>
 8001780:	2303      	movs	r3, #3
 8001782:	e006      	b.n	8001792 <HAL_GPIO_Init+0x1ee>
 8001784:	2304      	movs	r3, #4
 8001786:	e004      	b.n	8001792 <HAL_GPIO_Init+0x1ee>
 8001788:	2302      	movs	r3, #2
 800178a:	e002      	b.n	8001792 <HAL_GPIO_Init+0x1ee>
 800178c:	2301      	movs	r3, #1
 800178e:	e000      	b.n	8001792 <HAL_GPIO_Init+0x1ee>
 8001790:	2300      	movs	r3, #0
 8001792:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001794:	f002 0203 	and.w	r2, r2, #3
 8001798:	0092      	lsls	r2, r2, #2
 800179a:	4093      	lsls	r3, r2
 800179c:	68fa      	ldr	r2, [r7, #12]
 800179e:	4313      	orrs	r3, r2
 80017a0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80017a2:	492f      	ldr	r1, [pc, #188]	; (8001860 <HAL_GPIO_Init+0x2bc>)
 80017a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017a6:	089b      	lsrs	r3, r3, #2
 80017a8:	3302      	adds	r3, #2
 80017aa:	68fa      	ldr	r2, [r7, #12]
 80017ac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80017b0:	683b      	ldr	r3, [r7, #0]
 80017b2:	685b      	ldr	r3, [r3, #4]
 80017b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d006      	beq.n	80017ca <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80017bc:	4b2d      	ldr	r3, [pc, #180]	; (8001874 <HAL_GPIO_Init+0x2d0>)
 80017be:	681a      	ldr	r2, [r3, #0]
 80017c0:	492c      	ldr	r1, [pc, #176]	; (8001874 <HAL_GPIO_Init+0x2d0>)
 80017c2:	69bb      	ldr	r3, [r7, #24]
 80017c4:	4313      	orrs	r3, r2
 80017c6:	600b      	str	r3, [r1, #0]
 80017c8:	e006      	b.n	80017d8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80017ca:	4b2a      	ldr	r3, [pc, #168]	; (8001874 <HAL_GPIO_Init+0x2d0>)
 80017cc:	681a      	ldr	r2, [r3, #0]
 80017ce:	69bb      	ldr	r3, [r7, #24]
 80017d0:	43db      	mvns	r3, r3
 80017d2:	4928      	ldr	r1, [pc, #160]	; (8001874 <HAL_GPIO_Init+0x2d0>)
 80017d4:	4013      	ands	r3, r2
 80017d6:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80017d8:	683b      	ldr	r3, [r7, #0]
 80017da:	685b      	ldr	r3, [r3, #4]
 80017dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d006      	beq.n	80017f2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80017e4:	4b23      	ldr	r3, [pc, #140]	; (8001874 <HAL_GPIO_Init+0x2d0>)
 80017e6:	685a      	ldr	r2, [r3, #4]
 80017e8:	4922      	ldr	r1, [pc, #136]	; (8001874 <HAL_GPIO_Init+0x2d0>)
 80017ea:	69bb      	ldr	r3, [r7, #24]
 80017ec:	4313      	orrs	r3, r2
 80017ee:	604b      	str	r3, [r1, #4]
 80017f0:	e006      	b.n	8001800 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80017f2:	4b20      	ldr	r3, [pc, #128]	; (8001874 <HAL_GPIO_Init+0x2d0>)
 80017f4:	685a      	ldr	r2, [r3, #4]
 80017f6:	69bb      	ldr	r3, [r7, #24]
 80017f8:	43db      	mvns	r3, r3
 80017fa:	491e      	ldr	r1, [pc, #120]	; (8001874 <HAL_GPIO_Init+0x2d0>)
 80017fc:	4013      	ands	r3, r2
 80017fe:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001800:	683b      	ldr	r3, [r7, #0]
 8001802:	685b      	ldr	r3, [r3, #4]
 8001804:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001808:	2b00      	cmp	r3, #0
 800180a:	d006      	beq.n	800181a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800180c:	4b19      	ldr	r3, [pc, #100]	; (8001874 <HAL_GPIO_Init+0x2d0>)
 800180e:	689a      	ldr	r2, [r3, #8]
 8001810:	4918      	ldr	r1, [pc, #96]	; (8001874 <HAL_GPIO_Init+0x2d0>)
 8001812:	69bb      	ldr	r3, [r7, #24]
 8001814:	4313      	orrs	r3, r2
 8001816:	608b      	str	r3, [r1, #8]
 8001818:	e006      	b.n	8001828 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800181a:	4b16      	ldr	r3, [pc, #88]	; (8001874 <HAL_GPIO_Init+0x2d0>)
 800181c:	689a      	ldr	r2, [r3, #8]
 800181e:	69bb      	ldr	r3, [r7, #24]
 8001820:	43db      	mvns	r3, r3
 8001822:	4914      	ldr	r1, [pc, #80]	; (8001874 <HAL_GPIO_Init+0x2d0>)
 8001824:	4013      	ands	r3, r2
 8001826:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001828:	683b      	ldr	r3, [r7, #0]
 800182a:	685b      	ldr	r3, [r3, #4]
 800182c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001830:	2b00      	cmp	r3, #0
 8001832:	d021      	beq.n	8001878 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001834:	4b0f      	ldr	r3, [pc, #60]	; (8001874 <HAL_GPIO_Init+0x2d0>)
 8001836:	68da      	ldr	r2, [r3, #12]
 8001838:	490e      	ldr	r1, [pc, #56]	; (8001874 <HAL_GPIO_Init+0x2d0>)
 800183a:	69bb      	ldr	r3, [r7, #24]
 800183c:	4313      	orrs	r3, r2
 800183e:	60cb      	str	r3, [r1, #12]
 8001840:	e021      	b.n	8001886 <HAL_GPIO_Init+0x2e2>
 8001842:	bf00      	nop
 8001844:	10320000 	.word	0x10320000
 8001848:	10310000 	.word	0x10310000
 800184c:	10220000 	.word	0x10220000
 8001850:	10210000 	.word	0x10210000
 8001854:	10120000 	.word	0x10120000
 8001858:	10110000 	.word	0x10110000
 800185c:	40021000 	.word	0x40021000
 8001860:	40010000 	.word	0x40010000
 8001864:	40010800 	.word	0x40010800
 8001868:	40010c00 	.word	0x40010c00
 800186c:	40011000 	.word	0x40011000
 8001870:	40011400 	.word	0x40011400
 8001874:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001878:	4b0b      	ldr	r3, [pc, #44]	; (80018a8 <HAL_GPIO_Init+0x304>)
 800187a:	68da      	ldr	r2, [r3, #12]
 800187c:	69bb      	ldr	r3, [r7, #24]
 800187e:	43db      	mvns	r3, r3
 8001880:	4909      	ldr	r1, [pc, #36]	; (80018a8 <HAL_GPIO_Init+0x304>)
 8001882:	4013      	ands	r3, r2
 8001884:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001888:	3301      	adds	r3, #1
 800188a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800188c:	683b      	ldr	r3, [r7, #0]
 800188e:	681a      	ldr	r2, [r3, #0]
 8001890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001892:	fa22 f303 	lsr.w	r3, r2, r3
 8001896:	2b00      	cmp	r3, #0
 8001898:	f47f ae8e 	bne.w	80015b8 <HAL_GPIO_Init+0x14>
  }
}
 800189c:	bf00      	nop
 800189e:	bf00      	nop
 80018a0:	372c      	adds	r7, #44	; 0x2c
 80018a2:	46bd      	mov	sp, r7
 80018a4:	bc80      	pop	{r7}
 80018a6:	4770      	bx	lr
 80018a8:	40010400 	.word	0x40010400

080018ac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80018ac:	b480      	push	{r7}
 80018ae:	b083      	sub	sp, #12
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
 80018b4:	460b      	mov	r3, r1
 80018b6:	807b      	strh	r3, [r7, #2]
 80018b8:	4613      	mov	r3, r2
 80018ba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80018bc:	787b      	ldrb	r3, [r7, #1]
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d003      	beq.n	80018ca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80018c2:	887a      	ldrh	r2, [r7, #2]
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80018c8:	e003      	b.n	80018d2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80018ca:	887b      	ldrh	r3, [r7, #2]
 80018cc:	041a      	lsls	r2, r3, #16
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	611a      	str	r2, [r3, #16]
}
 80018d2:	bf00      	nop
 80018d4:	370c      	adds	r7, #12
 80018d6:	46bd      	mov	sp, r7
 80018d8:	bc80      	pop	{r7}
 80018da:	4770      	bx	lr

080018dc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	b086      	sub	sp, #24
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d101      	bne.n	80018ee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80018ea:	2301      	movs	r3, #1
 80018ec:	e272      	b.n	8001dd4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	f003 0301 	and.w	r3, r3, #1
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	f000 8087 	beq.w	8001a0a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80018fc:	4b92      	ldr	r3, [pc, #584]	; (8001b48 <HAL_RCC_OscConfig+0x26c>)
 80018fe:	685b      	ldr	r3, [r3, #4]
 8001900:	f003 030c 	and.w	r3, r3, #12
 8001904:	2b04      	cmp	r3, #4
 8001906:	d00c      	beq.n	8001922 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001908:	4b8f      	ldr	r3, [pc, #572]	; (8001b48 <HAL_RCC_OscConfig+0x26c>)
 800190a:	685b      	ldr	r3, [r3, #4]
 800190c:	f003 030c 	and.w	r3, r3, #12
 8001910:	2b08      	cmp	r3, #8
 8001912:	d112      	bne.n	800193a <HAL_RCC_OscConfig+0x5e>
 8001914:	4b8c      	ldr	r3, [pc, #560]	; (8001b48 <HAL_RCC_OscConfig+0x26c>)
 8001916:	685b      	ldr	r3, [r3, #4]
 8001918:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800191c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001920:	d10b      	bne.n	800193a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001922:	4b89      	ldr	r3, [pc, #548]	; (8001b48 <HAL_RCC_OscConfig+0x26c>)
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800192a:	2b00      	cmp	r3, #0
 800192c:	d06c      	beq.n	8001a08 <HAL_RCC_OscConfig+0x12c>
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	685b      	ldr	r3, [r3, #4]
 8001932:	2b00      	cmp	r3, #0
 8001934:	d168      	bne.n	8001a08 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001936:	2301      	movs	r3, #1
 8001938:	e24c      	b.n	8001dd4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	685b      	ldr	r3, [r3, #4]
 800193e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001942:	d106      	bne.n	8001952 <HAL_RCC_OscConfig+0x76>
 8001944:	4b80      	ldr	r3, [pc, #512]	; (8001b48 <HAL_RCC_OscConfig+0x26c>)
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	4a7f      	ldr	r2, [pc, #508]	; (8001b48 <HAL_RCC_OscConfig+0x26c>)
 800194a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800194e:	6013      	str	r3, [r2, #0]
 8001950:	e02e      	b.n	80019b0 <HAL_RCC_OscConfig+0xd4>
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	685b      	ldr	r3, [r3, #4]
 8001956:	2b00      	cmp	r3, #0
 8001958:	d10c      	bne.n	8001974 <HAL_RCC_OscConfig+0x98>
 800195a:	4b7b      	ldr	r3, [pc, #492]	; (8001b48 <HAL_RCC_OscConfig+0x26c>)
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	4a7a      	ldr	r2, [pc, #488]	; (8001b48 <HAL_RCC_OscConfig+0x26c>)
 8001960:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001964:	6013      	str	r3, [r2, #0]
 8001966:	4b78      	ldr	r3, [pc, #480]	; (8001b48 <HAL_RCC_OscConfig+0x26c>)
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	4a77      	ldr	r2, [pc, #476]	; (8001b48 <HAL_RCC_OscConfig+0x26c>)
 800196c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001970:	6013      	str	r3, [r2, #0]
 8001972:	e01d      	b.n	80019b0 <HAL_RCC_OscConfig+0xd4>
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	685b      	ldr	r3, [r3, #4]
 8001978:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800197c:	d10c      	bne.n	8001998 <HAL_RCC_OscConfig+0xbc>
 800197e:	4b72      	ldr	r3, [pc, #456]	; (8001b48 <HAL_RCC_OscConfig+0x26c>)
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	4a71      	ldr	r2, [pc, #452]	; (8001b48 <HAL_RCC_OscConfig+0x26c>)
 8001984:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001988:	6013      	str	r3, [r2, #0]
 800198a:	4b6f      	ldr	r3, [pc, #444]	; (8001b48 <HAL_RCC_OscConfig+0x26c>)
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	4a6e      	ldr	r2, [pc, #440]	; (8001b48 <HAL_RCC_OscConfig+0x26c>)
 8001990:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001994:	6013      	str	r3, [r2, #0]
 8001996:	e00b      	b.n	80019b0 <HAL_RCC_OscConfig+0xd4>
 8001998:	4b6b      	ldr	r3, [pc, #428]	; (8001b48 <HAL_RCC_OscConfig+0x26c>)
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	4a6a      	ldr	r2, [pc, #424]	; (8001b48 <HAL_RCC_OscConfig+0x26c>)
 800199e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80019a2:	6013      	str	r3, [r2, #0]
 80019a4:	4b68      	ldr	r3, [pc, #416]	; (8001b48 <HAL_RCC_OscConfig+0x26c>)
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	4a67      	ldr	r2, [pc, #412]	; (8001b48 <HAL_RCC_OscConfig+0x26c>)
 80019aa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80019ae:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	685b      	ldr	r3, [r3, #4]
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d013      	beq.n	80019e0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019b8:	f7ff fd06 	bl	80013c8 <HAL_GetTick>
 80019bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019be:	e008      	b.n	80019d2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80019c0:	f7ff fd02 	bl	80013c8 <HAL_GetTick>
 80019c4:	4602      	mov	r2, r0
 80019c6:	693b      	ldr	r3, [r7, #16]
 80019c8:	1ad3      	subs	r3, r2, r3
 80019ca:	2b64      	cmp	r3, #100	; 0x64
 80019cc:	d901      	bls.n	80019d2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80019ce:	2303      	movs	r3, #3
 80019d0:	e200      	b.n	8001dd4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019d2:	4b5d      	ldr	r3, [pc, #372]	; (8001b48 <HAL_RCC_OscConfig+0x26c>)
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d0f0      	beq.n	80019c0 <HAL_RCC_OscConfig+0xe4>
 80019de:	e014      	b.n	8001a0a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019e0:	f7ff fcf2 	bl	80013c8 <HAL_GetTick>
 80019e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80019e6:	e008      	b.n	80019fa <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80019e8:	f7ff fcee 	bl	80013c8 <HAL_GetTick>
 80019ec:	4602      	mov	r2, r0
 80019ee:	693b      	ldr	r3, [r7, #16]
 80019f0:	1ad3      	subs	r3, r2, r3
 80019f2:	2b64      	cmp	r3, #100	; 0x64
 80019f4:	d901      	bls.n	80019fa <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80019f6:	2303      	movs	r3, #3
 80019f8:	e1ec      	b.n	8001dd4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80019fa:	4b53      	ldr	r3, [pc, #332]	; (8001b48 <HAL_RCC_OscConfig+0x26c>)
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d1f0      	bne.n	80019e8 <HAL_RCC_OscConfig+0x10c>
 8001a06:	e000      	b.n	8001a0a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a08:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	f003 0302 	and.w	r3, r3, #2
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d063      	beq.n	8001ade <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001a16:	4b4c      	ldr	r3, [pc, #304]	; (8001b48 <HAL_RCC_OscConfig+0x26c>)
 8001a18:	685b      	ldr	r3, [r3, #4]
 8001a1a:	f003 030c 	and.w	r3, r3, #12
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d00b      	beq.n	8001a3a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001a22:	4b49      	ldr	r3, [pc, #292]	; (8001b48 <HAL_RCC_OscConfig+0x26c>)
 8001a24:	685b      	ldr	r3, [r3, #4]
 8001a26:	f003 030c 	and.w	r3, r3, #12
 8001a2a:	2b08      	cmp	r3, #8
 8001a2c:	d11c      	bne.n	8001a68 <HAL_RCC_OscConfig+0x18c>
 8001a2e:	4b46      	ldr	r3, [pc, #280]	; (8001b48 <HAL_RCC_OscConfig+0x26c>)
 8001a30:	685b      	ldr	r3, [r3, #4]
 8001a32:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d116      	bne.n	8001a68 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a3a:	4b43      	ldr	r3, [pc, #268]	; (8001b48 <HAL_RCC_OscConfig+0x26c>)
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	f003 0302 	and.w	r3, r3, #2
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d005      	beq.n	8001a52 <HAL_RCC_OscConfig+0x176>
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	691b      	ldr	r3, [r3, #16]
 8001a4a:	2b01      	cmp	r3, #1
 8001a4c:	d001      	beq.n	8001a52 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001a4e:	2301      	movs	r3, #1
 8001a50:	e1c0      	b.n	8001dd4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a52:	4b3d      	ldr	r3, [pc, #244]	; (8001b48 <HAL_RCC_OscConfig+0x26c>)
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	695b      	ldr	r3, [r3, #20]
 8001a5e:	00db      	lsls	r3, r3, #3
 8001a60:	4939      	ldr	r1, [pc, #228]	; (8001b48 <HAL_RCC_OscConfig+0x26c>)
 8001a62:	4313      	orrs	r3, r2
 8001a64:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a66:	e03a      	b.n	8001ade <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	691b      	ldr	r3, [r3, #16]
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d020      	beq.n	8001ab2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001a70:	4b36      	ldr	r3, [pc, #216]	; (8001b4c <HAL_RCC_OscConfig+0x270>)
 8001a72:	2201      	movs	r2, #1
 8001a74:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a76:	f7ff fca7 	bl	80013c8 <HAL_GetTick>
 8001a7a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a7c:	e008      	b.n	8001a90 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a7e:	f7ff fca3 	bl	80013c8 <HAL_GetTick>
 8001a82:	4602      	mov	r2, r0
 8001a84:	693b      	ldr	r3, [r7, #16]
 8001a86:	1ad3      	subs	r3, r2, r3
 8001a88:	2b02      	cmp	r3, #2
 8001a8a:	d901      	bls.n	8001a90 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001a8c:	2303      	movs	r3, #3
 8001a8e:	e1a1      	b.n	8001dd4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a90:	4b2d      	ldr	r3, [pc, #180]	; (8001b48 <HAL_RCC_OscConfig+0x26c>)
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	f003 0302 	and.w	r3, r3, #2
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d0f0      	beq.n	8001a7e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a9c:	4b2a      	ldr	r3, [pc, #168]	; (8001b48 <HAL_RCC_OscConfig+0x26c>)
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	695b      	ldr	r3, [r3, #20]
 8001aa8:	00db      	lsls	r3, r3, #3
 8001aaa:	4927      	ldr	r1, [pc, #156]	; (8001b48 <HAL_RCC_OscConfig+0x26c>)
 8001aac:	4313      	orrs	r3, r2
 8001aae:	600b      	str	r3, [r1, #0]
 8001ab0:	e015      	b.n	8001ade <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001ab2:	4b26      	ldr	r3, [pc, #152]	; (8001b4c <HAL_RCC_OscConfig+0x270>)
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ab8:	f7ff fc86 	bl	80013c8 <HAL_GetTick>
 8001abc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001abe:	e008      	b.n	8001ad2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ac0:	f7ff fc82 	bl	80013c8 <HAL_GetTick>
 8001ac4:	4602      	mov	r2, r0
 8001ac6:	693b      	ldr	r3, [r7, #16]
 8001ac8:	1ad3      	subs	r3, r2, r3
 8001aca:	2b02      	cmp	r3, #2
 8001acc:	d901      	bls.n	8001ad2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001ace:	2303      	movs	r3, #3
 8001ad0:	e180      	b.n	8001dd4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ad2:	4b1d      	ldr	r3, [pc, #116]	; (8001b48 <HAL_RCC_OscConfig+0x26c>)
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	f003 0302 	and.w	r3, r3, #2
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d1f0      	bne.n	8001ac0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	f003 0308 	and.w	r3, r3, #8
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d03a      	beq.n	8001b60 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	699b      	ldr	r3, [r3, #24]
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d019      	beq.n	8001b26 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001af2:	4b17      	ldr	r3, [pc, #92]	; (8001b50 <HAL_RCC_OscConfig+0x274>)
 8001af4:	2201      	movs	r2, #1
 8001af6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001af8:	f7ff fc66 	bl	80013c8 <HAL_GetTick>
 8001afc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001afe:	e008      	b.n	8001b12 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b00:	f7ff fc62 	bl	80013c8 <HAL_GetTick>
 8001b04:	4602      	mov	r2, r0
 8001b06:	693b      	ldr	r3, [r7, #16]
 8001b08:	1ad3      	subs	r3, r2, r3
 8001b0a:	2b02      	cmp	r3, #2
 8001b0c:	d901      	bls.n	8001b12 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001b0e:	2303      	movs	r3, #3
 8001b10:	e160      	b.n	8001dd4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b12:	4b0d      	ldr	r3, [pc, #52]	; (8001b48 <HAL_RCC_OscConfig+0x26c>)
 8001b14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b16:	f003 0302 	and.w	r3, r3, #2
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d0f0      	beq.n	8001b00 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001b1e:	2001      	movs	r0, #1
 8001b20:	f000 faa6 	bl	8002070 <RCC_Delay>
 8001b24:	e01c      	b.n	8001b60 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001b26:	4b0a      	ldr	r3, [pc, #40]	; (8001b50 <HAL_RCC_OscConfig+0x274>)
 8001b28:	2200      	movs	r2, #0
 8001b2a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b2c:	f7ff fc4c 	bl	80013c8 <HAL_GetTick>
 8001b30:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b32:	e00f      	b.n	8001b54 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b34:	f7ff fc48 	bl	80013c8 <HAL_GetTick>
 8001b38:	4602      	mov	r2, r0
 8001b3a:	693b      	ldr	r3, [r7, #16]
 8001b3c:	1ad3      	subs	r3, r2, r3
 8001b3e:	2b02      	cmp	r3, #2
 8001b40:	d908      	bls.n	8001b54 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001b42:	2303      	movs	r3, #3
 8001b44:	e146      	b.n	8001dd4 <HAL_RCC_OscConfig+0x4f8>
 8001b46:	bf00      	nop
 8001b48:	40021000 	.word	0x40021000
 8001b4c:	42420000 	.word	0x42420000
 8001b50:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b54:	4b92      	ldr	r3, [pc, #584]	; (8001da0 <HAL_RCC_OscConfig+0x4c4>)
 8001b56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b58:	f003 0302 	and.w	r3, r3, #2
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d1e9      	bne.n	8001b34 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	f003 0304 	and.w	r3, r3, #4
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	f000 80a6 	beq.w	8001cba <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001b6e:	2300      	movs	r3, #0
 8001b70:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001b72:	4b8b      	ldr	r3, [pc, #556]	; (8001da0 <HAL_RCC_OscConfig+0x4c4>)
 8001b74:	69db      	ldr	r3, [r3, #28]
 8001b76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d10d      	bne.n	8001b9a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b7e:	4b88      	ldr	r3, [pc, #544]	; (8001da0 <HAL_RCC_OscConfig+0x4c4>)
 8001b80:	69db      	ldr	r3, [r3, #28]
 8001b82:	4a87      	ldr	r2, [pc, #540]	; (8001da0 <HAL_RCC_OscConfig+0x4c4>)
 8001b84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b88:	61d3      	str	r3, [r2, #28]
 8001b8a:	4b85      	ldr	r3, [pc, #532]	; (8001da0 <HAL_RCC_OscConfig+0x4c4>)
 8001b8c:	69db      	ldr	r3, [r3, #28]
 8001b8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b92:	60bb      	str	r3, [r7, #8]
 8001b94:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001b96:	2301      	movs	r3, #1
 8001b98:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b9a:	4b82      	ldr	r3, [pc, #520]	; (8001da4 <HAL_RCC_OscConfig+0x4c8>)
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d118      	bne.n	8001bd8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001ba6:	4b7f      	ldr	r3, [pc, #508]	; (8001da4 <HAL_RCC_OscConfig+0x4c8>)
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	4a7e      	ldr	r2, [pc, #504]	; (8001da4 <HAL_RCC_OscConfig+0x4c8>)
 8001bac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001bb0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001bb2:	f7ff fc09 	bl	80013c8 <HAL_GetTick>
 8001bb6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bb8:	e008      	b.n	8001bcc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001bba:	f7ff fc05 	bl	80013c8 <HAL_GetTick>
 8001bbe:	4602      	mov	r2, r0
 8001bc0:	693b      	ldr	r3, [r7, #16]
 8001bc2:	1ad3      	subs	r3, r2, r3
 8001bc4:	2b64      	cmp	r3, #100	; 0x64
 8001bc6:	d901      	bls.n	8001bcc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001bc8:	2303      	movs	r3, #3
 8001bca:	e103      	b.n	8001dd4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bcc:	4b75      	ldr	r3, [pc, #468]	; (8001da4 <HAL_RCC_OscConfig+0x4c8>)
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d0f0      	beq.n	8001bba <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	68db      	ldr	r3, [r3, #12]
 8001bdc:	2b01      	cmp	r3, #1
 8001bde:	d106      	bne.n	8001bee <HAL_RCC_OscConfig+0x312>
 8001be0:	4b6f      	ldr	r3, [pc, #444]	; (8001da0 <HAL_RCC_OscConfig+0x4c4>)
 8001be2:	6a1b      	ldr	r3, [r3, #32]
 8001be4:	4a6e      	ldr	r2, [pc, #440]	; (8001da0 <HAL_RCC_OscConfig+0x4c4>)
 8001be6:	f043 0301 	orr.w	r3, r3, #1
 8001bea:	6213      	str	r3, [r2, #32]
 8001bec:	e02d      	b.n	8001c4a <HAL_RCC_OscConfig+0x36e>
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	68db      	ldr	r3, [r3, #12]
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d10c      	bne.n	8001c10 <HAL_RCC_OscConfig+0x334>
 8001bf6:	4b6a      	ldr	r3, [pc, #424]	; (8001da0 <HAL_RCC_OscConfig+0x4c4>)
 8001bf8:	6a1b      	ldr	r3, [r3, #32]
 8001bfa:	4a69      	ldr	r2, [pc, #420]	; (8001da0 <HAL_RCC_OscConfig+0x4c4>)
 8001bfc:	f023 0301 	bic.w	r3, r3, #1
 8001c00:	6213      	str	r3, [r2, #32]
 8001c02:	4b67      	ldr	r3, [pc, #412]	; (8001da0 <HAL_RCC_OscConfig+0x4c4>)
 8001c04:	6a1b      	ldr	r3, [r3, #32]
 8001c06:	4a66      	ldr	r2, [pc, #408]	; (8001da0 <HAL_RCC_OscConfig+0x4c4>)
 8001c08:	f023 0304 	bic.w	r3, r3, #4
 8001c0c:	6213      	str	r3, [r2, #32]
 8001c0e:	e01c      	b.n	8001c4a <HAL_RCC_OscConfig+0x36e>
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	68db      	ldr	r3, [r3, #12]
 8001c14:	2b05      	cmp	r3, #5
 8001c16:	d10c      	bne.n	8001c32 <HAL_RCC_OscConfig+0x356>
 8001c18:	4b61      	ldr	r3, [pc, #388]	; (8001da0 <HAL_RCC_OscConfig+0x4c4>)
 8001c1a:	6a1b      	ldr	r3, [r3, #32]
 8001c1c:	4a60      	ldr	r2, [pc, #384]	; (8001da0 <HAL_RCC_OscConfig+0x4c4>)
 8001c1e:	f043 0304 	orr.w	r3, r3, #4
 8001c22:	6213      	str	r3, [r2, #32]
 8001c24:	4b5e      	ldr	r3, [pc, #376]	; (8001da0 <HAL_RCC_OscConfig+0x4c4>)
 8001c26:	6a1b      	ldr	r3, [r3, #32]
 8001c28:	4a5d      	ldr	r2, [pc, #372]	; (8001da0 <HAL_RCC_OscConfig+0x4c4>)
 8001c2a:	f043 0301 	orr.w	r3, r3, #1
 8001c2e:	6213      	str	r3, [r2, #32]
 8001c30:	e00b      	b.n	8001c4a <HAL_RCC_OscConfig+0x36e>
 8001c32:	4b5b      	ldr	r3, [pc, #364]	; (8001da0 <HAL_RCC_OscConfig+0x4c4>)
 8001c34:	6a1b      	ldr	r3, [r3, #32]
 8001c36:	4a5a      	ldr	r2, [pc, #360]	; (8001da0 <HAL_RCC_OscConfig+0x4c4>)
 8001c38:	f023 0301 	bic.w	r3, r3, #1
 8001c3c:	6213      	str	r3, [r2, #32]
 8001c3e:	4b58      	ldr	r3, [pc, #352]	; (8001da0 <HAL_RCC_OscConfig+0x4c4>)
 8001c40:	6a1b      	ldr	r3, [r3, #32]
 8001c42:	4a57      	ldr	r2, [pc, #348]	; (8001da0 <HAL_RCC_OscConfig+0x4c4>)
 8001c44:	f023 0304 	bic.w	r3, r3, #4
 8001c48:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	68db      	ldr	r3, [r3, #12]
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d015      	beq.n	8001c7e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c52:	f7ff fbb9 	bl	80013c8 <HAL_GetTick>
 8001c56:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c58:	e00a      	b.n	8001c70 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c5a:	f7ff fbb5 	bl	80013c8 <HAL_GetTick>
 8001c5e:	4602      	mov	r2, r0
 8001c60:	693b      	ldr	r3, [r7, #16]
 8001c62:	1ad3      	subs	r3, r2, r3
 8001c64:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c68:	4293      	cmp	r3, r2
 8001c6a:	d901      	bls.n	8001c70 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001c6c:	2303      	movs	r3, #3
 8001c6e:	e0b1      	b.n	8001dd4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c70:	4b4b      	ldr	r3, [pc, #300]	; (8001da0 <HAL_RCC_OscConfig+0x4c4>)
 8001c72:	6a1b      	ldr	r3, [r3, #32]
 8001c74:	f003 0302 	and.w	r3, r3, #2
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d0ee      	beq.n	8001c5a <HAL_RCC_OscConfig+0x37e>
 8001c7c:	e014      	b.n	8001ca8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c7e:	f7ff fba3 	bl	80013c8 <HAL_GetTick>
 8001c82:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c84:	e00a      	b.n	8001c9c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c86:	f7ff fb9f 	bl	80013c8 <HAL_GetTick>
 8001c8a:	4602      	mov	r2, r0
 8001c8c:	693b      	ldr	r3, [r7, #16]
 8001c8e:	1ad3      	subs	r3, r2, r3
 8001c90:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c94:	4293      	cmp	r3, r2
 8001c96:	d901      	bls.n	8001c9c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001c98:	2303      	movs	r3, #3
 8001c9a:	e09b      	b.n	8001dd4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c9c:	4b40      	ldr	r3, [pc, #256]	; (8001da0 <HAL_RCC_OscConfig+0x4c4>)
 8001c9e:	6a1b      	ldr	r3, [r3, #32]
 8001ca0:	f003 0302 	and.w	r3, r3, #2
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d1ee      	bne.n	8001c86 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001ca8:	7dfb      	ldrb	r3, [r7, #23]
 8001caa:	2b01      	cmp	r3, #1
 8001cac:	d105      	bne.n	8001cba <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001cae:	4b3c      	ldr	r3, [pc, #240]	; (8001da0 <HAL_RCC_OscConfig+0x4c4>)
 8001cb0:	69db      	ldr	r3, [r3, #28]
 8001cb2:	4a3b      	ldr	r2, [pc, #236]	; (8001da0 <HAL_RCC_OscConfig+0x4c4>)
 8001cb4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001cb8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	69db      	ldr	r3, [r3, #28]
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	f000 8087 	beq.w	8001dd2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001cc4:	4b36      	ldr	r3, [pc, #216]	; (8001da0 <HAL_RCC_OscConfig+0x4c4>)
 8001cc6:	685b      	ldr	r3, [r3, #4]
 8001cc8:	f003 030c 	and.w	r3, r3, #12
 8001ccc:	2b08      	cmp	r3, #8
 8001cce:	d061      	beq.n	8001d94 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	69db      	ldr	r3, [r3, #28]
 8001cd4:	2b02      	cmp	r3, #2
 8001cd6:	d146      	bne.n	8001d66 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001cd8:	4b33      	ldr	r3, [pc, #204]	; (8001da8 <HAL_RCC_OscConfig+0x4cc>)
 8001cda:	2200      	movs	r2, #0
 8001cdc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cde:	f7ff fb73 	bl	80013c8 <HAL_GetTick>
 8001ce2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ce4:	e008      	b.n	8001cf8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ce6:	f7ff fb6f 	bl	80013c8 <HAL_GetTick>
 8001cea:	4602      	mov	r2, r0
 8001cec:	693b      	ldr	r3, [r7, #16]
 8001cee:	1ad3      	subs	r3, r2, r3
 8001cf0:	2b02      	cmp	r3, #2
 8001cf2:	d901      	bls.n	8001cf8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001cf4:	2303      	movs	r3, #3
 8001cf6:	e06d      	b.n	8001dd4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001cf8:	4b29      	ldr	r3, [pc, #164]	; (8001da0 <HAL_RCC_OscConfig+0x4c4>)
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d1f0      	bne.n	8001ce6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	6a1b      	ldr	r3, [r3, #32]
 8001d08:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d0c:	d108      	bne.n	8001d20 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001d0e:	4b24      	ldr	r3, [pc, #144]	; (8001da0 <HAL_RCC_OscConfig+0x4c4>)
 8001d10:	685b      	ldr	r3, [r3, #4]
 8001d12:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	689b      	ldr	r3, [r3, #8]
 8001d1a:	4921      	ldr	r1, [pc, #132]	; (8001da0 <HAL_RCC_OscConfig+0x4c4>)
 8001d1c:	4313      	orrs	r3, r2
 8001d1e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001d20:	4b1f      	ldr	r3, [pc, #124]	; (8001da0 <HAL_RCC_OscConfig+0x4c4>)
 8001d22:	685b      	ldr	r3, [r3, #4]
 8001d24:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	6a19      	ldr	r1, [r3, #32]
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d30:	430b      	orrs	r3, r1
 8001d32:	491b      	ldr	r1, [pc, #108]	; (8001da0 <HAL_RCC_OscConfig+0x4c4>)
 8001d34:	4313      	orrs	r3, r2
 8001d36:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001d38:	4b1b      	ldr	r3, [pc, #108]	; (8001da8 <HAL_RCC_OscConfig+0x4cc>)
 8001d3a:	2201      	movs	r2, #1
 8001d3c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d3e:	f7ff fb43 	bl	80013c8 <HAL_GetTick>
 8001d42:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001d44:	e008      	b.n	8001d58 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d46:	f7ff fb3f 	bl	80013c8 <HAL_GetTick>
 8001d4a:	4602      	mov	r2, r0
 8001d4c:	693b      	ldr	r3, [r7, #16]
 8001d4e:	1ad3      	subs	r3, r2, r3
 8001d50:	2b02      	cmp	r3, #2
 8001d52:	d901      	bls.n	8001d58 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001d54:	2303      	movs	r3, #3
 8001d56:	e03d      	b.n	8001dd4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001d58:	4b11      	ldr	r3, [pc, #68]	; (8001da0 <HAL_RCC_OscConfig+0x4c4>)
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d0f0      	beq.n	8001d46 <HAL_RCC_OscConfig+0x46a>
 8001d64:	e035      	b.n	8001dd2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d66:	4b10      	ldr	r3, [pc, #64]	; (8001da8 <HAL_RCC_OscConfig+0x4cc>)
 8001d68:	2200      	movs	r2, #0
 8001d6a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d6c:	f7ff fb2c 	bl	80013c8 <HAL_GetTick>
 8001d70:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d72:	e008      	b.n	8001d86 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d74:	f7ff fb28 	bl	80013c8 <HAL_GetTick>
 8001d78:	4602      	mov	r2, r0
 8001d7a:	693b      	ldr	r3, [r7, #16]
 8001d7c:	1ad3      	subs	r3, r2, r3
 8001d7e:	2b02      	cmp	r3, #2
 8001d80:	d901      	bls.n	8001d86 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001d82:	2303      	movs	r3, #3
 8001d84:	e026      	b.n	8001dd4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d86:	4b06      	ldr	r3, [pc, #24]	; (8001da0 <HAL_RCC_OscConfig+0x4c4>)
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d1f0      	bne.n	8001d74 <HAL_RCC_OscConfig+0x498>
 8001d92:	e01e      	b.n	8001dd2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	69db      	ldr	r3, [r3, #28]
 8001d98:	2b01      	cmp	r3, #1
 8001d9a:	d107      	bne.n	8001dac <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001d9c:	2301      	movs	r3, #1
 8001d9e:	e019      	b.n	8001dd4 <HAL_RCC_OscConfig+0x4f8>
 8001da0:	40021000 	.word	0x40021000
 8001da4:	40007000 	.word	0x40007000
 8001da8:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001dac:	4b0b      	ldr	r3, [pc, #44]	; (8001ddc <HAL_RCC_OscConfig+0x500>)
 8001dae:	685b      	ldr	r3, [r3, #4]
 8001db0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	6a1b      	ldr	r3, [r3, #32]
 8001dbc:	429a      	cmp	r2, r3
 8001dbe:	d106      	bne.n	8001dce <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001dca:	429a      	cmp	r2, r3
 8001dcc:	d001      	beq.n	8001dd2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001dce:	2301      	movs	r3, #1
 8001dd0:	e000      	b.n	8001dd4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001dd2:	2300      	movs	r3, #0
}
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	3718      	adds	r7, #24
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	bd80      	pop	{r7, pc}
 8001ddc:	40021000 	.word	0x40021000

08001de0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b084      	sub	sp, #16
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
 8001de8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d101      	bne.n	8001df4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001df0:	2301      	movs	r3, #1
 8001df2:	e0d0      	b.n	8001f96 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001df4:	4b6a      	ldr	r3, [pc, #424]	; (8001fa0 <HAL_RCC_ClockConfig+0x1c0>)
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	f003 0307 	and.w	r3, r3, #7
 8001dfc:	683a      	ldr	r2, [r7, #0]
 8001dfe:	429a      	cmp	r2, r3
 8001e00:	d910      	bls.n	8001e24 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e02:	4b67      	ldr	r3, [pc, #412]	; (8001fa0 <HAL_RCC_ClockConfig+0x1c0>)
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f023 0207 	bic.w	r2, r3, #7
 8001e0a:	4965      	ldr	r1, [pc, #404]	; (8001fa0 <HAL_RCC_ClockConfig+0x1c0>)
 8001e0c:	683b      	ldr	r3, [r7, #0]
 8001e0e:	4313      	orrs	r3, r2
 8001e10:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e12:	4b63      	ldr	r3, [pc, #396]	; (8001fa0 <HAL_RCC_ClockConfig+0x1c0>)
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f003 0307 	and.w	r3, r3, #7
 8001e1a:	683a      	ldr	r2, [r7, #0]
 8001e1c:	429a      	cmp	r2, r3
 8001e1e:	d001      	beq.n	8001e24 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001e20:	2301      	movs	r3, #1
 8001e22:	e0b8      	b.n	8001f96 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	f003 0302 	and.w	r3, r3, #2
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d020      	beq.n	8001e72 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f003 0304 	and.w	r3, r3, #4
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d005      	beq.n	8001e48 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001e3c:	4b59      	ldr	r3, [pc, #356]	; (8001fa4 <HAL_RCC_ClockConfig+0x1c4>)
 8001e3e:	685b      	ldr	r3, [r3, #4]
 8001e40:	4a58      	ldr	r2, [pc, #352]	; (8001fa4 <HAL_RCC_ClockConfig+0x1c4>)
 8001e42:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001e46:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f003 0308 	and.w	r3, r3, #8
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d005      	beq.n	8001e60 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001e54:	4b53      	ldr	r3, [pc, #332]	; (8001fa4 <HAL_RCC_ClockConfig+0x1c4>)
 8001e56:	685b      	ldr	r3, [r3, #4]
 8001e58:	4a52      	ldr	r2, [pc, #328]	; (8001fa4 <HAL_RCC_ClockConfig+0x1c4>)
 8001e5a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001e5e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e60:	4b50      	ldr	r3, [pc, #320]	; (8001fa4 <HAL_RCC_ClockConfig+0x1c4>)
 8001e62:	685b      	ldr	r3, [r3, #4]
 8001e64:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	689b      	ldr	r3, [r3, #8]
 8001e6c:	494d      	ldr	r1, [pc, #308]	; (8001fa4 <HAL_RCC_ClockConfig+0x1c4>)
 8001e6e:	4313      	orrs	r3, r2
 8001e70:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f003 0301 	and.w	r3, r3, #1
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d040      	beq.n	8001f00 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	685b      	ldr	r3, [r3, #4]
 8001e82:	2b01      	cmp	r3, #1
 8001e84:	d107      	bne.n	8001e96 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e86:	4b47      	ldr	r3, [pc, #284]	; (8001fa4 <HAL_RCC_ClockConfig+0x1c4>)
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d115      	bne.n	8001ebe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e92:	2301      	movs	r3, #1
 8001e94:	e07f      	b.n	8001f96 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	685b      	ldr	r3, [r3, #4]
 8001e9a:	2b02      	cmp	r3, #2
 8001e9c:	d107      	bne.n	8001eae <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e9e:	4b41      	ldr	r3, [pc, #260]	; (8001fa4 <HAL_RCC_ClockConfig+0x1c4>)
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d109      	bne.n	8001ebe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001eaa:	2301      	movs	r3, #1
 8001eac:	e073      	b.n	8001f96 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001eae:	4b3d      	ldr	r3, [pc, #244]	; (8001fa4 <HAL_RCC_ClockConfig+0x1c4>)
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f003 0302 	and.w	r3, r3, #2
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d101      	bne.n	8001ebe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001eba:	2301      	movs	r3, #1
 8001ebc:	e06b      	b.n	8001f96 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001ebe:	4b39      	ldr	r3, [pc, #228]	; (8001fa4 <HAL_RCC_ClockConfig+0x1c4>)
 8001ec0:	685b      	ldr	r3, [r3, #4]
 8001ec2:	f023 0203 	bic.w	r2, r3, #3
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	685b      	ldr	r3, [r3, #4]
 8001eca:	4936      	ldr	r1, [pc, #216]	; (8001fa4 <HAL_RCC_ClockConfig+0x1c4>)
 8001ecc:	4313      	orrs	r3, r2
 8001ece:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001ed0:	f7ff fa7a 	bl	80013c8 <HAL_GetTick>
 8001ed4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ed6:	e00a      	b.n	8001eee <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ed8:	f7ff fa76 	bl	80013c8 <HAL_GetTick>
 8001edc:	4602      	mov	r2, r0
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	1ad3      	subs	r3, r2, r3
 8001ee2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ee6:	4293      	cmp	r3, r2
 8001ee8:	d901      	bls.n	8001eee <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001eea:	2303      	movs	r3, #3
 8001eec:	e053      	b.n	8001f96 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001eee:	4b2d      	ldr	r3, [pc, #180]	; (8001fa4 <HAL_RCC_ClockConfig+0x1c4>)
 8001ef0:	685b      	ldr	r3, [r3, #4]
 8001ef2:	f003 020c 	and.w	r2, r3, #12
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	685b      	ldr	r3, [r3, #4]
 8001efa:	009b      	lsls	r3, r3, #2
 8001efc:	429a      	cmp	r2, r3
 8001efe:	d1eb      	bne.n	8001ed8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001f00:	4b27      	ldr	r3, [pc, #156]	; (8001fa0 <HAL_RCC_ClockConfig+0x1c0>)
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f003 0307 	and.w	r3, r3, #7
 8001f08:	683a      	ldr	r2, [r7, #0]
 8001f0a:	429a      	cmp	r2, r3
 8001f0c:	d210      	bcs.n	8001f30 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f0e:	4b24      	ldr	r3, [pc, #144]	; (8001fa0 <HAL_RCC_ClockConfig+0x1c0>)
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f023 0207 	bic.w	r2, r3, #7
 8001f16:	4922      	ldr	r1, [pc, #136]	; (8001fa0 <HAL_RCC_ClockConfig+0x1c0>)
 8001f18:	683b      	ldr	r3, [r7, #0]
 8001f1a:	4313      	orrs	r3, r2
 8001f1c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f1e:	4b20      	ldr	r3, [pc, #128]	; (8001fa0 <HAL_RCC_ClockConfig+0x1c0>)
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f003 0307 	and.w	r3, r3, #7
 8001f26:	683a      	ldr	r2, [r7, #0]
 8001f28:	429a      	cmp	r2, r3
 8001f2a:	d001      	beq.n	8001f30 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001f2c:	2301      	movs	r3, #1
 8001f2e:	e032      	b.n	8001f96 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f003 0304 	and.w	r3, r3, #4
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d008      	beq.n	8001f4e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001f3c:	4b19      	ldr	r3, [pc, #100]	; (8001fa4 <HAL_RCC_ClockConfig+0x1c4>)
 8001f3e:	685b      	ldr	r3, [r3, #4]
 8001f40:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	68db      	ldr	r3, [r3, #12]
 8001f48:	4916      	ldr	r1, [pc, #88]	; (8001fa4 <HAL_RCC_ClockConfig+0x1c4>)
 8001f4a:	4313      	orrs	r3, r2
 8001f4c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f003 0308 	and.w	r3, r3, #8
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d009      	beq.n	8001f6e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001f5a:	4b12      	ldr	r3, [pc, #72]	; (8001fa4 <HAL_RCC_ClockConfig+0x1c4>)
 8001f5c:	685b      	ldr	r3, [r3, #4]
 8001f5e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	691b      	ldr	r3, [r3, #16]
 8001f66:	00db      	lsls	r3, r3, #3
 8001f68:	490e      	ldr	r1, [pc, #56]	; (8001fa4 <HAL_RCC_ClockConfig+0x1c4>)
 8001f6a:	4313      	orrs	r3, r2
 8001f6c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001f6e:	f000 f821 	bl	8001fb4 <HAL_RCC_GetSysClockFreq>
 8001f72:	4602      	mov	r2, r0
 8001f74:	4b0b      	ldr	r3, [pc, #44]	; (8001fa4 <HAL_RCC_ClockConfig+0x1c4>)
 8001f76:	685b      	ldr	r3, [r3, #4]
 8001f78:	091b      	lsrs	r3, r3, #4
 8001f7a:	f003 030f 	and.w	r3, r3, #15
 8001f7e:	490a      	ldr	r1, [pc, #40]	; (8001fa8 <HAL_RCC_ClockConfig+0x1c8>)
 8001f80:	5ccb      	ldrb	r3, [r1, r3]
 8001f82:	fa22 f303 	lsr.w	r3, r2, r3
 8001f86:	4a09      	ldr	r2, [pc, #36]	; (8001fac <HAL_RCC_ClockConfig+0x1cc>)
 8001f88:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001f8a:	4b09      	ldr	r3, [pc, #36]	; (8001fb0 <HAL_RCC_ClockConfig+0x1d0>)
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	4618      	mov	r0, r3
 8001f90:	f7ff f9d8 	bl	8001344 <HAL_InitTick>

  return HAL_OK;
 8001f94:	2300      	movs	r3, #0
}
 8001f96:	4618      	mov	r0, r3
 8001f98:	3710      	adds	r7, #16
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	bd80      	pop	{r7, pc}
 8001f9e:	bf00      	nop
 8001fa0:	40022000 	.word	0x40022000
 8001fa4:	40021000 	.word	0x40021000
 8001fa8:	08002c20 	.word	0x08002c20
 8001fac:	20000004 	.word	0x20000004
 8001fb0:	20000034 	.word	0x20000034

08001fb4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001fb4:	b490      	push	{r4, r7}
 8001fb6:	b08a      	sub	sp, #40	; 0x28
 8001fb8:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001fba:	4b29      	ldr	r3, [pc, #164]	; (8002060 <HAL_RCC_GetSysClockFreq+0xac>)
 8001fbc:	1d3c      	adds	r4, r7, #4
 8001fbe:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001fc0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001fc4:	f240 2301 	movw	r3, #513	; 0x201
 8001fc8:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001fca:	2300      	movs	r3, #0
 8001fcc:	61fb      	str	r3, [r7, #28]
 8001fce:	2300      	movs	r3, #0
 8001fd0:	61bb      	str	r3, [r7, #24]
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	627b      	str	r3, [r7, #36]	; 0x24
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001fda:	2300      	movs	r3, #0
 8001fdc:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001fde:	4b21      	ldr	r3, [pc, #132]	; (8002064 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001fe0:	685b      	ldr	r3, [r3, #4]
 8001fe2:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001fe4:	69fb      	ldr	r3, [r7, #28]
 8001fe6:	f003 030c 	and.w	r3, r3, #12
 8001fea:	2b04      	cmp	r3, #4
 8001fec:	d002      	beq.n	8001ff4 <HAL_RCC_GetSysClockFreq+0x40>
 8001fee:	2b08      	cmp	r3, #8
 8001ff0:	d003      	beq.n	8001ffa <HAL_RCC_GetSysClockFreq+0x46>
 8001ff2:	e02b      	b.n	800204c <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001ff4:	4b1c      	ldr	r3, [pc, #112]	; (8002068 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001ff6:	623b      	str	r3, [r7, #32]
      break;
 8001ff8:	e02b      	b.n	8002052 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001ffa:	69fb      	ldr	r3, [r7, #28]
 8001ffc:	0c9b      	lsrs	r3, r3, #18
 8001ffe:	f003 030f 	and.w	r3, r3, #15
 8002002:	3328      	adds	r3, #40	; 0x28
 8002004:	443b      	add	r3, r7
 8002006:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800200a:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800200c:	69fb      	ldr	r3, [r7, #28]
 800200e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002012:	2b00      	cmp	r3, #0
 8002014:	d012      	beq.n	800203c <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002016:	4b13      	ldr	r3, [pc, #76]	; (8002064 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002018:	685b      	ldr	r3, [r3, #4]
 800201a:	0c5b      	lsrs	r3, r3, #17
 800201c:	f003 0301 	and.w	r3, r3, #1
 8002020:	3328      	adds	r3, #40	; 0x28
 8002022:	443b      	add	r3, r7
 8002024:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002028:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800202a:	697b      	ldr	r3, [r7, #20]
 800202c:	4a0e      	ldr	r2, [pc, #56]	; (8002068 <HAL_RCC_GetSysClockFreq+0xb4>)
 800202e:	fb03 f202 	mul.w	r2, r3, r2
 8002032:	69bb      	ldr	r3, [r7, #24]
 8002034:	fbb2 f3f3 	udiv	r3, r2, r3
 8002038:	627b      	str	r3, [r7, #36]	; 0x24
 800203a:	e004      	b.n	8002046 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800203c:	697b      	ldr	r3, [r7, #20]
 800203e:	4a0b      	ldr	r2, [pc, #44]	; (800206c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002040:	fb02 f303 	mul.w	r3, r2, r3
 8002044:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002046:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002048:	623b      	str	r3, [r7, #32]
      break;
 800204a:	e002      	b.n	8002052 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800204c:	4b06      	ldr	r3, [pc, #24]	; (8002068 <HAL_RCC_GetSysClockFreq+0xb4>)
 800204e:	623b      	str	r3, [r7, #32]
      break;
 8002050:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002052:	6a3b      	ldr	r3, [r7, #32]
}
 8002054:	4618      	mov	r0, r3
 8002056:	3728      	adds	r7, #40	; 0x28
 8002058:	46bd      	mov	sp, r7
 800205a:	bc90      	pop	{r4, r7}
 800205c:	4770      	bx	lr
 800205e:	bf00      	nop
 8002060:	08002c10 	.word	0x08002c10
 8002064:	40021000 	.word	0x40021000
 8002068:	007a1200 	.word	0x007a1200
 800206c:	003d0900 	.word	0x003d0900

08002070 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002070:	b480      	push	{r7}
 8002072:	b085      	sub	sp, #20
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002078:	4b0a      	ldr	r3, [pc, #40]	; (80020a4 <RCC_Delay+0x34>)
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	4a0a      	ldr	r2, [pc, #40]	; (80020a8 <RCC_Delay+0x38>)
 800207e:	fba2 2303 	umull	r2, r3, r2, r3
 8002082:	0a5b      	lsrs	r3, r3, #9
 8002084:	687a      	ldr	r2, [r7, #4]
 8002086:	fb02 f303 	mul.w	r3, r2, r3
 800208a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800208c:	bf00      	nop
  }
  while (Delay --);
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	1e5a      	subs	r2, r3, #1
 8002092:	60fa      	str	r2, [r7, #12]
 8002094:	2b00      	cmp	r3, #0
 8002096:	d1f9      	bne.n	800208c <RCC_Delay+0x1c>
}
 8002098:	bf00      	nop
 800209a:	bf00      	nop
 800209c:	3714      	adds	r7, #20
 800209e:	46bd      	mov	sp, r7
 80020a0:	bc80      	pop	{r7}
 80020a2:	4770      	bx	lr
 80020a4:	20000004 	.word	0x20000004
 80020a8:	10624dd3 	.word	0x10624dd3

080020ac <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b082      	sub	sp, #8
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d101      	bne.n	80020be <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80020ba:	2301      	movs	r3, #1
 80020bc:	e076      	b.n	80021ac <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d108      	bne.n	80020d8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	685b      	ldr	r3, [r3, #4]
 80020ca:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80020ce:	d009      	beq.n	80020e4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	2200      	movs	r2, #0
 80020d4:	61da      	str	r2, [r3, #28]
 80020d6:	e005      	b.n	80020e4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	2200      	movs	r2, #0
 80020dc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	2200      	movs	r2, #0
 80020e2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	2200      	movs	r2, #0
 80020e8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80020f0:	b2db      	uxtb	r3, r3
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d106      	bne.n	8002104 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	2200      	movs	r2, #0
 80020fa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80020fe:	6878      	ldr	r0, [r7, #4]
 8002100:	f7fe fb58 	bl	80007b4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	2202      	movs	r2, #2
 8002108:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	681a      	ldr	r2, [r3, #0]
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800211a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	685b      	ldr	r3, [r3, #4]
 8002120:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	689b      	ldr	r3, [r3, #8]
 8002128:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800212c:	431a      	orrs	r2, r3
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	68db      	ldr	r3, [r3, #12]
 8002132:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002136:	431a      	orrs	r2, r3
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	691b      	ldr	r3, [r3, #16]
 800213c:	f003 0302 	and.w	r3, r3, #2
 8002140:	431a      	orrs	r2, r3
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	695b      	ldr	r3, [r3, #20]
 8002146:	f003 0301 	and.w	r3, r3, #1
 800214a:	431a      	orrs	r2, r3
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	699b      	ldr	r3, [r3, #24]
 8002150:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002154:	431a      	orrs	r2, r3
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	69db      	ldr	r3, [r3, #28]
 800215a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800215e:	431a      	orrs	r2, r3
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	6a1b      	ldr	r3, [r3, #32]
 8002164:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002168:	ea42 0103 	orr.w	r1, r2, r3
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002170:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	430a      	orrs	r2, r1
 800217a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	699b      	ldr	r3, [r3, #24]
 8002180:	0c1a      	lsrs	r2, r3, #16
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f002 0204 	and.w	r2, r2, #4
 800218a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	69da      	ldr	r2, [r3, #28]
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800219a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	2200      	movs	r2, #0
 80021a0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	2201      	movs	r2, #1
 80021a6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80021aa:	2300      	movs	r3, #0
}
 80021ac:	4618      	mov	r0, r3
 80021ae:	3708      	adds	r7, #8
 80021b0:	46bd      	mov	sp, r7
 80021b2:	bd80      	pop	{r7, pc}

080021b4 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	b088      	sub	sp, #32
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	60f8      	str	r0, [r7, #12]
 80021bc:	60b9      	str	r1, [r7, #8]
 80021be:	603b      	str	r3, [r7, #0]
 80021c0:	4613      	mov	r3, r2
 80021c2:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80021c4:	2300      	movs	r3, #0
 80021c6:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80021ce:	2b01      	cmp	r3, #1
 80021d0:	d101      	bne.n	80021d6 <HAL_SPI_Transmit+0x22>
 80021d2:	2302      	movs	r3, #2
 80021d4:	e126      	b.n	8002424 <HAL_SPI_Transmit+0x270>
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	2201      	movs	r2, #1
 80021da:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80021de:	f7ff f8f3 	bl	80013c8 <HAL_GetTick>
 80021e2:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80021e4:	88fb      	ldrh	r3, [r7, #6]
 80021e6:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80021ee:	b2db      	uxtb	r3, r3
 80021f0:	2b01      	cmp	r3, #1
 80021f2:	d002      	beq.n	80021fa <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80021f4:	2302      	movs	r3, #2
 80021f6:	77fb      	strb	r3, [r7, #31]
    goto error;
 80021f8:	e10b      	b.n	8002412 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80021fa:	68bb      	ldr	r3, [r7, #8]
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d002      	beq.n	8002206 <HAL_SPI_Transmit+0x52>
 8002200:	88fb      	ldrh	r3, [r7, #6]
 8002202:	2b00      	cmp	r3, #0
 8002204:	d102      	bne.n	800220c <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002206:	2301      	movs	r3, #1
 8002208:	77fb      	strb	r3, [r7, #31]
    goto error;
 800220a:	e102      	b.n	8002412 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	2203      	movs	r2, #3
 8002210:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	2200      	movs	r2, #0
 8002218:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	68ba      	ldr	r2, [r7, #8]
 800221e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	88fa      	ldrh	r2, [r7, #6]
 8002224:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	88fa      	ldrh	r2, [r7, #6]
 800222a:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	2200      	movs	r2, #0
 8002230:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	2200      	movs	r2, #0
 8002236:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	2200      	movs	r2, #0
 800223c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	2200      	movs	r2, #0
 8002242:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	2200      	movs	r2, #0
 8002248:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	689b      	ldr	r3, [r3, #8]
 800224e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002252:	d10f      	bne.n	8002274 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	681a      	ldr	r2, [r3, #0]
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002262:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	681a      	ldr	r2, [r3, #0]
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002272:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800227e:	2b40      	cmp	r3, #64	; 0x40
 8002280:	d007      	beq.n	8002292 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	681a      	ldr	r2, [r3, #0]
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002290:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	68db      	ldr	r3, [r3, #12]
 8002296:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800229a:	d14b      	bne.n	8002334 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	685b      	ldr	r3, [r3, #4]
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d002      	beq.n	80022aa <HAL_SPI_Transmit+0xf6>
 80022a4:	8afb      	ldrh	r3, [r7, #22]
 80022a6:	2b01      	cmp	r3, #1
 80022a8:	d13e      	bne.n	8002328 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ae:	881a      	ldrh	r2, [r3, #0]
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ba:	1c9a      	adds	r2, r3, #2
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80022c4:	b29b      	uxth	r3, r3
 80022c6:	3b01      	subs	r3, #1
 80022c8:	b29a      	uxth	r2, r3
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80022ce:	e02b      	b.n	8002328 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	689b      	ldr	r3, [r3, #8]
 80022d6:	f003 0302 	and.w	r3, r3, #2
 80022da:	2b02      	cmp	r3, #2
 80022dc:	d112      	bne.n	8002304 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022e2:	881a      	ldrh	r2, [r3, #0]
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ee:	1c9a      	adds	r2, r3, #2
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80022f8:	b29b      	uxth	r3, r3
 80022fa:	3b01      	subs	r3, #1
 80022fc:	b29a      	uxth	r2, r3
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	86da      	strh	r2, [r3, #54]	; 0x36
 8002302:	e011      	b.n	8002328 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002304:	f7ff f860 	bl	80013c8 <HAL_GetTick>
 8002308:	4602      	mov	r2, r0
 800230a:	69bb      	ldr	r3, [r7, #24]
 800230c:	1ad3      	subs	r3, r2, r3
 800230e:	683a      	ldr	r2, [r7, #0]
 8002310:	429a      	cmp	r2, r3
 8002312:	d803      	bhi.n	800231c <HAL_SPI_Transmit+0x168>
 8002314:	683b      	ldr	r3, [r7, #0]
 8002316:	f1b3 3fff 	cmp.w	r3, #4294967295
 800231a:	d102      	bne.n	8002322 <HAL_SPI_Transmit+0x16e>
 800231c:	683b      	ldr	r3, [r7, #0]
 800231e:	2b00      	cmp	r3, #0
 8002320:	d102      	bne.n	8002328 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8002322:	2303      	movs	r3, #3
 8002324:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002326:	e074      	b.n	8002412 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800232c:	b29b      	uxth	r3, r3
 800232e:	2b00      	cmp	r3, #0
 8002330:	d1ce      	bne.n	80022d0 <HAL_SPI_Transmit+0x11c>
 8002332:	e04c      	b.n	80023ce <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	685b      	ldr	r3, [r3, #4]
 8002338:	2b00      	cmp	r3, #0
 800233a:	d002      	beq.n	8002342 <HAL_SPI_Transmit+0x18e>
 800233c:	8afb      	ldrh	r3, [r7, #22]
 800233e:	2b01      	cmp	r3, #1
 8002340:	d140      	bne.n	80023c4 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	330c      	adds	r3, #12
 800234c:	7812      	ldrb	r2, [r2, #0]
 800234e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002354:	1c5a      	adds	r2, r3, #1
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800235e:	b29b      	uxth	r3, r3
 8002360:	3b01      	subs	r3, #1
 8002362:	b29a      	uxth	r2, r3
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002368:	e02c      	b.n	80023c4 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	689b      	ldr	r3, [r3, #8]
 8002370:	f003 0302 	and.w	r3, r3, #2
 8002374:	2b02      	cmp	r3, #2
 8002376:	d113      	bne.n	80023a0 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	330c      	adds	r3, #12
 8002382:	7812      	ldrb	r2, [r2, #0]
 8002384:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800238a:	1c5a      	adds	r2, r3, #1
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002394:	b29b      	uxth	r3, r3
 8002396:	3b01      	subs	r3, #1
 8002398:	b29a      	uxth	r2, r3
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	86da      	strh	r2, [r3, #54]	; 0x36
 800239e:	e011      	b.n	80023c4 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80023a0:	f7ff f812 	bl	80013c8 <HAL_GetTick>
 80023a4:	4602      	mov	r2, r0
 80023a6:	69bb      	ldr	r3, [r7, #24]
 80023a8:	1ad3      	subs	r3, r2, r3
 80023aa:	683a      	ldr	r2, [r7, #0]
 80023ac:	429a      	cmp	r2, r3
 80023ae:	d803      	bhi.n	80023b8 <HAL_SPI_Transmit+0x204>
 80023b0:	683b      	ldr	r3, [r7, #0]
 80023b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023b6:	d102      	bne.n	80023be <HAL_SPI_Transmit+0x20a>
 80023b8:	683b      	ldr	r3, [r7, #0]
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d102      	bne.n	80023c4 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80023be:	2303      	movs	r3, #3
 80023c0:	77fb      	strb	r3, [r7, #31]
          goto error;
 80023c2:	e026      	b.n	8002412 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80023c8:	b29b      	uxth	r3, r3
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d1cd      	bne.n	800236a <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80023ce:	69ba      	ldr	r2, [r7, #24]
 80023d0:	6839      	ldr	r1, [r7, #0]
 80023d2:	68f8      	ldr	r0, [r7, #12]
 80023d4:	f000 fbb8 	bl	8002b48 <SPI_EndRxTxTransaction>
 80023d8:	4603      	mov	r3, r0
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d002      	beq.n	80023e4 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	2220      	movs	r2, #32
 80023e2:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	689b      	ldr	r3, [r3, #8]
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d10a      	bne.n	8002402 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80023ec:	2300      	movs	r3, #0
 80023ee:	613b      	str	r3, [r7, #16]
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	68db      	ldr	r3, [r3, #12]
 80023f6:	613b      	str	r3, [r7, #16]
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	689b      	ldr	r3, [r3, #8]
 80023fe:	613b      	str	r3, [r7, #16]
 8002400:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002406:	2b00      	cmp	r3, #0
 8002408:	d002      	beq.n	8002410 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 800240a:	2301      	movs	r3, #1
 800240c:	77fb      	strb	r3, [r7, #31]
 800240e:	e000      	b.n	8002412 <HAL_SPI_Transmit+0x25e>
  }

error:
 8002410:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	2201      	movs	r2, #1
 8002416:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	2200      	movs	r2, #0
 800241e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002422:	7ffb      	ldrb	r3, [r7, #31]
}
 8002424:	4618      	mov	r0, r3
 8002426:	3720      	adds	r7, #32
 8002428:	46bd      	mov	sp, r7
 800242a:	bd80      	pop	{r7, pc}

0800242c <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800242c:	b580      	push	{r7, lr}
 800242e:	b088      	sub	sp, #32
 8002430:	af02      	add	r7, sp, #8
 8002432:	60f8      	str	r0, [r7, #12]
 8002434:	60b9      	str	r1, [r7, #8]
 8002436:	603b      	str	r3, [r7, #0]
 8002438:	4613      	mov	r3, r2
 800243a:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800243c:	2300      	movs	r3, #0
 800243e:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	685b      	ldr	r3, [r3, #4]
 8002444:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002448:	d112      	bne.n	8002470 <HAL_SPI_Receive+0x44>
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	689b      	ldr	r3, [r3, #8]
 800244e:	2b00      	cmp	r3, #0
 8002450:	d10e      	bne.n	8002470 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	2204      	movs	r2, #4
 8002456:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800245a:	88fa      	ldrh	r2, [r7, #6]
 800245c:	683b      	ldr	r3, [r7, #0]
 800245e:	9300      	str	r3, [sp, #0]
 8002460:	4613      	mov	r3, r2
 8002462:	68ba      	ldr	r2, [r7, #8]
 8002464:	68b9      	ldr	r1, [r7, #8]
 8002466:	68f8      	ldr	r0, [r7, #12]
 8002468:	f000 f8f1 	bl	800264e <HAL_SPI_TransmitReceive>
 800246c:	4603      	mov	r3, r0
 800246e:	e0ea      	b.n	8002646 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002476:	2b01      	cmp	r3, #1
 8002478:	d101      	bne.n	800247e <HAL_SPI_Receive+0x52>
 800247a:	2302      	movs	r3, #2
 800247c:	e0e3      	b.n	8002646 <HAL_SPI_Receive+0x21a>
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	2201      	movs	r2, #1
 8002482:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002486:	f7fe ff9f 	bl	80013c8 <HAL_GetTick>
 800248a:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002492:	b2db      	uxtb	r3, r3
 8002494:	2b01      	cmp	r3, #1
 8002496:	d002      	beq.n	800249e <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8002498:	2302      	movs	r3, #2
 800249a:	75fb      	strb	r3, [r7, #23]
    goto error;
 800249c:	e0ca      	b.n	8002634 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 800249e:	68bb      	ldr	r3, [r7, #8]
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d002      	beq.n	80024aa <HAL_SPI_Receive+0x7e>
 80024a4:	88fb      	ldrh	r3, [r7, #6]
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d102      	bne.n	80024b0 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80024aa:	2301      	movs	r3, #1
 80024ac:	75fb      	strb	r3, [r7, #23]
    goto error;
 80024ae:	e0c1      	b.n	8002634 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	2204      	movs	r2, #4
 80024b4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	2200      	movs	r2, #0
 80024bc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	68ba      	ldr	r2, [r7, #8]
 80024c2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	88fa      	ldrh	r2, [r7, #6]
 80024c8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	88fa      	ldrh	r2, [r7, #6]
 80024ce:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	2200      	movs	r2, #0
 80024d4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	2200      	movs	r2, #0
 80024da:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	2200      	movs	r2, #0
 80024e0:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	2200      	movs	r2, #0
 80024e6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	2200      	movs	r2, #0
 80024ec:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	689b      	ldr	r3, [r3, #8]
 80024f2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80024f6:	d10f      	bne.n	8002518 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	681a      	ldr	r2, [r3, #0]
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002506:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	681a      	ldr	r2, [r3, #0]
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002516:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002522:	2b40      	cmp	r3, #64	; 0x40
 8002524:	d007      	beq.n	8002536 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	681a      	ldr	r2, [r3, #0]
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002534:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	68db      	ldr	r3, [r3, #12]
 800253a:	2b00      	cmp	r3, #0
 800253c:	d162      	bne.n	8002604 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800253e:	e02e      	b.n	800259e <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	689b      	ldr	r3, [r3, #8]
 8002546:	f003 0301 	and.w	r3, r3, #1
 800254a:	2b01      	cmp	r3, #1
 800254c:	d115      	bne.n	800257a <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f103 020c 	add.w	r2, r3, #12
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800255a:	7812      	ldrb	r2, [r2, #0]
 800255c:	b2d2      	uxtb	r2, r2
 800255e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002564:	1c5a      	adds	r2, r3, #1
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800256e:	b29b      	uxth	r3, r3
 8002570:	3b01      	subs	r3, #1
 8002572:	b29a      	uxth	r2, r3
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002578:	e011      	b.n	800259e <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800257a:	f7fe ff25 	bl	80013c8 <HAL_GetTick>
 800257e:	4602      	mov	r2, r0
 8002580:	693b      	ldr	r3, [r7, #16]
 8002582:	1ad3      	subs	r3, r2, r3
 8002584:	683a      	ldr	r2, [r7, #0]
 8002586:	429a      	cmp	r2, r3
 8002588:	d803      	bhi.n	8002592 <HAL_SPI_Receive+0x166>
 800258a:	683b      	ldr	r3, [r7, #0]
 800258c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002590:	d102      	bne.n	8002598 <HAL_SPI_Receive+0x16c>
 8002592:	683b      	ldr	r3, [r7, #0]
 8002594:	2b00      	cmp	r3, #0
 8002596:	d102      	bne.n	800259e <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8002598:	2303      	movs	r3, #3
 800259a:	75fb      	strb	r3, [r7, #23]
          goto error;
 800259c:	e04a      	b.n	8002634 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80025a2:	b29b      	uxth	r3, r3
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d1cb      	bne.n	8002540 <HAL_SPI_Receive+0x114>
 80025a8:	e031      	b.n	800260e <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	689b      	ldr	r3, [r3, #8]
 80025b0:	f003 0301 	and.w	r3, r3, #1
 80025b4:	2b01      	cmp	r3, #1
 80025b6:	d113      	bne.n	80025e0 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	68da      	ldr	r2, [r3, #12]
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025c2:	b292      	uxth	r2, r2
 80025c4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025ca:	1c9a      	adds	r2, r3, #2
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80025d4:	b29b      	uxth	r3, r3
 80025d6:	3b01      	subs	r3, #1
 80025d8:	b29a      	uxth	r2, r3
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	87da      	strh	r2, [r3, #62]	; 0x3e
 80025de:	e011      	b.n	8002604 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80025e0:	f7fe fef2 	bl	80013c8 <HAL_GetTick>
 80025e4:	4602      	mov	r2, r0
 80025e6:	693b      	ldr	r3, [r7, #16]
 80025e8:	1ad3      	subs	r3, r2, r3
 80025ea:	683a      	ldr	r2, [r7, #0]
 80025ec:	429a      	cmp	r2, r3
 80025ee:	d803      	bhi.n	80025f8 <HAL_SPI_Receive+0x1cc>
 80025f0:	683b      	ldr	r3, [r7, #0]
 80025f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025f6:	d102      	bne.n	80025fe <HAL_SPI_Receive+0x1d2>
 80025f8:	683b      	ldr	r3, [r7, #0]
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d102      	bne.n	8002604 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 80025fe:	2303      	movs	r3, #3
 8002600:	75fb      	strb	r3, [r7, #23]
          goto error;
 8002602:	e017      	b.n	8002634 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002608:	b29b      	uxth	r3, r3
 800260a:	2b00      	cmp	r3, #0
 800260c:	d1cd      	bne.n	80025aa <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800260e:	693a      	ldr	r2, [r7, #16]
 8002610:	6839      	ldr	r1, [r7, #0]
 8002612:	68f8      	ldr	r0, [r7, #12]
 8002614:	f000 fa46 	bl	8002aa4 <SPI_EndRxTransaction>
 8002618:	4603      	mov	r3, r0
 800261a:	2b00      	cmp	r3, #0
 800261c:	d002      	beq.n	8002624 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	2220      	movs	r2, #32
 8002622:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002628:	2b00      	cmp	r3, #0
 800262a:	d002      	beq.n	8002632 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 800262c:	2301      	movs	r3, #1
 800262e:	75fb      	strb	r3, [r7, #23]
 8002630:	e000      	b.n	8002634 <HAL_SPI_Receive+0x208>
  }

error :
 8002632:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	2201      	movs	r2, #1
 8002638:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	2200      	movs	r2, #0
 8002640:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002644:	7dfb      	ldrb	r3, [r7, #23]
}
 8002646:	4618      	mov	r0, r3
 8002648:	3718      	adds	r7, #24
 800264a:	46bd      	mov	sp, r7
 800264c:	bd80      	pop	{r7, pc}

0800264e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800264e:	b580      	push	{r7, lr}
 8002650:	b08c      	sub	sp, #48	; 0x30
 8002652:	af00      	add	r7, sp, #0
 8002654:	60f8      	str	r0, [r7, #12]
 8002656:	60b9      	str	r1, [r7, #8]
 8002658:	607a      	str	r2, [r7, #4]
 800265a:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800265c:	2301      	movs	r3, #1
 800265e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002660:	2300      	movs	r3, #0
 8002662:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800266c:	2b01      	cmp	r3, #1
 800266e:	d101      	bne.n	8002674 <HAL_SPI_TransmitReceive+0x26>
 8002670:	2302      	movs	r3, #2
 8002672:	e18a      	b.n	800298a <HAL_SPI_TransmitReceive+0x33c>
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	2201      	movs	r2, #1
 8002678:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800267c:	f7fe fea4 	bl	80013c8 <HAL_GetTick>
 8002680:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002688:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	685b      	ldr	r3, [r3, #4]
 8002690:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8002692:	887b      	ldrh	r3, [r7, #2]
 8002694:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002696:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800269a:	2b01      	cmp	r3, #1
 800269c:	d00f      	beq.n	80026be <HAL_SPI_TransmitReceive+0x70>
 800269e:	69fb      	ldr	r3, [r7, #28]
 80026a0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80026a4:	d107      	bne.n	80026b6 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	689b      	ldr	r3, [r3, #8]
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d103      	bne.n	80026b6 <HAL_SPI_TransmitReceive+0x68>
 80026ae:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80026b2:	2b04      	cmp	r3, #4
 80026b4:	d003      	beq.n	80026be <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80026b6:	2302      	movs	r3, #2
 80026b8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80026bc:	e15b      	b.n	8002976 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80026be:	68bb      	ldr	r3, [r7, #8]
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d005      	beq.n	80026d0 <HAL_SPI_TransmitReceive+0x82>
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d002      	beq.n	80026d0 <HAL_SPI_TransmitReceive+0x82>
 80026ca:	887b      	ldrh	r3, [r7, #2]
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d103      	bne.n	80026d8 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80026d0:	2301      	movs	r3, #1
 80026d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80026d6:	e14e      	b.n	8002976 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80026de:	b2db      	uxtb	r3, r3
 80026e0:	2b04      	cmp	r3, #4
 80026e2:	d003      	beq.n	80026ec <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	2205      	movs	r2, #5
 80026e8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	2200      	movs	r2, #0
 80026f0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	687a      	ldr	r2, [r7, #4]
 80026f6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	887a      	ldrh	r2, [r7, #2]
 80026fc:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	887a      	ldrh	r2, [r7, #2]
 8002702:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	68ba      	ldr	r2, [r7, #8]
 8002708:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	887a      	ldrh	r2, [r7, #2]
 800270e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	887a      	ldrh	r2, [r7, #2]
 8002714:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	2200      	movs	r2, #0
 800271a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	2200      	movs	r2, #0
 8002720:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800272c:	2b40      	cmp	r3, #64	; 0x40
 800272e:	d007      	beq.n	8002740 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	681a      	ldr	r2, [r3, #0]
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800273e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	68db      	ldr	r3, [r3, #12]
 8002744:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002748:	d178      	bne.n	800283c <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	685b      	ldr	r3, [r3, #4]
 800274e:	2b00      	cmp	r3, #0
 8002750:	d002      	beq.n	8002758 <HAL_SPI_TransmitReceive+0x10a>
 8002752:	8b7b      	ldrh	r3, [r7, #26]
 8002754:	2b01      	cmp	r3, #1
 8002756:	d166      	bne.n	8002826 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800275c:	881a      	ldrh	r2, [r3, #0]
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002768:	1c9a      	adds	r2, r3, #2
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002772:	b29b      	uxth	r3, r3
 8002774:	3b01      	subs	r3, #1
 8002776:	b29a      	uxth	r2, r3
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800277c:	e053      	b.n	8002826 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	689b      	ldr	r3, [r3, #8]
 8002784:	f003 0302 	and.w	r3, r3, #2
 8002788:	2b02      	cmp	r3, #2
 800278a:	d11b      	bne.n	80027c4 <HAL_SPI_TransmitReceive+0x176>
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002790:	b29b      	uxth	r3, r3
 8002792:	2b00      	cmp	r3, #0
 8002794:	d016      	beq.n	80027c4 <HAL_SPI_TransmitReceive+0x176>
 8002796:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002798:	2b01      	cmp	r3, #1
 800279a:	d113      	bne.n	80027c4 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027a0:	881a      	ldrh	r2, [r3, #0]
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027ac:	1c9a      	adds	r2, r3, #2
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80027b6:	b29b      	uxth	r3, r3
 80027b8:	3b01      	subs	r3, #1
 80027ba:	b29a      	uxth	r2, r3
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80027c0:	2300      	movs	r3, #0
 80027c2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	689b      	ldr	r3, [r3, #8]
 80027ca:	f003 0301 	and.w	r3, r3, #1
 80027ce:	2b01      	cmp	r3, #1
 80027d0:	d119      	bne.n	8002806 <HAL_SPI_TransmitReceive+0x1b8>
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80027d6:	b29b      	uxth	r3, r3
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d014      	beq.n	8002806 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	68da      	ldr	r2, [r3, #12]
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027e6:	b292      	uxth	r2, r2
 80027e8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027ee:	1c9a      	adds	r2, r3, #2
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80027f8:	b29b      	uxth	r3, r3
 80027fa:	3b01      	subs	r3, #1
 80027fc:	b29a      	uxth	r2, r3
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002802:	2301      	movs	r3, #1
 8002804:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002806:	f7fe fddf 	bl	80013c8 <HAL_GetTick>
 800280a:	4602      	mov	r2, r0
 800280c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800280e:	1ad3      	subs	r3, r2, r3
 8002810:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002812:	429a      	cmp	r2, r3
 8002814:	d807      	bhi.n	8002826 <HAL_SPI_TransmitReceive+0x1d8>
 8002816:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002818:	f1b3 3fff 	cmp.w	r3, #4294967295
 800281c:	d003      	beq.n	8002826 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800281e:	2303      	movs	r3, #3
 8002820:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002824:	e0a7      	b.n	8002976 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800282a:	b29b      	uxth	r3, r3
 800282c:	2b00      	cmp	r3, #0
 800282e:	d1a6      	bne.n	800277e <HAL_SPI_TransmitReceive+0x130>
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002834:	b29b      	uxth	r3, r3
 8002836:	2b00      	cmp	r3, #0
 8002838:	d1a1      	bne.n	800277e <HAL_SPI_TransmitReceive+0x130>
 800283a:	e07c      	b.n	8002936 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	685b      	ldr	r3, [r3, #4]
 8002840:	2b00      	cmp	r3, #0
 8002842:	d002      	beq.n	800284a <HAL_SPI_TransmitReceive+0x1fc>
 8002844:	8b7b      	ldrh	r3, [r7, #26]
 8002846:	2b01      	cmp	r3, #1
 8002848:	d16b      	bne.n	8002922 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	330c      	adds	r3, #12
 8002854:	7812      	ldrb	r2, [r2, #0]
 8002856:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800285c:	1c5a      	adds	r2, r3, #1
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002866:	b29b      	uxth	r3, r3
 8002868:	3b01      	subs	r3, #1
 800286a:	b29a      	uxth	r2, r3
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002870:	e057      	b.n	8002922 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	689b      	ldr	r3, [r3, #8]
 8002878:	f003 0302 	and.w	r3, r3, #2
 800287c:	2b02      	cmp	r3, #2
 800287e:	d11c      	bne.n	80028ba <HAL_SPI_TransmitReceive+0x26c>
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002884:	b29b      	uxth	r3, r3
 8002886:	2b00      	cmp	r3, #0
 8002888:	d017      	beq.n	80028ba <HAL_SPI_TransmitReceive+0x26c>
 800288a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800288c:	2b01      	cmp	r3, #1
 800288e:	d114      	bne.n	80028ba <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	330c      	adds	r3, #12
 800289a:	7812      	ldrb	r2, [r2, #0]
 800289c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028a2:	1c5a      	adds	r2, r3, #1
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80028ac:	b29b      	uxth	r3, r3
 80028ae:	3b01      	subs	r3, #1
 80028b0:	b29a      	uxth	r2, r3
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80028b6:	2300      	movs	r3, #0
 80028b8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	689b      	ldr	r3, [r3, #8]
 80028c0:	f003 0301 	and.w	r3, r3, #1
 80028c4:	2b01      	cmp	r3, #1
 80028c6:	d119      	bne.n	80028fc <HAL_SPI_TransmitReceive+0x2ae>
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80028cc:	b29b      	uxth	r3, r3
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d014      	beq.n	80028fc <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	68da      	ldr	r2, [r3, #12]
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028dc:	b2d2      	uxtb	r2, r2
 80028de:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028e4:	1c5a      	adds	r2, r3, #1
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80028ee:	b29b      	uxth	r3, r3
 80028f0:	3b01      	subs	r3, #1
 80028f2:	b29a      	uxth	r2, r3
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80028f8:	2301      	movs	r3, #1
 80028fa:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80028fc:	f7fe fd64 	bl	80013c8 <HAL_GetTick>
 8002900:	4602      	mov	r2, r0
 8002902:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002904:	1ad3      	subs	r3, r2, r3
 8002906:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002908:	429a      	cmp	r2, r3
 800290a:	d803      	bhi.n	8002914 <HAL_SPI_TransmitReceive+0x2c6>
 800290c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800290e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002912:	d102      	bne.n	800291a <HAL_SPI_TransmitReceive+0x2cc>
 8002914:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002916:	2b00      	cmp	r3, #0
 8002918:	d103      	bne.n	8002922 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800291a:	2303      	movs	r3, #3
 800291c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002920:	e029      	b.n	8002976 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002926:	b29b      	uxth	r3, r3
 8002928:	2b00      	cmp	r3, #0
 800292a:	d1a2      	bne.n	8002872 <HAL_SPI_TransmitReceive+0x224>
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002930:	b29b      	uxth	r3, r3
 8002932:	2b00      	cmp	r3, #0
 8002934:	d19d      	bne.n	8002872 <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002936:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002938:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800293a:	68f8      	ldr	r0, [r7, #12]
 800293c:	f000 f904 	bl	8002b48 <SPI_EndRxTxTransaction>
 8002940:	4603      	mov	r3, r0
 8002942:	2b00      	cmp	r3, #0
 8002944:	d006      	beq.n	8002954 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8002946:	2301      	movs	r3, #1
 8002948:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	2220      	movs	r2, #32
 8002950:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8002952:	e010      	b.n	8002976 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	689b      	ldr	r3, [r3, #8]
 8002958:	2b00      	cmp	r3, #0
 800295a:	d10b      	bne.n	8002974 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800295c:	2300      	movs	r3, #0
 800295e:	617b      	str	r3, [r7, #20]
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	68db      	ldr	r3, [r3, #12]
 8002966:	617b      	str	r3, [r7, #20]
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	689b      	ldr	r3, [r3, #8]
 800296e:	617b      	str	r3, [r7, #20]
 8002970:	697b      	ldr	r3, [r7, #20]
 8002972:	e000      	b.n	8002976 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8002974:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	2201      	movs	r2, #1
 800297a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	2200      	movs	r2, #0
 8002982:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002986:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800298a:	4618      	mov	r0, r3
 800298c:	3730      	adds	r7, #48	; 0x30
 800298e:	46bd      	mov	sp, r7
 8002990:	bd80      	pop	{r7, pc}
	...

08002994 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002994:	b580      	push	{r7, lr}
 8002996:	b088      	sub	sp, #32
 8002998:	af00      	add	r7, sp, #0
 800299a:	60f8      	str	r0, [r7, #12]
 800299c:	60b9      	str	r1, [r7, #8]
 800299e:	603b      	str	r3, [r7, #0]
 80029a0:	4613      	mov	r3, r2
 80029a2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80029a4:	f7fe fd10 	bl	80013c8 <HAL_GetTick>
 80029a8:	4602      	mov	r2, r0
 80029aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029ac:	1a9b      	subs	r3, r3, r2
 80029ae:	683a      	ldr	r2, [r7, #0]
 80029b0:	4413      	add	r3, r2
 80029b2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80029b4:	f7fe fd08 	bl	80013c8 <HAL_GetTick>
 80029b8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80029ba:	4b39      	ldr	r3, [pc, #228]	; (8002aa0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	015b      	lsls	r3, r3, #5
 80029c0:	0d1b      	lsrs	r3, r3, #20
 80029c2:	69fa      	ldr	r2, [r7, #28]
 80029c4:	fb02 f303 	mul.w	r3, r2, r3
 80029c8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80029ca:	e054      	b.n	8002a76 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80029cc:	683b      	ldr	r3, [r7, #0]
 80029ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029d2:	d050      	beq.n	8002a76 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80029d4:	f7fe fcf8 	bl	80013c8 <HAL_GetTick>
 80029d8:	4602      	mov	r2, r0
 80029da:	69bb      	ldr	r3, [r7, #24]
 80029dc:	1ad3      	subs	r3, r2, r3
 80029de:	69fa      	ldr	r2, [r7, #28]
 80029e0:	429a      	cmp	r2, r3
 80029e2:	d902      	bls.n	80029ea <SPI_WaitFlagStateUntilTimeout+0x56>
 80029e4:	69fb      	ldr	r3, [r7, #28]
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d13d      	bne.n	8002a66 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	685a      	ldr	r2, [r3, #4]
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80029f8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	685b      	ldr	r3, [r3, #4]
 80029fe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002a02:	d111      	bne.n	8002a28 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	689b      	ldr	r3, [r3, #8]
 8002a08:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002a0c:	d004      	beq.n	8002a18 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	689b      	ldr	r3, [r3, #8]
 8002a12:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a16:	d107      	bne.n	8002a28 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	681a      	ldr	r2, [r3, #0]
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002a26:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a2c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002a30:	d10f      	bne.n	8002a52 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	681a      	ldr	r2, [r3, #0]
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002a40:	601a      	str	r2, [r3, #0]
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	681a      	ldr	r2, [r3, #0]
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002a50:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	2201      	movs	r2, #1
 8002a56:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8002a62:	2303      	movs	r3, #3
 8002a64:	e017      	b.n	8002a96 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8002a66:	697b      	ldr	r3, [r7, #20]
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d101      	bne.n	8002a70 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002a6c:	2300      	movs	r3, #0
 8002a6e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002a70:	697b      	ldr	r3, [r7, #20]
 8002a72:	3b01      	subs	r3, #1
 8002a74:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	689a      	ldr	r2, [r3, #8]
 8002a7c:	68bb      	ldr	r3, [r7, #8]
 8002a7e:	4013      	ands	r3, r2
 8002a80:	68ba      	ldr	r2, [r7, #8]
 8002a82:	429a      	cmp	r2, r3
 8002a84:	bf0c      	ite	eq
 8002a86:	2301      	moveq	r3, #1
 8002a88:	2300      	movne	r3, #0
 8002a8a:	b2db      	uxtb	r3, r3
 8002a8c:	461a      	mov	r2, r3
 8002a8e:	79fb      	ldrb	r3, [r7, #7]
 8002a90:	429a      	cmp	r2, r3
 8002a92:	d19b      	bne.n	80029cc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002a94:	2300      	movs	r3, #0
}
 8002a96:	4618      	mov	r0, r3
 8002a98:	3720      	adds	r7, #32
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	bd80      	pop	{r7, pc}
 8002a9e:	bf00      	nop
 8002aa0:	20000004 	.word	0x20000004

08002aa4 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	b086      	sub	sp, #24
 8002aa8:	af02      	add	r7, sp, #8
 8002aaa:	60f8      	str	r0, [r7, #12]
 8002aac:	60b9      	str	r1, [r7, #8]
 8002aae:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	685b      	ldr	r3, [r3, #4]
 8002ab4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002ab8:	d111      	bne.n	8002ade <SPI_EndRxTransaction+0x3a>
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	689b      	ldr	r3, [r3, #8]
 8002abe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002ac2:	d004      	beq.n	8002ace <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	689b      	ldr	r3, [r3, #8]
 8002ac8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002acc:	d107      	bne.n	8002ade <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	681a      	ldr	r2, [r3, #0]
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002adc:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	685b      	ldr	r3, [r3, #4]
 8002ae2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002ae6:	d117      	bne.n	8002b18 <SPI_EndRxTransaction+0x74>
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	689b      	ldr	r3, [r3, #8]
 8002aec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002af0:	d112      	bne.n	8002b18 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	9300      	str	r3, [sp, #0]
 8002af6:	68bb      	ldr	r3, [r7, #8]
 8002af8:	2200      	movs	r2, #0
 8002afa:	2101      	movs	r1, #1
 8002afc:	68f8      	ldr	r0, [r7, #12]
 8002afe:	f7ff ff49 	bl	8002994 <SPI_WaitFlagStateUntilTimeout>
 8002b02:	4603      	mov	r3, r0
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d01a      	beq.n	8002b3e <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b0c:	f043 0220 	orr.w	r2, r3, #32
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002b14:	2303      	movs	r3, #3
 8002b16:	e013      	b.n	8002b40 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	9300      	str	r3, [sp, #0]
 8002b1c:	68bb      	ldr	r3, [r7, #8]
 8002b1e:	2200      	movs	r2, #0
 8002b20:	2180      	movs	r1, #128	; 0x80
 8002b22:	68f8      	ldr	r0, [r7, #12]
 8002b24:	f7ff ff36 	bl	8002994 <SPI_WaitFlagStateUntilTimeout>
 8002b28:	4603      	mov	r3, r0
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d007      	beq.n	8002b3e <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b32:	f043 0220 	orr.w	r2, r3, #32
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002b3a:	2303      	movs	r3, #3
 8002b3c:	e000      	b.n	8002b40 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 8002b3e:	2300      	movs	r3, #0
}
 8002b40:	4618      	mov	r0, r3
 8002b42:	3710      	adds	r7, #16
 8002b44:	46bd      	mov	sp, r7
 8002b46:	bd80      	pop	{r7, pc}

08002b48 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002b48:	b580      	push	{r7, lr}
 8002b4a:	b086      	sub	sp, #24
 8002b4c:	af02      	add	r7, sp, #8
 8002b4e:	60f8      	str	r0, [r7, #12]
 8002b50:	60b9      	str	r1, [r7, #8]
 8002b52:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	9300      	str	r3, [sp, #0]
 8002b58:	68bb      	ldr	r3, [r7, #8]
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	2180      	movs	r1, #128	; 0x80
 8002b5e:	68f8      	ldr	r0, [r7, #12]
 8002b60:	f7ff ff18 	bl	8002994 <SPI_WaitFlagStateUntilTimeout>
 8002b64:	4603      	mov	r3, r0
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d007      	beq.n	8002b7a <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b6e:	f043 0220 	orr.w	r2, r3, #32
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8002b76:	2303      	movs	r3, #3
 8002b78:	e000      	b.n	8002b7c <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8002b7a:	2300      	movs	r3, #0
}
 8002b7c:	4618      	mov	r0, r3
 8002b7e:	3710      	adds	r7, #16
 8002b80:	46bd      	mov	sp, r7
 8002b82:	bd80      	pop	{r7, pc}

08002b84 <__libc_init_array>:
 8002b84:	b570      	push	{r4, r5, r6, lr}
 8002b86:	2600      	movs	r6, #0
 8002b88:	4d0c      	ldr	r5, [pc, #48]	; (8002bbc <__libc_init_array+0x38>)
 8002b8a:	4c0d      	ldr	r4, [pc, #52]	; (8002bc0 <__libc_init_array+0x3c>)
 8002b8c:	1b64      	subs	r4, r4, r5
 8002b8e:	10a4      	asrs	r4, r4, #2
 8002b90:	42a6      	cmp	r6, r4
 8002b92:	d109      	bne.n	8002ba8 <__libc_init_array+0x24>
 8002b94:	f000 f822 	bl	8002bdc <_init>
 8002b98:	2600      	movs	r6, #0
 8002b9a:	4d0a      	ldr	r5, [pc, #40]	; (8002bc4 <__libc_init_array+0x40>)
 8002b9c:	4c0a      	ldr	r4, [pc, #40]	; (8002bc8 <__libc_init_array+0x44>)
 8002b9e:	1b64      	subs	r4, r4, r5
 8002ba0:	10a4      	asrs	r4, r4, #2
 8002ba2:	42a6      	cmp	r6, r4
 8002ba4:	d105      	bne.n	8002bb2 <__libc_init_array+0x2e>
 8002ba6:	bd70      	pop	{r4, r5, r6, pc}
 8002ba8:	f855 3b04 	ldr.w	r3, [r5], #4
 8002bac:	4798      	blx	r3
 8002bae:	3601      	adds	r6, #1
 8002bb0:	e7ee      	b.n	8002b90 <__libc_init_array+0xc>
 8002bb2:	f855 3b04 	ldr.w	r3, [r5], #4
 8002bb6:	4798      	blx	r3
 8002bb8:	3601      	adds	r6, #1
 8002bba:	e7f2      	b.n	8002ba2 <__libc_init_array+0x1e>
 8002bbc:	08002c30 	.word	0x08002c30
 8002bc0:	08002c30 	.word	0x08002c30
 8002bc4:	08002c30 	.word	0x08002c30
 8002bc8:	08002c34 	.word	0x08002c34

08002bcc <memset>:
 8002bcc:	4603      	mov	r3, r0
 8002bce:	4402      	add	r2, r0
 8002bd0:	4293      	cmp	r3, r2
 8002bd2:	d100      	bne.n	8002bd6 <memset+0xa>
 8002bd4:	4770      	bx	lr
 8002bd6:	f803 1b01 	strb.w	r1, [r3], #1
 8002bda:	e7f9      	b.n	8002bd0 <memset+0x4>

08002bdc <_init>:
 8002bdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002bde:	bf00      	nop
 8002be0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002be2:	bc08      	pop	{r3}
 8002be4:	469e      	mov	lr, r3
 8002be6:	4770      	bx	lr

08002be8 <_fini>:
 8002be8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002bea:	bf00      	nop
 8002bec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002bee:	bc08      	pop	{r3}
 8002bf0:	469e      	mov	lr, r3
 8002bf2:	4770      	bx	lr
